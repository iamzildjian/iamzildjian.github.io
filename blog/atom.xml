<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个坏掉的番茄</title>
  <icon>https://www.gravatar.com/avatar/fb1474ceea5c76f3590d32cb837ade84</icon>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://tomotoes.com/blog/"/>
  <updated>2021-10-05T10:24:13.190Z</updated>
  <id>https://tomotoes.com/blog/</id>
  
  <author>
    <name>Simon Ma</name>
    <email>simon@tomotoes.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>漫谈编程语言</title>
    <link href="https://tomotoes.com/blog/talking-about-programming-language/"/>
    <id>https://tomotoes.com/blog/talking-about-programming-language/</id>
    <published>2021-01-30T10:54:28.000Z</published>
    <updated>2021-10-05T10:24:13.190Z</updated>
    
    <content type="html"><![CDATA[<p>编程语言，一种特殊的语言。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文来自于 我在公司内部的一次分享。</p><p>主要简述了编程语言的阵营，语义的表达形式，不同的思维范式，以及常见规范和执行机制。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="编程语言三种阵营"><a href="#编程语言三种阵营" class="headerlink" title="编程语言三种阵营"></a>编程语言三种阵营</h3><h4 id="学术派"><a href="#学术派" class="headerlink" title="学术派"></a>学术派</h4><blockquote><p>You are a poet and a mathematician. Programming is your poetry</p></blockquote><p>语言代表：Haskell Lisp Scala Closure</p><p>学术阵营认为编程语言是一种思想的表达。</p><p>这些语言往往是从上向下去设计，从一个纯粹的理想角度对语言建模，它们充斥着各种概念: 函数式，类型系统，模式匹配… </p><p>它们痛斥操作系统，编译器带来的各种缺陷，所以在设计时 很少去考虑，甚至有的学术派语言 完全找不到相应概念的映射(Lisp)。</p><p>虽然它们的结构精妙 概念完美，但从实用角度上 完全不占优势。</p><p>主要原因有二：</p><ol><li><p>如果想熟悉学术派编程语言，就必须要先掌握它们背后的设计思想。</p><p>就比如想掌握 Haskell，范畴论那套东西你绕不开，因为 Haskell 的基本组成单位就是 Functor。 </p></li><li><p>大部分学术派语言都认为编程的世界应该是“纯”的，它们反感副作用的出现，它们会为副作用的数据提供各种建模，让它们符合“纯”的定义。 </p></li></ol><p>有一个典型的例子，使用 Maybe 处理异常：</p><figure class="highlight haskell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">divBy</span> :: <span class="type">Integral</span> a =&gt; a -&gt; [a] -&gt; <span class="type">Maybe</span> [a]</span><br><span class="line"><span class="title">divBy</span> _ [] = <span class="type">Just</span> []</span><br><span class="line"><span class="title">divBy</span> _ (<span class="number">0</span>:_) = <span class="type">Nothing</span></span><br><span class="line"><span class="title">divBy</span> numerator (denom:xs) =</span><br><span class="line">    <span class="keyword">case</span> divBy numerator xs <span class="keyword">of</span></span><br><span class="line">      <span class="type">Nothing</span> -&gt; <span class="type">Nothing</span></span><br><span class="line">      <span class="type">Just</span> results -&gt; <span class="type">Just</span> ((numerator `div` denom) : results)</span><br></pre></td></tr></tbody></table></figure><p>但是操作系统就是一个副作用的产物。</p><p>用<a href="http://www.yinwang.org/blog-cn/2015/04/03/paradigms" target="_blank" rel="external nofollow noopener noreferrer">垠神的话</a>来说：没有副作用的语言，就像一个没有无线电，没有光的世界，所有的数据都必须通过实在的导线传递，这许多纷繁的电缆，必须被正确的连接和组织，才能达到需要的效果。</p><p>不过 它们对现代编程语言的发展做出了很大贡献，现代编程语言中的大多数特性都是来自这个阵营。</p><p>就比如 React 提倡的 State 数据不可变模型，reducer 的纯函数特性。</p><p>Rust 中的错误处理特性，Kotlin 中的高阶类型等等。</p><h4 id="低层派"><a href="#低层派" class="headerlink" title="低层派"></a>低层派</h4><blockquote><p>You are a hacker. You make hardware dance to your tune</p></blockquote><p>语言代表: C C++ Rust Assembly</p><p>计算机科学的先驱 Alan Perlis 给低层语言（low-level languages）下的定义是：</p><blockquote><p>“A programming language is low level when its programs require attention to the irrelevant.”</p></blockquote><p>如果用一门语言编写的程序<strong>需要处理不相关的东西</strong>，那这就是一门低层语言。</p><p>低层阵营认为编程语言是运行在冯诺依曼机器上的机器码。</p><p>这些语言没有学术派语言”那些华丽的外衣”，它们是命令式语言与一点 操作系统/编译器抽象的结合。</p><p>虽然从编程角度来说很原始，但它们有最贴近魔法的能力，它们可直接操控内存，手动回收垃圾，从语法角度去进行编译优化，将操作系统/编译器的概念映射得淋漓尽致。</p><p>并且它们也是高级语言以及各种基础设施的缔造者。</p><p>不过为了有效地编程，必须时刻记住硬件和软件的概念，在往往会让开发者痛苦不堪。</p><p>最典型的 烫烫烫错误：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/2-min.gif" alt="img" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/talking-about-programming-language/error.png"> </div> <div class="image-caption">img</div> </figure><h4 id="应用派"><a href="#应用派" class="headerlink" title="应用派"></a>应用派</h4><blockquote><p>You are a maker. You build things for people to use</p></blockquote><p>语言代表: JavaScript Python C# Swift Kotlin PHP</p><p>应用阵营认为编程语言是构建应用的一种工具。</p><p>这些语言往往是最贴近应用业务的，它们倾向于在特定环境下组合各种功能 模块，而不必太关心底层。</p><p>甚至有的应用级开发者，不需要懂操作系统，算法就可以设计出一款精美的应用。</p><p>因为在互联网的红利推动下，有很多基础设施已经被实现，所以应用级的开发者 很少在乎底层，这是件可怕的事。</p><p>就比如: Java 里的 Int 是 4 个 byte；但是 Go 里的 Int 却和机器的 32bit 还是 64bit 有关；到了 JS 里，压根就没有“整数”的概念，都是“number”。</p><p>现代的大部分应用都离不开这些语言，有趣的是，有些语言的最初设计很不规范，幸好它们的社区是最开发繁荣的。</p><h3 id="编程语言与语义学"><a href="#编程语言与语义学" class="headerlink" title="编程语言与语义学"></a>编程语言与语义学</h3><p>编程语言与语言密不可分，都是表达思想的一种工具。</p><p>谈起语言 就离不开语义，在编程语言中 语义最明显的表现就是 命名 以及 编程范式(下一章节)了。</p><h4 id="正反例子"><a href="#正反例子" class="headerlink" title="正反例子"></a>正反例子</h4><p>举一些的例子:</p><p>JavaScript - 命名错误问题</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回两数之和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a，b</span>) </span>{ <span class="keyword">return</span> a + b }</span><br></pre></td></tr></tbody></table></figure><p>Python - API 设计问题</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回 列表中 出现次数最多的数字</span></span><br><span class="line"><span class="comment"># 短短两行代码，做的事情全都隐藏起来了 为了简约 反而给开发者增加了心智负担</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">most_frequent</span><span class="params">(lst)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> max(set(lst)，key = lst.count)</span><br><span class="line"></span><br><span class="line">most_frequent([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>]) <span class="comment"># 2</span></span><br></pre></td></tr></tbody></table></figure><p>Kotlin - 正面例子</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据条件 划分数组</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String，<span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">  <span class="keyword">val</span> members = listOf(</span><br><span class="line">    Person(<span class="string">"Ben"</span>，<span class="number">85</span>),</span><br><span class="line">    Person(<span class="string">"Mel"</span>，<span class="number">7</span>),</span><br><span class="line">    Person(<span class="string">"Lou"</span>，<span class="number">15</span>),</span><br><span class="line">    Person(<span class="string">"Sam"</span>，<span class="number">22</span>),</span><br><span class="line">    Person(<span class="string">"Ash"</span>，<span class="number">10</span>),</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">val</span> (kids，adults) = members.partition { it.age &lt; <span class="number">18</span> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="语义设计"><a href="#语义设计" class="headerlink" title="语义设计"></a>语义设计</h4><p>可以看出，一个优秀的名称设计是有多么的重要，这里可以细谈一下，名称设计一般分为：</p><ol><li><p>内部变量命名</p><ul><li>表示数据</li><li>表示状态</li></ul></li><li><p>函数命名</p></li><li><p>特定领域命名(不涉及，因为一般都有规范，就比如 React 组件必须大写-骆驼峰)</p></li></ol><p>命名内部数据变量的时候，用名词堆叠 再符合个命名规范就可以了。</p><p>比如:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> page_count = <span class="number">5</span></span><br><span class="line"><span class="keyword">const</span> should_update = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> firstName = <span class="string">'Gustavo'</span></span><br><span class="line"><span class="keyword">const</span> friends = [<span class="string">'Kate'</span>，<span class="string">'John'</span>]</span><br></pre></td></tr></tbody></table></figure><p>命名状态变量的时候，一般都是特定动词(has/should/can/is/…)+名词。</p><p>比如:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hasPagination = postCount &gt; <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> shouldDisplayPagination = postCount &gt; <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><p>函数命名时，也是有一定规律的。</p><p>函数: 动词+名词堆叠+[副词]</p><p>而动词 完全可以把它枚举出来，这样大部分场景下，都可以拿来就用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addBalance getAccount filterActivityList patchEmails deleteUserById</span><br><span class="line">removeItem [generate/gen]TagList fillTableHeader createFolder forEachFileList parseNodeTree updateUserInfo</span><br><span class="line">extractUserInfo showTable hideIframe useDebounce toBase64 isSuccess canWrite requestModule loadScript fetchGalleryData setLanguage sendMessage querySelector findElement combineList importResource searchService renderComponent readFile onChange handleInput verifyFormData changeSettings cloneJSON appendSlice insertColumn saveConfig execCommand unloadPage destoryConnection openProgram</span><br></pre></td></tr></tbody></table></figure><p>单个动词，一般都是 名词.动词，就比如 <code>AST.parse()</code>。</p><h4 id="中文编程"><a href="#中文编程" class="headerlink" title="中文编程"></a>中文编程</h4><ol><li><p><a href="https://github.com/wenyan-lang/wenyan" target="_blank" rel="external nofollow noopener noreferrer">文言文编程语言</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">吾有一數。曰三。名之曰「甲」。</span><br><span class="line">為是「甲」遍。</span><br><span class="line">  吾有一言。曰「「問天地好在。」」。書之。</span><br><span class="line">云云。</span><br></pre></td></tr></tbody></table></figure></li><li><p><a href="https://github.com/zhanyong-wan/dongbei/blob/master/doc/dongbei-ref.md" target="_blank" rel="external nofollow noopener noreferrer">东北编程语言</a></p></li><li><p><a href="https://github.com/itorr/e/blob/master/index.html" target="_blank" rel="external nofollow noopener noreferrer">易网页</a></p></li></ol><h3 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h3><p>不同的编程范式 代表了 coding 时 不同的思考维度，下面将简述目前最流行的三种范式。</p><h4 id="结构式"><a href="#结构式" class="headerlink" title="结构式"></a>结构式</h4><blockquote><p>everything is command.</p></blockquote><p>结构式编程是最符合冯诺依曼体系的范式，它告诉计算机如何去做事情。</p><p>它将逻辑划分成一个个语句，使用最淳朴的方式(循环，分支,顺序)排列起来，然后顺序执行。</p><p><a href="https://www.hackerrank.com/challenges/fizzbuzz/problem" target="_blank" rel="external nofollow noopener noreferrer">FizzBuzz</a>程序的结构式实现：</p><blockquote><p>Write a short program that prints each number from 1 to 100 on a new line. </p><p>For each multiple of 3，print “Fizz” instead of the number. </p><p>For each multiple of 5，print “Buzz” instead of the number. </p><p>For numbers which are multiples of both 3 and 5，print “FizzBuzz” instead of the number.</p></blockquote><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++ {</span><br><span class="line">        divBy3 := i%<span class="number">3</span> == <span class="number">0</span></span><br><span class="line">        divBy5 := i%<span class="number">5</span> == <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> divBy3 &amp;&amp; divBy5 {</span><br><span class="line">            fmt.Println(<span class="string">"FizzBuzz"</span>)</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> divBy3 {</span><br><span class="line">            fmt.Println(<span class="string">"Fizz"</span>)</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> divBy5 {</span><br><span class="line">            fmt.Println(<span class="string">"Buzz"</span>)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            fmt.Println(i)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>很淳朴不是嘛。</p><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><blockquote><p>everything is object.</p></blockquote><p>相信很多同学都学过有关面向对象的语言，在我们上课的时候，老师就常提起 面向对象的三大概念: 封装 继承 多态。</p><p>其实这个概念一直是错误的。</p><p>封装是一个很笼统的概念，函数就是一种封装；并且多态可以理解为向上转型，Python TypeScript 中的 ducking typing 就可以多态；目前看来只有继承是 OOP 的特性。</p><p>但 OOP 的主要概念真的是如此吗? 显然不是的。</p><p>OOP 主要是提供了一种模块化思想，面向对象范式只是语法层面的思想体现。</p><p>它在面向结构式上抽象，根据功能业务 对编程世界进行建模，把代码变成一个个以类为主的组成单元。</p><p>有趣的是 大行其道微服务，这两年兴起的微前端，以及底层的微内核 都是这种模块化思想。</p><p>在语法上 OOP 由于不支持 函数第一成员的特性，所有的逻辑都只能封装到类的方法中，调用逻辑时只能名词.动词()，这也是面向对象语言 给人造成繁琐的原因。</p><p>(其实我还想说，这也是为什么设计模式 这种常见概念能大行其道的原因)</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>{</span><br><span class="line">    <span class="keyword">var</span> x:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(p: <span class="type">Point</span>)</span></span> {</span><br><span class="line">        x += p.x</span><br><span class="line">        y += p.y</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> {</span><br><span class="line">    <span class="keyword">val</span> p = Point()</span><br><span class="line">    p.x = <span class="number">8</span></span><br><span class="line">    p.y = <span class="number">10</span></span><br><span class="line">    <span class="keyword">val</span> p1 = Point()</span><br><span class="line">    p1.x = <span class="number">2</span></span><br><span class="line">    p1.y = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> p2 = p + p1</span><br><span class="line">    println(<span class="string">"Point(x = <span class="subst">${p.x}</span>，y = <span class="subst">${p.y}</span>)"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h4><blockquote><p>everything is lambda.</p></blockquote><p>函数式编程是最符合人思维的范式，它告诉计算机 我们想要什么(声明式编程)。</p><p>一提到函数式，纯函数，无状态，数据不可变，副作用，惰性执行等等相关概念都不可避免。</p><p>我简述下：</p><ol><li>无状态: 不管何时运行，运行多少次，只要给定相同的输入，那输出结果一定是一致的，完全不依赖外部数据。</li><li>数据不可变: 顾名思义，数据不可变化，如果想修改数据，那就创建一个新的数据。</li><li>副作用: 指的是 函数修改了外部的状态，可以看出 如果保存了数据不可变型，那么函数自然而然就没有副作用了。</li><li>纯函数: 如果一个函数保障了 无状态 数据不可变特性，那这个函数就是一个纯函数。</li></ol><p>不依赖外部数据，不修改内部数据。</p><p>举例:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = { <span class="attr">name</span>: <span class="string">'SimonAKing'</span> }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改了内部数据</span></span><br><span class="line"><span class="keyword">const</span> changeName = <span class="function">(<span class="params">person，newName</span>) =&gt;</span> person.name = NewName</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖了外部数据</span></span><br><span class="line"><span class="keyword">const</span> joinName = <span class="function">(<span class="params">text</span>) =&gt;</span> person.name + text</span><br></pre></td></tr></tbody></table></figure><p>可以看出 函数式本身具备了一种防御性编程的规范。</p><p>而函数式编程的主要提供了什么？</p><p>答: 逻辑的组合映射 以及 行为上的分治思想(MapReduce)。</p><p>逻辑的组合映射，函数式编程语言提供了很多有关组合映射的工具函数：map、flatMap、foldl、foldr、reduce、filter、compose、partial、curring ..</p><p>当然在熟悉它们之前，你需要了解下 各种 Functor: 基本的 Mappable 函子、Pointed 函子、Maybe 函子、Monad 函子等 以及 一些范畴论的知识。</p><p>一个简朴的函子:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>{</span><br><span class="line">  <span class="keyword">constructor</span>(value) { </span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">  }</span><br><span class="line">  map (fn) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Box(fn(<span class="keyword">this</span>.value))</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">new</span> Box(<span class="number">1</span>).map(<span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">1</span>).map(<span class="function"><span class="params">v</span> =&gt;</span> v * <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>行为上的分治思想：</p><p>给出快排的两种实现，大家可以体会下：</p><ul><li>结构式:</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>{   </span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span> pos1,<span class="keyword">int</span> pos2,List data)</span></span>{</span><br><span class="line">             <span class="keyword">int</span> tmp=data[pos1];</span><br><span class="line">             data[pos1]=data[pos2];</span><br><span class="line">             data[pos2]=tmp;</span><br><span class="line">       }</span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">partition</span> <span class="params">(<span class="keyword">int</span> lo,<span class="keyword">int</span> hi，List a)</span></span>{                   </span><br><span class="line">             <span class="keyword">if</span> (lo&lt;<span class="number">0</span>||hi&lt;<span class="number">0</span>||lo&gt;=hi-<span class="number">1</span>){</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">             }</span><br><span class="line">             <span class="keyword">int</span> midValue=a[lo];</span><br><span class="line">             <span class="keyword">int</span> i=lo+<span class="number">1</span>;<span class="keyword">int</span> j=hi;</span><br><span class="line">             <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">                    <span class="keyword">while</span>(i&lt;hi&amp;&amp;a[i]&lt;midValue){</span><br><span class="line">                           i++;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">while</span>(j&gt;lo&amp;&amp;a[j]&gt;midValue){</span><br><span class="line">                           j--;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> (i&gt;=j) <span class="keyword">break</span>;</span><br><span class="line">                    exch(i,j,a);        </span><br><span class="line">             }</span><br><span class="line">             exch(i,lo,a);       </span><br><span class="line">             partition(lo,i-<span class="number">1</span>,a);             </span><br><span class="line">             partition(i+<span class="number">1</span>,hi,a);</span><br><span class="line">             </span><br><span class="line">       }</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">sort</span><span class="params">(List a)</span></span>{</span><br><span class="line">             <span class="keyword">int</span> low=<span class="number">0</span>; <span class="keyword">int</span> hight=a.size()-<span class="number">1</span>;</span><br><span class="line">             partition(low，hight，a);      </span><br><span class="line">             <span class="keyword">return</span> a;    </span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>函数化:</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quickSort = <span class="function"><span class="params">a</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (!a.length) { <span class="keyword">return</span> [] }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    ...quickSort(a.filter(<span class="function"><span class="params">e</span> =&gt;</span> e &lt; a[<span class="number">0</span>])),</span><br><span class="line">    ...a.filter(<span class="function"><span class="params">e</span> =&gt;</span> e === a[<span class="number">0</span>]),</span><br><span class="line">    ...quickSort(a.filter(<span class="function"><span class="params">e</span> =&gt;</span> e &gt; a[<span class="number">0</span>]))]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>就像章节开始所说的那样：结构式编程是最符合冯诺依曼体系的范式，它告诉计算机如何去做事情；函数式编程是最符合人思维的范式，它告诉计算机 我们想要什么。</p><p>具体选哪种范式，还是要根据场景来结合。</p><p>如果你的场景适合业务领域建模，很容易找到不同的模型以及模型间关系的话，那么 OOP 显然是最优的。</p><p>如果你的场景 主要是对数据的加工，就比如对一数组先排序再筛选 然后映射得到结果的话，FP 就很自然。</p><h3 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h3><h4 id="SOLID-原则"><a href="#SOLID-原则" class="headerlink" title="SOLID 原则"></a>SOLID 原则</h4><ol><li><p>S：单一职责原则</p><p>一个模块只能做一件事。</p></li><li><p>O：开闭原则</p><p>增加新功能时，模块应该是支持扩展的，而不是提倡修改，多态的最佳实践。</p></li><li><p>L：里氏替换原则</p><p>子类必须可以替换它的超类，向下转型的最佳实践。</p></li><li><p>I：接口隔离原则 </p><p>接口设计时应该衡量细粒化，而不是设计一个笼统的接口。</p></li><li><p>D：依赖反转原则</p><p>高级模块不应该依赖于低级模块。两者都应该依赖于抽象。</p><p>抽象不应该依赖于细节。细节应该依赖于抽象。</p><p>注入实现了相同接口的逻辑。</p></li></ol><h4 id="防御性编程"><a href="#防御性编程" class="headerlink" title="防御性编程"></a>防御性编程</h4><p>防御性编程往往是从编程角度去提升工程质量，减少 Bug。</p><p>刚刚提到函数式语言的思想就很实用。</p><ol><li><p>拒绝写副作用代码</p><p>不要与外部状态相互关联，尽量将所需数据全部输入。比如典型的副作用 JS-API: sort，reverse，splice，最好能不用就不用。</p></li><li><p>不要共享引用</p><p>如果说 null 的设计是一亿美金的失误，那么 堆上对象共享引用 的设计可以算上得百亿美金的失误。如果遇到共享引用的变量情况，请不要碰它。</p></li><li><p>尽量写纯函数</p></li><li><p>尽量将数据流统一化</p></li><li><p>统一语言规范，使用相同的 lint 工具，相同的语法规范</p></li><li><p>容错处理，正视程序出现的每一个异常</p></li><li><p>API 接口设计时 对输入尽可能的保持严谨，对输出保持开发</p></li><li><p>不要相信网络请求，每一次网络请求都有可能失败</p></li></ol><h4 id="抽象化原则"><a href="#抽象化原则" class="headerlink" title="抽象化原则"></a>抽象化原则</h4><ol><li><p>DRY - Don’t Repeat Yourself</p><p>尽量在项目中减少重复的代码。</p></li><li><p>KISS - Keep It Simple &amp; Stupid</p><p>代码应该保持简单易懂。</p></li><li><p>YAGNI - You Ain’t Gonna Need It</p><p>不要进行过度化设计，会延缓开发效率。</p></li></ol><h3 id="编程语言如何执行"><a href="#编程语言如何执行" class="headerlink" title="编程语言如何执行"></a>编程语言如何执行</h3><h4 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h4><p>编译型语言是将源代码经过词法分析，语法分析，生成 AST，然后在转成中间代码的形式，经过优化器优化后 再生成目标机器的机器码。</p><p>优化涉及到的一些点：</p><ol><li>去掉无意义的数据 (无法运行到的代码，没有利用的数据)</li><li>内联函数，尾递归优化</li><li>解语法糖</li><li>…</li></ol><p>代表语言: C，C++，Go</p><h4 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h4><p>解释型语言，不能直接生成机器码，而是先翻译成中间代码，再有解释器对中间代码进行解释运行。</p><p>代表语言: Python，Lua</p><h4 id="解释编译型语言"><a href="#解释编译型语言" class="headerlink" title="解释编译型语言"></a>解释编译型语言</h4><p>由于即时编译技术(JIT)的存在，可以将热点代码直接编译成字节码 来提高程序执行的效率，越来越多的语言开始使用，就比如最近推出的 <a href="https://www.ruby-lang.org/en/news/2020/12/25/ruby-3-0-0-released/" target="_blank" rel="external nofollow noopener noreferrer">Ruby3</a>。</p><p>JavaScript 也是一个很好的例子。</p><blockquote><p>V8 运行 JS 的过程</p></blockquote><ol><li>源代码(source code) 通过解析器(parser) 解析后 生成抽象语法树(AST)。</li><li>抽象语法树 通过 解释器(interpreter-Ignition) 生成了字节码(bytecode)，此字节码作为基准执行模型，字节码等同于 25%-50% 机器码大小。 并且 此时抽象语法树被彻底清除掉了，释放其内存空间。</li><li>生成后的字节码 直接被 解释器执行 (解释执行)。</li><li>在代码不断的运行过程中，解释器收集到了很多可以优化代码的信息，比如变量的类型，哪些函数执行的频率较高。</li><li>V8 引擎的编译器(compiler-TruboFan) 会根据这些信息和字节码 来编译出经过优化的机器代码。</li></ol><p>一些常见的优化规则：</p><ul><li>函数只是声明未被调用，那么该函数不会生成到 AST</li><li>函数如果只被调用一次，字节码则直接被解释执行了</li><li>如果函数被调用多次，可能会被标记为热点函数，会被编译成机器代码</li></ul><p>随着不断执行，会有越来越多的代码被标记为热点代码，然后被编译成机器码。</p><p>所以 JS 运行的过程 正是一个从解释执行到编译执行的过程。</p><p>注意在某些情况下，优化后的机器代码可能会被逆向还原成字节码。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 假设调用了多次 sum 函数</span></span><br><span class="line"><span class="comment">// sum 函数在编译器优化后的机器码 将是 int 类型的参数</span></span><br><span class="line"></span><br><span class="line">sum(<span class="string">'1'</span>，<span class="string">'2'</span>)</span><br><span class="line"><span class="comment">// 此时 参数的类型发生变化，V8 将会发生 deoptimization 的过程</span></span><br><span class="line"><span class="comment">// 机器码不知道如何处理 string 类型参数，也就是回退到字节码，由解释器解释执行</span></span><br><span class="line"><span class="comment">// 所以 coding 时，热点函数不要随便改变类型</span></span><br></pre></td></tr></tbody></table></figure><h3 id="未来编程语言设想"><a href="#未来编程语言设想" class="headerlink" title="未来编程语言设想"></a>未来编程语言设想</h3><ol><li>完全不涉及编译器的概念</li><li>语义设计优秀，写代码就像写诗一样</li><li>无 GC</li><li>强类型系统，支持强大类型建模</li><li>各领域都有对应的丰富生态</li><li>优雅错误处理，强行让开发者正视逻辑错误，可是忽视潜在错误</li><li>强大的工具链，具有比较统一的编程风格，lint 工具，包管理器</li><li>可以完全利用多核的能力</li><li>可以面向 GPU 编程</li><li>支持多种编程范式</li><li>跨平台，无需虚拟机，可编译成机器码</li><li>在语法层面提供并发原语</li></ol><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul><li><a href="https://josephg.com/blog/3-tribes/" target="_blank" rel="external nofollow noopener noreferrer">3 tribes of programming</a></li><li><a href="http://www.yinwang.org/blog-cn/2015/04/03/paradigms" target="_blank" rel="external nofollow noopener noreferrer">编程的宗派</a></li><li><a href="https://thinking.tomotoes.com/tags/pl/index" target="_blank" rel="external nofollow noopener noreferrer">思考的价值-PL</a></li><li><a href="https://thinking.tomotoes.com/tags/coding" target="_blank" rel="external nofollow noopener noreferrer">思考的价值-Coding</a></li><li><a href="https://zhuanlan.zhihu.com/p/107947462" target="_blank" rel="external nofollow noopener noreferrer">前端 DSL 实践指南（上）—— 内部 DSL</a></li><li><a href="https://medium.com/free-code-camp/typescript-curry-ramda-types-f747e99744ab" target="_blank" rel="external nofollow noopener noreferrer">Learn Advanced TypeScript Types</a></li><li><a href="https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html" target="_blank" rel="external nofollow noopener noreferrer">Java 即时编译器原理解析及实践</a></li><li><a href="https://musicfe.dev/javascript-functional-programming-advance/" target="_blank" rel="external nofollow noopener noreferrer">函数式编程进阶：杰克船长的黑珍珠号</a></li><li><a href="http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy" target="_blank" rel="external nofollow noopener noreferrer">编程的智慧</a></li></ul><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p><style>.post-toc{overflow-y: auto; overflow-x: hidden; height: 35em;}</style>]]></content>
    
    <summary type="html">
    
      漫谈编程语言，从编程语言的三大阵营到编程语言与语义学，编程范式，编程规范，编程语言的执行机制
    
    </summary>
    
    
      <category term="随笔" scheme="https://tomotoes.com/blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://tomotoes.com/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="总结" scheme="https://tomotoes.com/blog/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="编程语言" scheme="https://tomotoes.com/blog/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>前端架构发展史</title>
    <link href="https://tomotoes.com/blog/history-of-front-end-architecture/"/>
    <id>https://tomotoes.com/blog/history-of-front-end-architecture/</id>
    <published>2021-01-22T14:21:04.000Z</published>
    <updated>2021-10-05T10:24:13.154Z</updated>
    
    <content type="html"><![CDATA[<p>前端改革 30 年，从一片荒芜到微前端兴起。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要简述前端<strong>系统级架构</strong>的演讲历史，不涉及应用级架构: MVC，MVMM…</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前置术语"><a href="#前置术语" class="headerlink" title="前置术语"></a>前置术语</h3><ul><li>应用：指的是一个整体的应用，可由多个模块组成。</li><li>模块：指的是整体应用下 被划分的子应用。</li></ul><h3 id="无架构"><a href="#无架构" class="headerlink" title="无架构"></a>无架构</h3><p>在 1990 年，Tim Berners-Lee 在他的 NeXT 电脑上部署了第一套“主机-网站-浏览器”构成的 Web 系统，这标志着前端的开始。</p><p>在最初，前端是一片荒芜的，经过浏览器大战，W3C 标准化的过程 前端才慢慢成长了起来。</p><p>在此时期，诞生了 CSS、JavaScript、DHTML 等重要技术。前端也从最开始的纯静态页面，逐步存在于 PHP、ASP、JSP 这些模板技术中。</p><p>由于前端涉及到的功能简单，只需操作 DOM，并不需要代码管理与模块支持。</p><p>所以 最初的前端只是 MVC 架构中的 View，如下面的模板，没有架构可言。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;&lt;title&gt;Car {{ $car-&gt;id }}&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Car {{ $car-&gt;id }}&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;Make: {{ $car-&gt;make }}&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Model: {{ $car-&gt;model }}&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Produced on: {{ $car-&gt;produced_on }}&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="前后端分离架构"><a href="#前后端分离架构" class="headerlink" title="前后端分离架构"></a>前后端分离架构</h3><p>在 1999 年，IE 浏览器支持了 XMLHttpRequest 接口，允许 JavaScript 异步发出 HTTP 请求，这为以后的前端发展 埋下了重要伏笔。</p><p>2005 年，在 Google 广泛应用 Ajax 通信 获得一系列产品成功后，这种不需要刷新页面就可以与服务器通信的技术 开始被开发者所重视。</p><p>但 Ajax 带来的不仅是一种可异步通信的技术，而是开发模式上的解耦。</p><p>前端不再是后端的模板，前端也可以实时地获取数据，动态地渲染内容。</p><p>在此时期，前端逐步从纯内容展示的静态网页 向 具备数据交互的动态网页转变，前端开发变得复杂起来。</p><p>与此同时，互联网带来的商业价值 推动了其他技术的产生，这其中就包括了 大名鼎鼎的 V8 。</p><p>在 V8 开源的第二年，Nodejs 出现了，让 JS 可以 run everywhere。</p><p>也正是因为它把前端快速带进了刀耕火种时代，其中最受益的就是工程化的兴起。</p><ul><li>构建工具：gulp webpack</li><li>包管理：npm yarn</li><li>排名第一的包生态</li></ul><p>除此之外，标准化组织 W3C 也在 08 年发布 HTML5 正式草案。</p><p>随着资本的重视，工程化的兴起，开源社区的努力，开发模式的创新，整个前端开发 开始呈现野蛮增长现象。</p><p>从 2010 年 10 月出现的 Backbone 开始，Knockout、Anjular、Ember、Meteor、Vue 相继出现，前端开发颇有一副 不管 MVC 、MVVM 还是 全栈开发，我全都要的气势。</p><p>在此期间，有一股潮流慢慢被大家所认可，就是单页面应用。</p><p>但单页面应用代表的不只是工程技术化的产物，而重要的是一种网页 应用化的思想。</p><p>而随着单页面应用的流行，移动端的兴起，前后端分离的架构也成为了行业的标准实践。</p><p>由此，前端不再是后端 MVC 中的 V，而是单独的一层。</p><p>前端开始进入前后端分离时代。</p><h3 id="微前端架构"><a href="#微前端架构" class="headerlink" title="微前端架构"></a>微前端架构</h3><p>微前端的概念由 ThoughtWorks 于 2016 年的一期<a href="https://assets.thoughtworks.com/assets/technology-radar-vol-17-cn.pdf" target="_blank" rel="external nofollow noopener noreferrer">技术雷达</a>提出,</p><p>摘自技术雷达:</p><p>我们已经从引入微服务架构中获得了明显的好处，微服务架构可以让团队裁剪出独立部署的交付物以及可维护的服务。不幸的是，我们还看到许多团队在后端服务之上创建了前端单体——一个单一，庞大和杂乱无绪的浏览器应用。我们首选的（经过验证的）方法是将基于浏览器的代码拆分成<strong>微前端</strong>。在这种方法中，Web 应用程序被分解为多个特性，每个特性都由不同的前后端团队拥有。这确保每个特性都独立于其他特性开发，测试和部署。这样可以使用多种技术来重新组合特性——有时候是页面，有时候是组件——最终整合成一个内聚的用户体验。</p><p>“微”是一个很神奇的概念，底层的微内核设计，大行其道的微服务概念，以及本章的微前端主题。</p><p>微 实质上代表的概念是模块化，而模块化具有的思想是: 单一职责、关注分离，分而治之，这些思想 在软件工程中体可谓是金玉良言。</p><p>在我看来 微前端的出现 是一种趋势，是 WEB2.0 时代应用复杂性的一种体现，也标志着前端从刀耕火种的时代跨入了工业化时代。</p><p>在一些小型应用中，往往几个 单页面就足以支撑起整个应用。</p><p>而在一些中大型的应用中，业务的复杂性、工程的庞大性 都难以控制，如果继续使用传统的开发模式，不仅应用的状态难以管理，打包出来的应用难以优化，就连协作开发都存在很大的耦合性。</p><p>微前端 使用去中心化的思想可以有效分解大型应用的复杂度，将大型应用划分成一个个独立的模块，根据功能、业务场景来进行自由编排，这些模块通过统一的入口注册组合，通过约定的方式来进行通信，各个模块可以做到并行开发，独立部署，而且技术栈也随之解耦。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/2-min.gif" alt="Application" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/history-of-front-end-architecture/image-20210122221421927.png"> </div> <div class="image-caption">Application</div> </figure><p>但是微前端并不是提升研发效率的银弹，需要根据具体场景来衡量是否使用，而架构就是权衡的艺术，微前端为我们提供了一种系统级的维度。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="适合场景"><a href="#适合场景" class="headerlink" title="适合场景"></a>适合场景</h4><ol><li><p>聚合型的应用</p><p>这种应用主要存在 业务场景多样且业务之间依赖性很低的场景。</p><p>就比如 Top 运营系统，每一个模块都可以单独抽成一个应用进行开发 且 满足单一职责原则，替换掉某一模块时也不会影响全局应用。</p></li><li><p>逻辑重复型的应用</p><p>这种应用的特征是，子模块之间存在很多共同的业务逻辑，重复建设严重。</p><p>就比如 电商系统，在 PC 端，H5 终端 都会有商品推荐，购买商品这些基本的功能，属于业务逻辑基本相同，UI 相差较大。</p><p>微前端可以将子模块之间相同的业务逻辑 提取到主应用，然后各个子模块通过约定的方式进行通信，这样子模块的维护性会得到提升。</p></li><li><p>需保留老模块的应用</p><p>在现代的前端开发时，由于技术栈日新月异，如何处理遗留模块 是一个无论绕过的问题。</p><p>如果旧模块可以继续使用，并且重写需要花很多时间力气的话，那么使用微前端 整合进现有应用是一个很好的方案。</p></li><li><p>需数据隔离的应用</p><p>数据隔离指的是 状态隔离，样式隔离。</p><p>如果一个应用的单个页面存在多种模块时，数据冲突 不能忽视，比如模块中的全局变量，事件，通用样式 很可能造成问题。</p><p>这种问题通常需要”沙箱化”来解决，而微前端提供了很好的实践。</p><p>“沙箱化”还能提供应用的容错性，当一个子模块出现错误时，不会影响到全局应用，真正做到弹性应用。</p></li><li><p>技术栈灵活的应用</p><p>使用微前端在系统级层面进行模块地抽象组合，磨平了不同技术栈带来的差异,做到模块之间技术栈的隔离。</p><p>在同一应用下 每个团队可以根据自身需求，选择最合适自己的技术栈。</p></li><li><p>需要敏捷化开发的应用</p><p>因为微服务提供了 模块级的组件化架构，完全可以做到多个模块之间并行开发，独立部署，无论模块的需求如何增长，都不会影响到全局应用。</p><p>并且天然的增量构建，有利于持续部署。在团队协作开发层面也是一种很好的实践。</p></li><li><p>无法可持续迭代的应用</p><p>这种应用一般都是巨石型应用，存在的问题很明显: 随着业务需求的迭代，代码量级越来越大，开发效率越来越低，新业务的接入成本随之变高。</p><p>这种场景只能从技术维度来进行切入,需将巨石应用划分模块来处理臃肿。</p></li></ol><h4 id="不适合场景"><a href="#不适合场景" class="headerlink" title="不适合场景"></a>不适合场景</h4><ol><li>应用之间存在很强的业务依赖 或者 拆分的粒度很难掌握，如果强行使用微前端规范，很可能起到相反的作用。</li><li>小型应用，没必要过度设计。</li><li>对性能有要求的应用，微前端因为多加了一层抽象，如果不是从工程化进行模块组合的话，极有可能为页面增加很多无意义的网络请求,内存消耗，影响最终的用户体验。</li><li>基础设施较弱的应用。</li></ol><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>下篇文章将讲述微前端的实践原理，敬请关注。</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      前端架构发展史，从一片荒芜到微前端。
    
    </summary>
    
    
      <category term="前端" scheme="https://tomotoes.com/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="随笔" scheme="https://tomotoes.com/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="前端" scheme="https://tomotoes.com/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://tomotoes.com/blog/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>思考的价值</title>
    <link href="https://tomotoes.com/blog/thinking/"/>
    <id>https://tomotoes.com/blog/thinking/</id>
    <published>2021-01-16T06:43:29.000Z</published>
    <updated>2021-10-05T10:24:13.178Z</updated>
    
    <content type="html"><![CDATA[<p>论如何科学地提升自己。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在互联网时代，知识从未像如此一般廉价，但是再好的知识若是没有产生价值，那也只不过是一种信息噪音罢了。</p><p>在我看来，只要能让人产生思考的文字、图片、媒体资源 就是有价值的，有分享价值的。</p><p>所以，我创建了一个<code>思考的价值</code>微信群，立志于分享高质量信息 以及 与志同道合的同学 交流各种观点、产生思考，从而达到沉淀自己、提升自己。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>由于使用微信群的方式，很多时候 有价值的信息都会被时间掩埋，并且当卸载微信或者换手机时，聊天记录也会丢失。</p><p>基于这些痛点，我创建了个站点：<a href="https://thinking.tomotoes.com/" target="_blank" rel="external nofollow noopener noreferrer">https://thinking.tomotoes.com/</a></p><p>站点里的内容 皆来自于 思考的价值 微信群，它记录了 自从建群以来 每天有价值的信息。</p><p>站点导航:</p><ul><li><p><a href="https://thinking.tomotoes.com/tags" target="_blank" rel="external nofollow noopener noreferrer">具体的分享领域</a></p></li><li><p><a href="https://thinking.tomotoes.com/tags/talk" target="_blank" rel="external nofollow noopener noreferrer">讨论过的事物</a></p></li><li><p><a href="https://thinking.tomotoes.com/archives/2020/12/25-31" target="_blank" rel="external nofollow noopener noreferrer">某一周分享的汇总</a></p></li></ul><p>如果你对输出的内容很感兴趣，随时欢迎加群一起交流。</p><p>目前<code>思考的价值</code>里面的群友不多，但都是想提升自己 有明确方向的同学。</p><p>最近我变成了打工人，所以 群里信息分享的密度不会如之前那么大。</p><h3 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h3><p>在加群之前请先仔细阅读以下条目：</p><ol><li><p>如果你觉得不舒服或者因为其他原因，可以随时退群。</p><p>在我看来 这是双向选择的事情，我完全理解。</p></li><li><p>群里的信息 大部分都是以 我的视角来分享的，存在的问题很明显：</p><p>信息不会照顾到每一个同学。所以 当你碰到好玩或者有价值的信息时，可以随时分享。</p><p>信息是不应该有限制的，而成长也是不应该给自己树立边界的。</p></li><li><p>关于闲聊 只要不涉及到国家时政以及违法法律、性低俗的主题，都可以随时在群里发起一个 Thread 来讨论。</p></li><li><p>此群可以当作一个信息流来看待，你可以选择不分享，做一个潜水运动员。</p></li><li><p>如果你有不同的观点，或者分享一些感触很深的信息时 请不要有心理负担，不要在乎没人回复。</p></li><li><p><a href="https://thinking.tomotoes.com/" target="_blank" rel="external nofollow noopener noreferrer">思考的价值站点</a>的 <a href="https://thinking.tomotoes.com/tags/talk" target="_blank" rel="external nofollow noopener noreferrer">Talk</a> 页面，会记录群里一些有价值的讨论。但请放心 所有人都是以字母代称出现，不会涉及任何人的隐私、微信昵称。</p></li><li><p>如果你对分享的内容完全不感兴趣 或者 不想提升自己，只是想找个地方闲聊一些低级趣味的主题，此群不适合你也不欢迎你。</p></li></ol><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>如果你也想加群学习交流，欢迎添加我的微信：<code>simonaking</code> 或者扫描下方的二维码。</p><p>并且如果认识 有相同意向的同学, 可以随时拉她/他进群 :)</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/3-min.gif" alt="wechat" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/thinking/wechat.jpg"> </div> <div class="image-caption">wechat</div> </figure><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      思考的价值， 是一个微信群，分享高质量信息、技术交流
    
    </summary>
    
    
      <category term="随笔" scheme="https://tomotoes.com/blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://tomotoes.com/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="成长" scheme="https://tomotoes.com/blog/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>React 的 7 种代码异味[译]</title>
    <link href="https://tomotoes.com/blog/7-code-smells-in-react-components/"/>
    <id>https://tomotoes.com/blog/7-code-smells-in-react-components/</id>
    <published>2020-11-15T02:57:51.000Z</published>
    <updated>2021-10-05T10:24:13.154Z</updated>
    
    <content type="html"><![CDATA[<p>教你如何更好地写 React。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原文链接：<a href="https://dev.to/awnton/7-code-smells-in-react-components-5f66" target="_blank" rel="external nofollow noopener noreferrer">7 code smells in your React components</a></p><p>作者信息：<a href="https://twitter.com/Awnton" target="_blank" rel="external nofollow noopener noreferrer">Anton Gunnarsson</a></p><p>翻译许可：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/3-min.gif" alt="Agree" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/7-code-smells-in-react-components/Agree.png"> </div> <div class="image-caption">Agree</div> </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>自从使用 <code>React</code> 后，我见过越来越多可值得优化的点，比如：</p><ul><li>大量的 <code>props</code></li><li><code>props</code> 的不兼容性</li><li><code>props</code> 复制为 <code>state</code></li><li>返回 <code>JSX</code> 的函数</li><li><code>state</code> 的多个状态</li><li><code>useState</code> 过多</li><li>复杂的 <code>useEffect</code></li></ul><p>在本文中，我想分享几个技巧，这些技巧将改善你的 React 代码。</p><h3 id="大量的-props"><a href="#大量的-props" class="headerlink" title="大量的 props"></a>大量的 props</h3><p>如果需要把大量的 <code>props</code> 传递到一个组件中，那么很有可能 该组件可再进一步拆分。 </p><p>问题来了，“大量” 具体是多少呢？答案是 看情况。</p><p>假设你正在开发 一个包含 20 个或更多 <code>props</code> 的组件时，你想再添加一些 <code>props</code> 完善其他功能，这时有两点可以参考 是否应拆分组件：</p><p><strong>该组件是否做了多件事？</strong></p><p>像函数一样，一个组件应该只做好一件事，所以考虑下 将组件拆分成多个小组件是否会更好。</p><p>例如，该组件存在 <a href=""><code>props</code> 的不兼容性</a> 或 <a href="">返回 <code>JSX</code> 的函数</a>。</p><p><strong>该组件是否可被合成</strong>？</p><p>开发中，组合是一种很好的模式但经常被忽视。</p><p>如果你的组件中存在将不相干逻辑塞到一起的情况，是时候考虑使用组合了。</p><p>假设我们有一个表单组件来处理某组织的用户信息:</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ApplicationForm</span><br><span class="line">  user={userData}</span><br><span class="line">  organization={organizationData}</span><br><span class="line">  categories={categoriesData}</span><br><span class="line">  locations={locationsData}</span><br><span class="line">  onSubmit={handleSubmit}</span><br><span class="line">  onCancel={handleCancel}</span><br><span class="line">  ...</span><br><span class="line">/&gt;</span><br></pre></td></tr></tbody></table></figure><p>通过该组件的 <code>props</code> ，我们可看到它们都与组件提供的功能密切相关。</p><p>该组件看起来并无大碍，但如果将其中的一些 <code>props</code> 分担到子组件，那么数据流就会更清晰。</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ApplicationForm onSubmit={handleSubmit} onCancel={handleCancel}&gt;</span><br><span class="line">  &lt;ApplicationUserForm user={userData} /&gt;</span><br><span class="line">  &lt;ApplicationOrganizationForm organization={organizationData} /&gt;</span><br><span class="line">  &lt;ApplicationCategoryForm categories={categoriesData} /&gt;</span><br><span class="line">  &lt;ApplicationLocationsForm locations={locationsData} /&gt;</span><br><span class="line">&lt;<span class="regexp">/ApplicationForm&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在，我们已经看到该表单组件只处理提交和取消动作，其他范围内的事情，都交给了对应的子组件。</p><p><strong>是否传递了很多有关配置的 <code>props</code></strong></p><p>在某些情况下，将多个有关配置的 <code>props</code> 组合成一个 <code>options</code> 是个不错的实践。</p><p>假设我们有一个可显示某种表格的组件：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Grid</span><br><span class="line">  data={gridData}</span><br><span class="line">  pagination={<span class="literal">false</span>}</span><br><span class="line">  autoSize={<span class="literal">true</span>}</span><br><span class="line">  enableSort={<span class="literal">true</span>}</span><br><span class="line">  sortOrder=<span class="string">"desc"</span></span><br><span class="line">  disableSelection={<span class="literal">true</span>}</span><br><span class="line">  infiniteScroll={<span class="literal">true</span>}</span><br><span class="line">  ...</span><br><span class="line">/&gt;</span><br></pre></td></tr></tbody></table></figure><p>我们可以很清楚地看出，该组件除了 <code>data</code> 外其余的 <code>props</code> 都是与配置有关的。</p><p>如果将多个配置 <code>props</code> 合成为一个 <code>options</code> ，就可更好地控制组件的选项，规范性也得到提升。</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = {</span><br><span class="line">  pagination: <span class="literal">false</span>,</span><br><span class="line">  autoSize: <span class="literal">true</span>,</span><br><span class="line">  enableSort: <span class="literal">true</span>,</span><br><span class="line">  sortOrder: <span class="string">'desc'</span>,</span><br><span class="line">  disableSelection: <span class="literal">true</span>,</span><br><span class="line">  infiniteScroll: <span class="literal">true</span>,</span><br><span class="line">  ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;Grid</span><br><span class="line">  data={gridData}</span><br><span class="line">  options={options}</span><br><span class="line">/&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="props-的不兼容性"><a href="#props-的不兼容性" class="headerlink" title="props 的不兼容性"></a>props 的不兼容性</h3><p>避免组件之间传递不兼容的 <code>props</code>。</p><p>假设你的组件库中有一个 <code>&lt;Input /&gt;</code> 组件，而该组件开始时仅用于处理文本，但过了一段时间后，你将它用于电话号码处理。</p><p>你的实现可能如下：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Input</span>(<span class="params">{ value, isPhoneNumberInput, autoCapitalize }</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (autoCapitalize) capitalize(value)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">{value}</span> <span class="attr">type</span>=<span class="string">{isPhoneNumberInput</span> ? '<span class="attr">tel</span>' <span class="attr">:</span> '<span class="attr">text</span>'} /&gt;</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>问题在于，<code>isPhoneNumberInput</code> 与 <code>autoCapitalize</code> 之间并不存在关联，将一个手机号首字母大写是没有任何意义的。</p><p>在这种情况下，我们可以将其分割成多个小组件，来明确具体的职责，如果有共享逻辑，可以将其放到 <code>hooks</code> 中。</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextInput</span>(<span class="params">{ value, autoCapitalize }</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (autoCapitalize) capitalize(value)</span><br><span class="line">  useSharedInputLogic()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">{value}</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PhoneNumberInput</span>(<span class="params">{ value }</span>) </span>{</span><br><span class="line">  useSharedInputLogic()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">{value}</span> <span class="attr">type</span>=<span class="string">"tel"</span> /&gt;</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>虽然上面例子有点勉强，可当发现组件的<code>props</code>存在不兼容性时，是时候考虑拆分组件了。</p><h3 id="props-复制为-state"><a href="#props-复制为-state" class="headerlink" title="props 复制为 state"></a>props 复制为 state</h3><p>如何更好地将 <code>props</code> 作为 <code>state</code> 的初始值。</p><p>有如下组件：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">{ text }</span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> [buttonText] = useState(text)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>{buttonText}<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>该组件将 <code>text</code> 作为 <code>useState</code> 的初始值，可能会导致意想不到的行为。</p><p>实际上该组件已经关掉了 <code>props</code> 的更新通知，如果 <code>text</code> 在上层被更新，它将仍呈现 接受到 <code>text</code> 的第一次值，这更容易使组件出错。</p><p>一个更实际场景是，我们想基于 <code>props</code> 通过大量计算来得到新的 <code>state</code>。</p><p>在下面的例子中，<code>slowlyFormatText</code> 函数用于格式化 <code>text</code>，注意 需要很长时间才能完成。</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">{ text }</span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> [formattedText] = useState(<span class="function"><span class="params">()</span> =&gt;</span> slowlyFormatText(text))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>{formattedText}<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解决此问题 最好的方案是 使用 <code>useMemo</code> 代替 <code>useState</code>。</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">{ text }</span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> formattedText = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> slowlyFormatText(text), [text])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>{formattedText}<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在 <code>slowFormatFormat</code> 仅在 <code>text</code> 更改时运行，并且没有阻断 上层组件更新。</p><p>进一步阅读：<a href="https://overreacted.io/writing-resilient-components/" target="_blank" rel="external nofollow noopener noreferrer">Writing resilient components by Dan Abramov</a>。</p><h3 id="返回-JSX-的函数"><a href="#返回-JSX-的函数" class="headerlink" title="返回 JSX 的函数"></a>返回 JSX 的函数</h3><p>不要从组件内部的函数中返回 <code>JSX</code>。 </p><p>这种模式虽然很少出现，但我还是时不时碰到。</p><p>仅举一个例子来说明:</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> topSection = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;Component header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>header&gt;</span><br><span class="line">    )</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> middleSection = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;p&gt;Some text&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/m</span>ain&gt;</span><br><span class="line">    )</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> bottomSection = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;footer&gt;</span><br><span class="line">        &lt;p&gt;Some footer text&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>footer&gt;</span><br><span class="line">    )</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      {topSection()}</span><br><span class="line">      {middleSection()}</span><br><span class="line">      {bottomSection()}</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">}</span></span><br></pre></td></tr></tbody></table></figure><p>该例子虽然看起来没什么问题，但其实这会破坏代码的整体性，使维护变得困难。</p><p>要么把函数返回的 <code>JSX</code> 直接内联到组件内，要么将其拆分成一个组件。</p><p>有一点需要注意，如果你创建了一个新组件，不必将其移动到新文件中的。</p><p>如果多个组件紧密耦合，将它们保存在同一个文件中是有意义的。</p><h3 id="state-的多个状态"><a href="#state-的多个状态" class="headerlink" title="state 的多个状态"></a>state 的多个状态</h3><p>避免使用多个布尔值来表示组件状态。 </p><p>当编写一个组件并多次迭代后，很容易出现这样一种情况，即内部有多个布尔值来表示 该组件处于哪种状态。</p><p>比如下面的例子：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setIsLoading] = useState(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> [isFinished, setIsFinished] = useState(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> [hasError, setHasError] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fetchSomething = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    setIsLoading(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    fetch(url)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        setIsLoading(<span class="literal">false</span>)</span><br><span class="line">        setIsFinished(<span class="literal">true</span>)</span><br><span class="line">      })</span><br><span class="line">      .catch(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        setHasError(<span class="literal">true</span>)</span><br><span class="line">      })</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Loader</span> /&gt;</span></span></span><br><span class="line">  <span class="keyword">if</span> (hasError) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Error</span> /&gt;</span></span></span><br><span class="line">  <span class="keyword">if</span> (isFinished) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Success</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{fetchSomething}</span> /&gt;</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当按钮被点击时，我们将 <code>isLoading</code> 设置为 <code>true</code>，并通过 <code>fetch</code> 执行网络请求。</p><p>如果请求成功，我们将 <code>isLoading</code> 设置为 <code>false</code>，<code>isFinished</code> 设置为 <code>true</code>，如果有错误，将 <code>hasError</code> 设置为 <code>true</code>。 </p><p>虽然这在技术上是可行的，但很难推断出组件处于什么状态，而且不容易维护。</p><p>并且有可能最终处于“不可能的状态”，比如我们不小心同时将 <code>isLoading</code> 和 <code>isFinished</code> 设置为 <code>true</code>。 </p><p>解决此问题一劳永逸的方案是 使用枚举来管理状态。</p><p>在其他语言中，枚举是一种定义变量的方式，该变量只允许设置为预定义的常量值集合，虽然在<code>JavaScript</code> 中不存在枚举，但我们可以使用字符串作为枚举：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState(<span class="string">'idle'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fetchSomething = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    setState(<span class="string">'loading'</span>)</span><br><span class="line"></span><br><span class="line">    fetch(url)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        setState(<span class="string">'finished'</span>)</span><br><span class="line">      })</span><br><span class="line">      .catch(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        setState(<span class="string">'error'</span>)</span><br><span class="line">      })</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state === <span class="string">'loading'</span>) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Loader</span> /&gt;</span></span></span><br><span class="line">  <span class="keyword">if</span> (state === <span class="string">'error'</span>) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Error</span> /&gt;</span></span></span><br><span class="line">  <span class="keyword">if</span> (state === <span class="string">'finished'</span>) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Success</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{fetchSomething}</span> /&gt;</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过这种方式，完全杜绝了出现 不可能状态的情况，并更利用扩展。 </p><p>如果你使用 <code>TypeScript</code> 开发的话，则可以从定义时就实现枚举：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = useState&lt;<span class="string">'idle'</span> | <span class="string">'loading'</span> | <span class="string">'error'</span> | <span class="string">'finished'</span>&gt;(<span class="string">'idle'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="useState-过多"><a href="#useState-过多" class="headerlink" title="useState 过多"></a>useState 过多</h3><p>避免在同一个组件中使用太多的 <code>useState</code>。</p><p>一个包含许多 <code>useState</code> 的组件可能会做多件事情，可以考虑是否要拆分它。</p><p>当然也存在一些复杂的场景，我们需要在组件中管理一些复杂的状态。 </p><p>下面是自动输入组件的例子：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AutocompleteInput</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> [isOpen, setIsOpen] = useState(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = useState(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">const</span> [items, setItems] = useState([])</span><br><span class="line">  <span class="keyword">const</span> [selectedItem, setSelectedItem] = useState(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> [activeIndex, setActiveIndex] = useState(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reset = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    setIsOpen(<span class="literal">false</span>)</span><br><span class="line">    setInputValue(<span class="string">''</span>)</span><br><span class="line">    setItems([])</span><br><span class="line">    setSelectedItem(<span class="literal">null</span>)</span><br><span class="line">    setActiveIndex(<span class="number">-1</span>)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selectItem = <span class="function">(<span class="params">item</span>) =&gt;</span> {</span><br><span class="line">    setIsOpen(<span class="literal">false</span>)</span><br><span class="line">    setInputValue(item.name)</span><br><span class="line">    setSelectedItem(item)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们有一个 <code>reset</code> 函数，可以重置所有状态，还有一个 <code>selectItem</code> 函数，可更新一些状态。</p><p>这些函数都离不开 <code>useState</code> 定义的状态。如果功能继续迭代，那么函数就会越来越多，状态也会随之增加，数据流就会变得模糊不清。</p><p>在这种情况下，使用 <code>useReducer</code> 来代替 过多的 <code>useState</code> 是一个不错的选择。</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = {</span><br><span class="line">  isOpen: <span class="literal">false</span>,</span><br><span class="line">  inputValue: <span class="string">""</span>,</span><br><span class="line">  items: [],</span><br><span class="line">  selectedItem: <span class="literal">null</span>,</span><br><span class="line">  activeIndex: <span class="number">-1</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>{</span><br><span class="line">  <span class="keyword">switch</span> (action.type) {</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"reset"</span>:</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">        ...initialState</span><br><span class="line">      }</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"selectItem"</span>:</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">        ...state,</span><br><span class="line">        isOpen: <span class="literal">false</span>,</span><br><span class="line">        inputValue: action.payload.name,</span><br><span class="line">        selectedItem: action.payload</span><br><span class="line">      }</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>()</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AutocompleteInput</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reset = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    dispatch({ <span class="attr">type</span>: <span class="string">'reset'</span> })</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selectItem = <span class="function">(<span class="params">item</span>) =&gt;</span> {</span><br><span class="line">    dispatch({ <span class="attr">type</span>: <span class="string">'selectItem'</span>, <span class="attr">payload</span>: item })</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过使用 <code>reducer</code>，我们封装了管理状态的逻辑，并将复杂的逻辑移出了组件，这使得组件更容易维护。</p><p>进一步阅读：<a href="https://kentcdodds.com/blog/the-state-reducer-pattern-with-react-hooks" target="_blank" rel="external nofollow noopener noreferrer">state reducer pattern by Kent C. Dodds</a>。</p><h3 id="复杂的-useEffect"><a href="#复杂的-useEffect" class="headerlink" title="复杂的 useEffect"></a>复杂的 useEffect</h3><p>避免在 <code>useEffect</code> 中做太多事情，它们使代码易于出错，并且难以推理。</p><p>下面的例子中 犯了一个很大的错误：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Post</span>(<span class="params">{ id, unlisted }</span>) </span>{</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    fetch(<span class="string">`/posts/<span class="subst">${id}</span>`</span>).then(<span class="comment">/* do something */</span>)</span><br><span class="line"></span><br><span class="line">    setVisibility(unlisted)</span><br><span class="line">  }, [id, unlisted])</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当 <code>unlisted</code> 改变时，即使 <code>id</code> 没有变，也会调用 <code>fetch</code>。</p><p>正确的写法应该是 将多个依赖分离：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Post</span>(<span class="params">{ id, unlisted }</span>) </span>{</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> { <span class="comment">// when id changes fetch the post</span></span><br><span class="line">    fetch(<span class="string">`/posts/<span class="subst">${id}</span>`</span>).then(<span class="comment">/* ... */</span>)</span><br><span class="line">  }, [id])</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> { <span class="comment">// when unlisted changes update visibility</span></span><br><span class="line">    setVisibility(unlisted)</span><br><span class="line">  }, [unlisted])</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>以上就是我分享的全部。请记住，这些绝不是规则，而是表明某些东西可能是“错误的”。</p><p>如果你也发现了其他的问题模式，欢迎发表评论，或者在 <a href="https://twitter.com/awnton" target="_blank" rel="external nofollow noopener noreferrer">Twitter</a> 上联系我。</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      React的7种代码异味, 教你如何更好地写React
    
    </summary>
    
    
      <category term="前端" scheme="https://tomotoes.com/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="译文" scheme="https://tomotoes.com/blog/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="前端" scheme="https://tomotoes.com/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="https://tomotoes.com/blog/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>拯救者 Y9KK 换机指南</title>
    <link href="https://tomotoes.com/blog/Y9KK/"/>
    <id>https://tomotoes.com/blog/Y9KK/</id>
    <published>2020-05-27T05:18:58.000Z</published>
    <updated>2021-10-05T10:24:13.182Z</updated>
    
    <content type="html"><![CDATA[<p>AMD！YES！R7K！NO！Y9KK! YES!<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的第一个笔记本也是我现在 正在使用的笔记本，是 16 年花了五千大洋购入的<a href="http://detail.zol.com.cn/399/398765/param.shtml" target="_blank" rel="external nofollow noopener noreferrer">华硕的暗影战神</a>。</p><p>当时很年轻没有做功课，只是想买台笔电打打<code>DNF</code>，写写代码这样。</p><p>在逛了秦皇岛的几条街后，感觉笔记本都差不多，也不知道什么配置，就草草下单了。</p><p>现在看来，这台笔电在当时就是个坑：</p><ul><li>4G 内存，DDR3</li><li>1T 机械硬盘</li><li>intel 4 代 双核标压</li><li>N 卡 980，2G 显存</li><li>5200 毫安的电池</li><li>2.7kg 的重量</li></ul><p>买完之后，打两局<code>LOL</code>就烫手，打开个<code>Chrome</code>内存基本就没了…</p><p>幸好后来在大学这两年，我相继买入了内存条+固态，才勉强维持得了生活。</p><p><br></p><p>前不久因为找到了实习工作，所以多年一直蠢蠢欲动 换电脑的想法 也随之强烈起来。</p><p>我是非常想换<code>Macbook Pro</code>的，可惜那两万多的价钱对学生党太不友好了。</p><p>所以想了想还是先买台<code>Windows</code>笔电过渡，<code>MBP</code>等以后再说。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="笔电选择"><a href="#笔电选择" class="headerlink" title="笔电选择"></a>笔电选择</h3><p>经过数个小时的挑选，我最后锁定了如下的五款笔电：</p><ol><li><p><a href="https://item.jd.com/100009083138.html#crumb-wrap" target="_blank" rel="external nofollow noopener noreferrer">联想 Y9000X</a></p><p>一款走极客风格的笔电，我当时看到它的时候就差点下单了。</p><p>后续想了想，就算自己没有游戏需求，<code>GPU</code>也同样很重要的。</p><p>在计算机方面，除了深度学习方面的框架，我也曾看到过不少使用<code>GPU</code>作为加速计算的项目。</p><p>另外 9K 的价格换了一块 4K 屏，总感觉怪怪的，笔记本真的需要 4K 屏吗？</p></li><li><p><a href="https://item.jd.com/100011773090.html" target="_blank" rel="external nofollow noopener noreferrer">联想小新 Pro（15.6）</a></p><p>性价比很强！但是 CPU 是 intel 低压，主频只有 1.1 赫兹。</p><p>并且只有 13.1 寸屏才提供 16：10、2k 屏的特性，有点遗憾。</p></li><li><p><a href="https://item.jd.com/67501639649.html" target="_blank" rel="external nofollow noopener noreferrer">联想 R7000</a>(已购)</p></li><li><p><a href="https://item.jd.com/65500178036.html" target="_blank" rel="external nofollow noopener noreferrer">暗影骑士氢</a></p><p>性价比也很高，但是比起 R7000 来说，CPU 不但打不过，价钱还高了近 1000。</p></li><li><p><a href="https://item.jd.com/100012177990.html" target="_blank" rel="external nofollow noopener noreferrer">机械革命</a></p><p>17.3 寸 144hz 高色域大屏 + 自带机械键盘 确实很吸引人，但感觉花大价钱买个“纯”游戏本，总觉得有点浪费。</p></li></ol><p>由经过了数轮筛选 + 参数对比，结合着自己当下的需求，我最终选择了<a href="https://item.jd.com/67501639649.html" target="_blank" rel="external nofollow noopener noreferrer">联想 R7000</a>。</p><p>理由很简单：在 5.5k 这个价位，R7000 无疑是性价比最高的，并且配置上 AMD 4800H （8 核 12 线程）的 CPU，可以说吊打一切，关于这点 我查了很多外网上面的权威网站，可以说目前移动端 AMD 4800H 没有敌手。</p><p>除了强大的 CPU 心脏，它的内存也是一大亮点：16G-3200MHZ，市面上都很少见速度这么高的内存，而众所周知 计算机的瓶颈就在于 IO，这让我很喜欢。</p><p>如果要说不足之处，最显而易见的就是显卡了。</p><p>R7000 搭载了 1650 显卡，60hz 高色域屏，这个显卡有点拉，但是我平时就打打守望，1650 显卡也足够我用了。</p><p>另外，因为是游戏本的缘故，R7000 净重达到了 2kg 以上，呃，练武之人标配。</p><p>电池方面 也中规中矩，60Wh 不过可以自己手动换电池。</p><p>当然了，R7000 在本身提供了 512SSD 的同时，也留出了添加固态/机械硬盘的地方。</p><p>其余最大的坑就是抽奖机制了，以下硬件均为混搭：</p><ol><li>内存*2<ul><li>三星</li><li>海力士</li><li>西部数码</li></ul></li><li>屏幕<ul><li>京东方</li><li>龙腾</li></ul></li></ol><p>因为硬件混搭，网上有很多“一等奖”、“二等奖”的说法，但如果验机没有大问题的话，其实不必在意硬件的差别。</p><h3 id="如何验机"><a href="#如何验机" class="headerlink" title="如何验机"></a>如何验机</h3><h4 id="硬件篇"><a href="#硬件篇" class="headerlink" title="硬件篇"></a>硬件篇</h4><p><strong>开机前</strong></p><ol><li>查看是否出现 包装损坏严重或机器已经被拆封。</li><li>检查外观是否出现划痕、指纹、掉漆。</li><li>液晶屏是否有划伤、磨损、指纹。</li><li>检查摄像头的物理拨片。</li><li>检查键盘是否出现问题。</li><li>检查触摸板按压是否出现问题。</li><li>D 面底脚是否有磨损。</li><li>配件是否齐全。</li><li>轻轻摇晃笔记本电脑，听是否有异响。</li><li>查看螺丝是否有拆卸的痕迹。</li></ol><p><strong>开机后</strong></p><ol><li><p>检查（联保凭证、说明书）的序列号是否与机身序列号、（BIOS 中的序列号 (<a href="https://www.aida64.com/downloads" target="_blank" rel="external nofollow noopener noreferrer">AIDA64</a> -&gt; 计算机 -&gt; 系统概述 -&gt; DMI -&gt; 主板序列号)、Windows 系统 -&gt; 关于 -&gt; 序列号。相同。</p></li><li><p>查看在不通电源的情况，是否能开机，如果开机成功，那就意味着买到了二手货。</p></li><li><p>在黑暗情况下，反复开机，检查屏幕是否漏光，如不严重就算正常。</p></li><li><p>使用软件或纯色图检查屏幕坏点。</p><p>一般来说，有 1-3 个坏点算正常，太多了就不正常了。</p></li><li><p>摄像头是否正常。</p></li><li><p>是否可以正常播放声音 仔细听是否有杂音、破音等异响。。</p></li></ol><h4 id="软件篇"><a href="#软件篇" class="headerlink" title="软件篇"></a>软件篇</h4><p>先不联网，不激活系统，不激活 Office，用默认管理员开机，不然就无法享受七天无理由退货了。</p><ol><li>进入 BIOS 查看信息是否一致。</li><li>查看接口是否正常。</li><li>系统硬件管理器各部件驱动是否正常，是否有未识别硬件。</li><li><strong>卡硬工具箱 的各种工具。</strong></li><li><strong>图吧工具箱 的各种工具。</strong></li></ol><p>其实<code>4</code>,<code>5</code>点是重点，它们几乎整合了市面上所有知名的测评软件，非常推荐。</p><h3 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h3><h4 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h4><p>如果 windows 2004 专业版在买完之后已经推送，那么我很乐意做第一个吃螃蟹的人。</p><p>否则 就安装 windows 1909 专业版。</p><p>后续：现已推送 2004。</p><h4 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h4><ol><li>C 盘 400G (系统/软件)</li><li>D 盘 112G (文档/冷数据)</li></ol><p>我现在这台使用了近 4 年的笔电，实际花费存储空间也就不到<code>256G</code>。</p><p>所以说，<code>512G</code> 够我用一段时间了。</p><h4 id="细节设置"><a href="#细节设置" class="headerlink" title="细节设置"></a>细节设置</h4><ol><li>色彩校正</li><li>输入法改为双拼</li><li>先过一遍 windows 设置</li><li>使用 Dism++ 更深入地修改系统功能</li><li>管理员权限</li><li>开机免输入密码</li><li>电源管理合上盖子操作</li><li>高性能模式设置</li><li>桌面，开始页面图标设置</li><li>关闭 Windows Defender</li><li>Bios 更新</li><li>驱动更新</li><li>暂时就想到这么多，先跳过。</li></ol><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>我估计这是本篇文章中最花费时间的章节，因为我本身就是一个收集癖，还喜欢折腾各种效率的软件，这几年积累了不少，所以说，以下都是我的藏家宝。</p><ol><li><p>Chrome</p><p>书签，设置都会同步，而插件方面，大部分单机插件都会自动同步下载，其中一些需要配置文件的插件需要手动同步，比如: stylus,crxMouse,vimium 等。    </p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/4-min.gif" alt="plugin" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/Y9KK/plugins.png"> </div> <div class="image-caption">plugin</div> </figure><p></p><p>呃，这就是我 chrome 上的所有插件，还挺多吧。</p></li><li><p>网易云音乐，平时就听个响。</p></li><li><p>阿里邮箱</p></li><li><p>Telegram</p></li><li><p>Typora，所见即所得的 markdown 编辑器</p></li><li><p>Xmind8 脑图软件，有时会用到</p></li><li><p>微软 TODO，一款强大的跨平台 TODO 软件，用了很多年了</p></li><li><p>Postman 接口调试软件</p></li><li><p>Everything 搜索软件，强大得不用解释</p></li><li><p>Wallpaper Engine 第一人称射击游戏，懂得都懂…</p></li><li><p>SpaceSniffer 可视化查看硬盘空间分布的软件</p></li><li><p>Scrcpy/ScrcpyGui 自己写的控制手机的软件</p></li><li><p>火绒 - 杀毒软件</p></li><li><p>卡硬工具箱</p></li><li><p>图吧工具箱</p></li><li><p>EarTrumpet 强化版声音管理软件，可单独设置某软件的声音</p></li><li><p>OBS Studio 知名推流软件, 我用来录屏</p></li><li><p>WGesture 超级厉害的手势软件，可谓是一大效率神器</p></li><li><p>Ditto 历史剪切板</p></li><li><p>Snipaste 截图工具</p></li><li><p>Seer 快速查看文档神器，就好比 Mac 上对文件的空格键</p></li><li><p>TranslucentTB 任务栏透明软件</p></li><li><p>Bandzip 解压缩工具</p></li><li><p>FileMenu Tools 可直接右键复制文件路径</p></li><li><p>QTTabBar 一款强大的标签化资源管理器, 效率神器</p></li><li><p>MacType windows 下字体渲染优化软件</p></li><li><p>PotPlayer windows 下播放视频软件</p></li><li><p>Git 版本控制软件</p></li><li><p>Terminus，一款 Shell 终端的可视化软件，又好看又能打</p></li><li><p>WSL </p></li><li><p>Notepads APP 可替代原生的 windows 记事本</p></li><li><p>*pn 小飞机</p></li><li><p>Stream</p></li><li><p>暴雪游戏平台</p></li><li><p>WeGame</p></li><li><p>FDM 下载文件神器</p></li><li><p>VSCode 轻量级编辑器，可借助<code>Settings Sync</code>插件，来同步配置。</p></li><li><p>xshell / xftp</p></li><li><p>Gradle - better maven</p></li><li><p>字体 - Roboto/FairCode/source-code-pro/JetBrainsMono</p></li></ol><h3 id="到货后续"><a href="#到货后续" class="headerlink" title="到货后续"></a>到货后续</h3><p>京东方是 6.1 日正式开售，所以等到下周才能收到货了。</p><p>呐，先留个坑~</p><hr><p>6.2 日上午到货了，我抽到的配置是双三星 + 龙腾屏，然而我是真没想到屏幕会翻车。</p><p>昨天测试屏幕下来，有不少明显的问题：</p><ul><li>拖影严重，效果不及我的老笔电。</li></ul><p>这是 R7000 与我老笔电的对比图：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/3-min.gif" alt="asus1" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/Y9KK/asus1-min.jpg"> </div> <div class="image-caption">asus1</div> </figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/3-min.gif" alt="legion" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/Y9KK/legion2-min.jpg"> </div> <div class="image-caption">legion</div> </figure><ul><li>漏光严重，四面皆漏光。</li></ul><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/4-min.gif" alt="legion-light" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/Y9KK/light-min.jpg"> </div> <div class="image-caption">legion-light</div> </figure><ul><li><p>屏幕泛黄，不通透，调了一晚上色温，最后头都大了，效果也一般。</p></li><li><p>屏幕仔细看有竖条阴影，横条阴影。</p></li><li><p>屏幕坏点也不少。</p></li></ul><p>说实话，我是真不想退货瞎折腾，可是屏幕是最重要的外设之一，内存固态可以次一点，反正性能早就过剩了，可屏幕真忍不了。</p><p>并且，网上反复换货依旧是龙腾屏的例子也有很多，所以我直接选择退了。</p><p>现在系统已激活，本以为京东方不会同意我退货的申请，结果却同意了。</p><p>如果后续厂家同意退货就退了，不同意的话就换到京东方屏幕为止。</p><p>哎，下次，再也不会买抽奖制的产品了，同样的价钱不同的体验，心累。</p><h3 id="最终选择"><a href="#最终选择" class="headerlink" title="最终选择"></a>最终选择</h3><h4 id="遇见"><a href="#遇见" class="headerlink" title="遇见"></a>遇见</h4><p>又经过长时间的挑选后，我最终再次锁定了拯救者系列中的<code>Y9000K</code>型号，在这期间我几乎摸遍了市面上的所有笔电，它们都有让我不能接受的缺点，我曾一度想做等等党，可是无意间看到了它，拯救者系列中的旗舰机皇-<code>Y9000K</code>。</p><p>我记得第一次见到它 是在一个炎炎夏日的中午，那时的我很燥，感叹到市场上竟没有一款让我心动的笔电。</p><p>当无意间看到它的宣传图时，我扫了一遍，找下让我吐槽的点，咦，这个有点不对劲，再仔细盯了几秒后，卧槽，可以啊。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/4-min.gif" alt="y9000k-poster" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/Y9KK/poster.jpg"> </div> <div class="image-caption">y9000k-poster</div> </figure><p>网上找了所有的翻车信息后，对我来说 都是一些无关痛痒的缺点。</p><p>我突然意识到，我想买的笔电，它来了。</p><p>Y9KK，冲冲冲~</p><h4 id="得到"><a href="#得到" class="headerlink" title="得到"></a>得到</h4><p>由于在当时<code>Y9000K</code>只卖了第一批 Z 码，市面上除了黄牛基本没货。</p><p>要等到官方货源 只能 618 抢购，除此之外 别无他法，所以煎熬的狙击开始了。</p><p>我分别在淘宝，官网，京东都预约好了商品，并订了 8 个闹钟，做好了法事（内心）。</p><p>而在 618 之前官方暴露得知，全国<code>Y9KK</code>丐版只有 600 台，这让我心中一沉，简直是第二个<code>yoga 14s</code>啊，如果抢不到，就只能等到今年下半场的厂商战争了。</p><p>不过万幸的是，我在京东居然抢到了有赠品的丐版！我抢到了！</p><p>当时的场景可以说秒没，到<code>0：00</code>后直接显示没货…</p><p>而我第一次点击时，也直接提示当地没货，第二次点击才得到货单，谢天谢地。</p><p>呃，我今年的欧气全压在这了。</p><h4 id="食用"><a href="#食用" class="headerlink" title="食用"></a>食用</h4><p>到货开机后，第一眼给我的观感是鲜艳，因为<code>Y9KK</code>采用的是广色域屏，让你觉得它的屏幕色彩都能溢出来。</p><p>我也是第一次知道 Windows 的红色警告可以这么红，麦克雷的胡子原来是褐色，一直使用的 Solarized Light 主题原来是这种偏黄色…</p><p>质感方面 因为全机身金属，可以说 B 格与触感同时拉满。</p><p>散热方面 使用的是 VC 液冷，双烤能达到 45w+90w，不算高 但也足够用了。</p><p>接口方面 除了常见的接口，还赠了一个雷电三。</p><p>…</p><p>具体可以去 b 站看一下评测视频，我就不罗嗦了…</p><p>总之，给我的感受是真香，可以称得上愉快的购物体验。</p><h4 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h4><p>在我看来，它的优缺点都很鲜明。</p><p>优点我就不过多介绍了，上面吹得够可以了，主要说下缺点。</p><ol><li><p>性价比一般。</p><p>2020 年 10875H 卖 1w+？怕不是要被 AMD 干死，市面上的 4800H 完全可以与 10875H 一较高下，但价钱却便宜很多。最近 Y7000P 也出了 10875H，价格降到了 8K+…</p></li><li><p>没货，没货，没货。</p></li><li><p>品控一般，群里翻车的真的不少，不过我除了一个屏幕坏点外，什么也没遇到。</p></li></ol><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>如果你也有购买笔电的需求，可以随时与我联系，一起讨论~</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      联想拯救者Y9KK换机指南, 包括笔记本测评, 软件推荐...
    
    </summary>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="换机" scheme="https://tomotoes.com/blog/tags/%E6%8D%A2%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>30s 源码刨析系列之函数篇</title>
    <link href="https://tomotoes.com/blog/30s-javascript-function/"/>
    <id>https://tomotoes.com/blog/30s-javascript-function/</id>
    <published>2020-03-01T03:43:52.000Z</published>
    <updated>2021-10-05T10:24:13.138Z</updated>
    
    <content type="html"><![CDATA[<p>由浅入深、逐个击破 <a href="https://www.30secondsofcode.org/js/t/function/p/1/" target="_blank" rel="external nofollow noopener noreferrer">30SecondsOfCode</a> 中函数系列所有源码片段，带你领略源码之美。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列是对名库 <a href="https://www.30secondsofcode.org/" target="_blank" rel="external nofollow noopener noreferrer">30SecondsOfCode</a> 的深入刨析。</p><p>本篇是其中的函数篇，可以在极短的时间内培养你的函数式思维。</p><p>内容根据源码的难易等级进行排版，目录如下：</p><ol><li>新手级</li><li>普通级</li><li>专家级</li></ol><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="新手级"><a href="#新手级" class="headerlink" title="新手级"></a>新手级</h3><h4 id="checkProp"><a href="#checkProp" class="headerlink" title="checkProp"></a>checkProp</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> checkProp = <span class="function">(<span class="params">predicate, prop</span>) =&gt;</span> <span class="function"><span class="params">obj</span> =&gt;</span> !!predicate(obj[prop]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lengthIs4 = checkProp(<span class="function"><span class="params">l</span> =&gt;</span> l === <span class="number">4</span>, <span class="string">'length'</span>);</span><br><span class="line">lengthIs4([]); <span class="comment">// false</span></span><br><span class="line">lengthIs4([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// true</span></span><br><span class="line">lengthIs4(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])); <span class="comment">// false (Set uses Size, not length)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> session = { <span class="attr">user</span>: {} };</span><br><span class="line"><span class="keyword">const</span> validUserSession = checkProp(<span class="function"><span class="params">u</span> =&gt;</span> u.active &amp;&amp; !u.disabled, <span class="string">'user'</span>);</span><br><span class="line"></span><br><span class="line">validUserSession(session); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">session.user.active = <span class="literal">true</span>;</span><br><span class="line">validUserSession(session); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> noLength = checkProp(<span class="function"><span class="params">l</span> =&gt;</span> l === <span class="literal">undefined</span>, <span class="string">'length'</span>);</span><br><span class="line">noLength([]); <span class="comment">// false</span></span><br><span class="line">noLength({}); <span class="comment">// true</span></span><br><span class="line">noLength(<span class="keyword">new</span> <span class="built_in">Set</span>()); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>作用：检查参数是否存在给定的属性。</p><p>解析：给定一个检查函数，和所需检查的属性名，返回一个函数。可通过调用 返回的函数，去判定 传入的对象参数是否符合检查函数。</p><h4 id="functionName"><a href="#functionName" class="headerlink" title="functionName"></a>functionName</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> functionName = <span class="function"><span class="params">fn</span> =&gt;</span> (<span class="built_in">console</span>.debug(fn.name), fn);</span><br><span class="line"></span><br><span class="line">functionName(<span class="built_in">Math</span>.max); <span class="comment">// max (logged in debug channel of console)</span></span><br></pre></td></tr></tbody></table></figure><p>作用：打印函数名。</p><p>解析：使用<code>console.debug</code>API 和函数的<code>name</code>属性，把 函数类型参数的名字 打印到控制台的 debug channel 中。</p><h4 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> negate = <span class="function"><span class="params">func</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> !func(...args);</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].filter(negate(<span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span> === <span class="number">0</span>)); <span class="comment">// [ 1, 3, 5 ]</span></span><br></pre></td></tr></tbody></table></figure><p>作用：反转 谓词函数（返回类型为布尔的函数）的返回结果。</p><p>解析：假设有一谓词函数为<code>func = args =&gt; bool</code>，我们想要反转其结果，便可对它的调用方式进行进一步的抽象，把反转结果的逻辑放置抽象中。</p><p>在本函数中，只需要一个 逻辑非运算符<code>!func(...args)</code>。</p><p>而扩展运算符<code>...</code>是对参数的抽象，代表的是传入的所有参数，我们要将所有参数一个不差地传递，不可破环 谓词函数的“纯洁性”。</p><h4 id="unary"><a href="#unary" class="headerlink" title="unary"></a>unary</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unary = <span class="function"><span class="params">fn</span> =&gt;</span> <span class="function"><span class="params">val</span> =&gt;</span> fn(val);</span><br><span class="line"></span><br><span class="line">[<span class="string">'6'</span>, <span class="string">'8'</span>, <span class="string">'10'</span>].map(unary(<span class="built_in">parseInt</span>)); <span class="comment">// [6, 8, 10]</span></span><br></pre></td></tr></tbody></table></figure><p>作用：参数函数调用时 只接受 参数函数的第一个参数，忽略其他参数。</p><p>解析：包装一个函数，并不做任何处理：<code>wrap = fn =&gt; (...args) =&gt; fn(...args)</code></p><p>很显然，如果想对传入的参数进行处理，只需对<code>args</code>动刀，而本例直接使用了单独的一个变量，忽略了其他参数。</p><h3 id="普通级"><a href="#普通级" class="headerlink" title="普通级"></a>普通级</h3><h4 id="ary"><a href="#ary" class="headerlink" title="ary"></a>ary</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ary = <span class="function">(<span class="params">fn, n</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> fn(...args.slice(<span class="number">0</span>, n));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstTwoMax = ary(<span class="built_in">Math</span>.max, <span class="number">2</span>);</span><br><span class="line">[[<span class="number">2</span>, <span class="number">6</span>, <span class="string">'a'</span>], [<span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">10</span>]].map(<span class="function"><span class="params">x</span> =&gt;</span> firstTwoMax(...x)); <span class="comment">// [6, 6, 1</span></span><br></pre></td></tr></tbody></table></figure><p>作用：参数函数调用时 只接受 参数函数的前 n 个参数，忽略其他参数。</p><p>解析：和上列逻辑如出一辙，只不过处理参数的逻辑换成了<code>...args.slice(0, n)</code>，只要前 n 个。</p><h4 id="attempt"><a href="#attempt" class="headerlink" title="attempt"></a>attempt</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> attempt = <span class="function">(<span class="params">fn, ...args</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">return</span> fn(...args);</span><br><span class="line">  } <span class="keyword">catch</span> (e) {</span><br><span class="line">    <span class="keyword">return</span> e <span class="keyword">instanceof</span> <span class="built_in">Error</span> ? e : <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elements = attempt(<span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelectorAll(selector);</span><br><span class="line">}, <span class="string">'&gt;_&gt;'</span>);</span><br><span class="line"><span class="keyword">if</span> (elements <span class="keyword">instanceof</span> <span class="built_in">Error</span>) elements = []; <span class="comment">// elements = []</span></span><br></pre></td></tr></tbody></table></figure><p>作用：对 参数函数 进行异常捕获，如果有异常则抛出。</p><p>解析：对 参数函数 进行进一步封装，本例封装的逻辑是<code>try catch</code>，即捕获参数函数的异常。</p><p>很久之前，我看到过一个关于<code>java8</code>的 attempt 片段，里面还增加了重试逻辑。</p><p>js 实现代码如下:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> attempt = <span class="function">(<span class="params">fn, ...args, count, bound</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">return</span> fn(...args);</span><br><span class="line">  } <span class="keyword">catch</span> (e) {</span><br><span class="line">    <span class="keyword">if</span>(count == bound){</span><br><span class="line">      <span class="keyword">return</span> e <span class="keyword">instanceof</span> <span class="built_in">Error</span> ? e : <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> attempt(fn, ...args, count + <span class="number">1</span>, bound)</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bind = <span class="function">(<span class="params">fn, context, ...boundArgs</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> fn.apply(context, [...boundArgs, ...args]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">greeting, punctuation</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> greeting + <span class="string">' '</span> + <span class="keyword">this</span>.user + punctuation;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> freddy = { <span class="attr">user</span>: <span class="string">'fred'</span> };</span><br><span class="line"><span class="keyword">const</span> freddyBound = bind(greet, freddy);</span><br><span class="line"><span class="built_in">console</span>.log(freddyBound(<span class="string">'hi'</span>, <span class="string">'!'</span>)); <span class="comment">// 'hi fred!'</span></span><br></pre></td></tr></tbody></table></figure><p>作用：原生 API-<code>bind</code>的另一种实现。</p><p><code>fn.bind(context,...args)</code> =&gt; <code>bind(fn,context,...args)</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external nofollow noopener noreferrer">MDN 关于 bind 的解释</a>：</p><blockquote><p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p></blockquote><p>解析：首先，使用了<code>apply</code>将给定的 上下文参数 应用于 参数函数。 </p><p>其次，利用 apply 只接受数组作为参数的规定，将最初传入的参数，和后续传入的参数按顺序合并在一个数组中传递进去。</p><h4 id="bindKey"><a href="#bindKey" class="headerlink" title="bindKey"></a>bindKey</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bindKey = <span class="function">(<span class="params">context, fn, ...boundArgs</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span></span><br><span class="line">  context[fn].apply(context, [...boundArgs, ...args]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> freddy = {</span><br><span class="line">  user: <span class="string">'fred'</span>,</span><br><span class="line">  greet: <span class="function"><span class="keyword">function</span>(<span class="params">greeting, punctuation</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> greeting + <span class="string">' '</span> + <span class="keyword">this</span>.user + punctuation;</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">const</span> freddyBound = bindKey(freddy, <span class="string">'greet'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(freddyBound(<span class="string">'hi'</span>, <span class="string">'!'</span>)); <span class="comment">// 'hi fred!'</span></span><br></pre></td></tr></tbody></table></figure><p>作用：把上列中的<code>fn</code>换成了<code>context[fn]</code>。</p><p>解析：我们原来的 参数函数 变成了一个 上下文参数的一个属性，而将这个属性依附于上下文对象就成了一个函数<code>context[fn]</code>。</p><p>可以说，这个一个调用方式特殊的<code>bind</code>。</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> call = <span class="function">(<span class="params">key, ...args</span>) =&gt;</span> <span class="function"><span class="params">context</span> =&gt;</span> context[key](...args);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">  .then(call(<span class="string">'map'</span>, x =&gt; <span class="number">2</span> * x))</span><br><span class="line">  .then(<span class="built_in">console</span>.log); <span class="comment">// [ 2, 4, 6 ]</span></span><br><span class="line"><span class="keyword">const</span> map = call.bind(<span class="literal">null</span>, <span class="string">'map'</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">  .then(map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="number">2</span> * x))</span><br><span class="line">  .then(<span class="built_in">console</span>.log); <span class="comment">// [ 2, 4, 6 ]</span></span><br></pre></td></tr></tbody></table></figure><p>作用：动态改变函数执行的上下文。</p><p>解析：给定一个属性参数，再给定一组调用参数，返回一个接受上下文对象的函数，并最终组合调用。</p><p>其实这里面暗含了一个约束，很显然，<code>context[key]</code>必须是一个函数。</p><p>这个片段本质是对上下文的抽象。举个例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filterMen = call(<span class="string">'filter'</span>, person =&gt; person.sex === <span class="string">'man'</span>)</span><br><span class="line"></span><br><span class="line">filterMen([{<span class="attr">sex</span>:<span class="string">'woman'</span>,...},{<span class="attr">sex</span>:<span class="string">'man'</span>,...},...])</span><br><span class="line"><span class="comment">// 如果有其他 上下文对象，本例中也就是数组 需要相同的 逻辑过滤呢？</span></span><br></pre></td></tr></tbody></table></figure><h4 id="chainAsync"><a href="#chainAsync" class="headerlink" title="chainAsync"></a>chainAsync</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chainAsync = <span class="function"><span class="params">fns</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">let</span> curr = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> last = fns[fns.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> next = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> fn = fns[curr++];</span><br><span class="line">    fn === last ? fn() : fn(next);</span><br><span class="line">  };</span><br><span class="line">  next();</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">chainAsync([</span><br><span class="line">  next =&gt; {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'0 seconds'</span>);</span><br><span class="line">    setTimeout(next, <span class="number">1000</span>);</span><br><span class="line">  },</span><br><span class="line">  next =&gt; {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1 second'</span>);</span><br><span class="line">    setTimeout(next, <span class="number">1000</span>);</span><br><span class="line">  },</span><br><span class="line">  () =&gt; {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2 second'</span>);</span><br><span class="line">  }</span><br><span class="line">]);</span><br></pre></td></tr></tbody></table></figure><p>作用：将 函数数组转换为有决策权的链式函数调用。</p><p>我为什么称之有决策权的链式函数调用呢？</p><p>因为每个函数都会接受一个 next 方法参数，它代表的就是调用链中的下一个函数，所以什么时候调用下一个函数，要不要调用，决策权在你。</p><p>解析：其实这个片段很简单。</p><p>首先，<code>fns</code> 类型一个函数数组，其中除了最后一个函数都有隐含的约束，可以选择接受 next 参数。</p><p>而 next 参数的含义就是调用链中的下一个函数，说白了 就是数组中的下一个成员。</p><p>而最后一个函数是无参函数。</p><p>片段中复杂点在于：利用闭包存储了两个关键变量。</p><p>第一个是 调用链中的函数游标:<code>curr</code>；第二个是结束标志，最后一个函数:<code>last</code>。</p><p>每次链式向下调用前，都会进行一些逻辑处理：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> next = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> fn = fns[curr++];</span><br><span class="line">  fn === last ? fn() : fn(next);</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>先取出当前游标所在函数，再把游标指向下一个函数。</p><p>然后，判断是否是最后一个函数，是则直接调用，结束；反之，传入 next 调用。</p><p>如果，你是一个后端开发者，可以把其理解为中间件的工作模式。</p><h4 id="collectInto"><a href="#collectInto" class="headerlink" title="collectInto"></a>collectInto</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> collectInto = <span class="function"><span class="params">fn</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> fn(args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Pall = collectInto(<span class="built_in">Promise</span>.all.bind(<span class="built_in">Promise</span>));</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, <span class="number">2000</span>, <span class="number">3</span>));</span><br><span class="line">Pall(p1, p2, p3).then(<span class="built_in">console</span>.log); <span class="comment">// [1, 2, 3] (after about 2 seconds)</span></span><br></pre></td></tr></tbody></table></figure><p>作用：将接受数组的函数更改为接受可变参数。</p><p>分析：利用了扩展运算符的性质，<code>...args</code>代表的是所有参数组成的数组，然后将这数组传递进去调用。</p><p>可别小看了这一片段，调用方式的改变会决定很多上层逻辑。</p><p>平常我们大概率都会，建立一个数组，收集所需的异步函数。</p><p>在本例中，很明显的看到 从参数为数组类型的约束 中解放了出来。</p><h4 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...fns</span>) =&gt;</span> fns.reduce(<span class="function">(<span class="params">f, g</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> f(g(...args)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> substract3 = <span class="function"><span class="params">x</span> =&gt;</span> x - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> add5 = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> multiply = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y;</span><br><span class="line"><span class="keyword">const</span> multiplyAndAdd5AndSubstract3 = compose(</span><br><span class="line">  substract3,</span><br><span class="line">  add5,</span><br><span class="line">  multiply</span><br><span class="line">);</span><br><span class="line">multiplyAndAdd5AndSubstract3(<span class="number">5</span>, <span class="number">2</span>); <span class="comment">// 12</span></span><br></pre></td></tr></tbody></table></figure><p>作用：将传入的多个[异步]函数以组合的方式 调用。</p><p>先将参数传入最后一个[异步]函数，然后将得到的结果，传入倒数第二个[异步]函数，以此类推。</p><p><code>compose</code>可以说是函数式编程的经典片段。</p><p>它的具体意义可以说是逻辑分层。像洋葱一样，一层一层地处理数据。</p><p>解析：fns 代表的是 传入的多个函数 组成的数组。</p><p>利用<code>reduce</code>方法实现函数的“洋葱”包裹。</p><p>因为这种逻辑语义表示效果不好，就直接上上面例子的代码流程了。</p><figure class="highlight lasso"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">reduce 第一次循环:</span><br><span class="line">f: substract3; </span><br><span class="line">g: add5; </span><br><span class="line">返回结果：(<span class="params">...</span>args) =&gt; substract3(add5(<span class="params">...</span>args));</span><br><span class="line"></span><br><span class="line">reduce 第二次循环：</span><br><span class="line">f: (<span class="params">...</span>args) =&gt; substract3(add5(<span class="params">...</span>args)); </span><br><span class="line">g: multiply; </span><br><span class="line">返回结果：</span><br><span class="line">(<span class="params">...</span>args1) =&gt; ((<span class="params">...</span>args2) =&gt; substract3(add5(<span class="params">...</span>args2)))(multiply(<span class="params">...</span>args1))</span><br><span class="line">优化后:</span><br><span class="line">(<span class="params">...</span>args) =&gt; substract3(add5(multiply(<span class="params">...</span>args)));</span><br><span class="line">循环下去，以此类推<span class="params">...</span></span><br><span class="line"></span><br><span class="line">最后的返回的形式：</span><br><span class="line">(<span class="params">...</span>args) =&gt; 第一个函数(第二个函数(第三个函数(<span class="params">...</span>最后一个函数(<span class="params">...</span>args))))</span><br></pre></td></tr></tbody></table></figure><p>PS: 说实话，我并不喜欢 compose，在上例中就可以很明显的看到缺点。</p><p>把很多函数组合起来，第一是缺少语义化，与之对应的例子就是 Promise 的 then 调用链，语义鲜明；</p><p>第二是无法添加函数与函数之间的抽象逻辑，只能一次写好。</p><p>第三是各个函数之间存在隐含的参数约束，很可怕的。</p><h4 id="composeRight"><a href="#composeRight" class="headerlink" title="composeRight"></a>composeRight</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> composeRight = <span class="function">(<span class="params">...fns</span>) =&gt;</span> fns.reduce(<span class="function">(<span class="params">f, g</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> g(f(...args)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</span><br><span class="line"><span class="keyword">const</span> substract3 = <span class="function"><span class="params">x</span> =&gt;</span> x - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> addAndSquare = composeRight(add, square,substract3);</span><br><span class="line">addAndSquareAndSubstract3(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 6</span></span><br></pre></td></tr></tbody></table></figure><p>作用：将传入的多个[异步]函数以组合的方式 调用。</p><p>先将参数传入第一个[异步]函数，然后将得到的结果，传入第二个[异步]函数，以此类推。</p><h4 id="converge"><a href="#converge" class="headerlink" title="converge"></a>converge</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> converge = <span class="function">(<span class="params">converger, fns</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> converger(...fns.map(<span class="function"><span class="params">fn</span> =&gt;</span> fn.apply(<span class="literal">null</span>, args)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> average = converge(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a / b, [</span><br><span class="line">  arr =&gt; arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a + v, <span class="number">0</span>),</span><br><span class="line">  arr =&gt; arr.length</span><br><span class="line">]);</span><br><span class="line">average([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]); <span class="comment">// 4</span></span><br></pre></td></tr></tbody></table></figure><p>作用：将 函数数组的返回结果 传递到<code>converger</code>函数，进一步处理，可用作分析统计。</p><p>解析: 使用<code>map</code> 和<code>apply</code>将参数数据传递给每个处理函数，并将处理后的结果交给<code>converger</code>函数。</p><h4 id="curry"><a href="#curry" class="headerlink" title="curry"></a>curry</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function">(<span class="params">fn, arity = fn.length, ...args</span>) =&gt;</span></span><br><span class="line">  arity &lt;= args.length ? fn(...args) : curry.bind(<span class="literal">null</span>, fn, arity, ...args);</span><br><span class="line"></span><br><span class="line">curry(<span class="built_in">Math</span>.pow)(<span class="number">2</span>)(<span class="number">10</span>); <span class="comment">// 1024</span></span><br><span class="line">curry(<span class="built_in">Math</span>.min, <span class="number">3</span>)(<span class="number">10</span>)(<span class="number">50</span>)(<span class="number">2</span>); <span class="comment">// 2</span></span><br></pre></td></tr></tbody></table></figure><p>作用：函数柯里化。</p><p>柯里化不管在是函数式思维的理解，还是现实面试中，都非常的重要。</p><p><a href="https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96" target="_blank" rel="external nofollow noopener noreferrer">维基百科上 柯里化的解释</a>：</p><blockquote><p>把接受多个<a href="https://zh.wikipedia.org/wiki/參數_(程式設計" target="_blank" rel="external nofollow noopener noreferrer">参数</a>)的<a href="https://zh.wikipedia.org/wiki/函数" target="_blank" rel="external nofollow noopener noreferrer">函数</a>变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数</p></blockquote><p>解析：这个<code>bind</code>用得真是神了，借助它积累每次传进来的参数，等到参数足够时，再调用。</p><h4 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, ms = <span class="number">0</span></span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">let</span> timeoutId;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>{</span><br><span class="line">    clearTimeout(timeoutId);</span><br><span class="line">    timeoutId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> fn.apply(<span class="keyword">this</span>, args), ms);</span><br><span class="line">  };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">'resize'</span>,</span><br><span class="line">  debounce(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.innerWidth);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.innerHeight);</span><br><span class="line">  }, <span class="number">250</span>)</span><br><span class="line">); <span class="comment">// Will log the window dimensions at most every 250ms</span></span><br></pre></td></tr></tbody></table></figure><p>作用：函数防抖。</p><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/5" target="_blank" rel="external nofollow noopener noreferrer">什么是防抖和节流？有什么区别？如何实现？</a> 一文中关于防抖解释：</p><blockquote><p>触发高频事件后 n 秒内函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间。</p></blockquote><p>同样，防抖也是面试必考的点。</p><p>解析: 传入需防抖的函数，和防抖的时间间隔，返回一个已防抖化的函数。</p><p>主要借助<code>setTimeout</code>和<code>function + apply</code>保存上下文完成。</p><p>每次调用函数前，都执行一遍<code>clearTimeout</code>，保证重新计算调用时间。</p><p>无论是调用多么频繁的函数都会在指定时间的间隔后只运行一次。</p><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defer = <span class="function">(<span class="params">fn, ...args</span>) =&gt;</span> setTimeout(fn, <span class="number">1</span>, ...args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example A:</span></span><br><span class="line">defer(<span class="built_in">console</span>.log, <span class="string">'a'</span>), <span class="built_in">console</span>.log(<span class="string">'b'</span>); <span class="comment">// logs 'b' then 'a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example B:</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#someElement'</span>).innerHTML = <span class="string">'Hello'</span>;</span><br><span class="line">longRunningFunction(); <span class="comment">// Browser will not update the HTML until this has finished</span></span><br><span class="line">defer(longRunningFunction); <span class="comment">// Browser will update the HTML then run the function</span></span><br></pre></td></tr></tbody></table></figure><p>作用：推迟调用函数，直到清除当前调用堆栈。</p><p>可适用于推迟 cpu 密集型计算，以免阻塞渲染引擎工作。</p><p>分析：使用<code>setTimeout</code>（超时时间为 1ms）将 函数参数 添加到浏览器事件队列末尾。</p><p>因为 JavaScript 是单线程执行，先是主线程执行完毕，然后在读取事件队列中的代码执行。</p><p>如果主线程有运行时间太长的函数，会阻塞页面渲染，所以将其放置到事件队列。</p><h4 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> delay = <span class="function">(<span class="params">fn, wait, ...args</span>) =&gt;</span> setTimeout(fn, wait, ...args);</span><br><span class="line"></span><br><span class="line">delay(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">  },</span><br><span class="line">  <span class="number">1000</span>,</span><br><span class="line">  <span class="string">'later'</span></span><br><span class="line">); <span class="comment">// Logs 'later' after one second.</span></span><br></pre></td></tr></tbody></table></figure><p>作用：延迟函数执行。</p><p>是的，它和<code>defer</code>非常像，但使用场景却是不一样。</p><p>defer 的目的是将占据主线程时间长的函数推迟到事件队列。</p><p>而 delay 只是字面意思，延迟执行。</p><p>解析：对 <code>setTimeout</code> 进行语义化封装。</p><h4 id="flip"><a href="#flip" class="headerlink" title="flip"></a>flip</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flip = <span class="function"><span class="params">fn</span> =&gt;</span> <span class="function">(<span class="params">first, ...rest</span>) =&gt;</span> fn(...rest, first);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = { <span class="attr">name</span>: <span class="string">'John Smith'</span> };</span><br><span class="line"><span class="keyword">let</span> b = {};</span><br><span class="line"><span class="keyword">const</span> mergeFrom = flip(<span class="built_in">Object</span>.assign);</span><br><span class="line"><span class="keyword">let</span> mergePerson = mergeFrom.bind(<span class="literal">null</span>, a);</span><br><span class="line">mergePerson(b); <span class="comment">// == b</span></span><br><span class="line">b = {};</span><br><span class="line"><span class="built_in">Object</span>.assign(b, a); <span class="comment">// == b</span></span><br></pre></td></tr></tbody></table></figure><p>作用：对 参数函数 的输入数据进行进一步处理，将数据的第一个参数与其余参数位置对调。</p><p>解析：主要利用 扩展运算符的性质，对参数的位置进行调整。</p><p>如果你不了解这一语言特性，可参考阮一峰老师的<a href="https://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="external nofollow noopener noreferrer">ES6 入门</a>。</p><h4 id="hz"><a href="#hz" class="headerlink" title="hz"></a>hz</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hz = <span class="function">(<span class="params">fn, iterations = <span class="number">100</span></span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> before = performance.now();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; iterations; i++) fn();</span><br><span class="line">  <span class="keyword">return</span> (<span class="number">1000</span> * iterations) / (performance.now() - before);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10,000 element array</span></span><br><span class="line"><span class="keyword">const</span> numbers = <span class="built_in">Array</span>(<span class="number">10000</span>)</span><br><span class="line">  .fill()</span><br><span class="line">  .map(<span class="function">(<span class="params">_, i</span>) =&gt;</span> i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test functions with the same goal: sum up the elements in the array</span></span><br><span class="line"><span class="keyword">const</span> sumReduce = <span class="function"><span class="params">()</span> =&gt;</span> numbers.reduce(<span class="function">(<span class="params">acc, n</span>) =&gt;</span> acc + n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> sumForLoop = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) sum += numbers[i];</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// `sumForLoop` is nearly 10 times faster</span></span><br><span class="line"><span class="built_in">Math</span>.round(hz(sumReduce)); <span class="comment">// 572</span></span><br><span class="line"><span class="built_in">Math</span>.round(hz(sumForLoop)); <span class="comment">// 4784</span></span><br></pre></td></tr></tbody></table></figure><p>作用：返回函数每秒执行一次的次数。</p><p>hz 是赫兹的单位（频率的单位）定义为每秒一个周期。</p><p>解析：通过两次使用<code>performance.now</code>获取<code>iterations</code>次迭代前后的毫秒差。</p><p>然后将毫秒转换为秒并除以经过的时间，可以得到每秒的函数执行次数。</p><p>PS: 此处，并没有太好的个人理解，翻译自<a href="https://www.30secondsofcode.org/js/s/hz/" target="_blank" rel="external nofollow noopener noreferrer">官方</a>。</p><h4 id="once"><a href="#once" class="headerlink" title="once"></a>once</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> once = <span class="function"><span class="params">fn</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">    called = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">  };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> startApp = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, event); <span class="comment">// document.body, MouseEvent</span></span><br><span class="line">};</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, once(startApp)); <span class="comment">// only runs `startApp` once upon click</span></span><br></pre></td></tr></tbody></table></figure><p>作用：确保一个函数只被调用一次。</p><p>分析：因为 JavaScript 是单线程执行环境，不需要考虑并发环境，直接一个内部变量存到闭包中，每次调用前判断，并在第一次调用时，修改其值，让后续调用全部失效。</p><p>给你看一下 Go 的 once，官方是通过<code>atomic</code>库实现的：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sync</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"sync/atomic"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Once <span class="keyword">struct</span> {</span><br><span class="line">    m    Mutex</span><br><span class="line">    done <span class="keyword">uint32</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> {</span><br><span class="line">    <span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="number">1</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    o.m.Lock()</span><br><span class="line">    <span class="keyword">defer</span> o.m.Unlock()</span><br><span class="line">    <span class="keyword">if</span> o.done == <span class="number">0</span> {</span><br><span class="line">        <span class="keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="number">1</span>)</span><br><span class="line">        f()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="over"><a href="#over" class="headerlink" title="over"></a>over</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> over = <span class="function">(<span class="params">...fns</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> fns.map(<span class="function"><span class="params">fn</span> =&gt;</span> fn.apply(<span class="literal">null</span>, args));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> minMax = over(<span class="built_in">Math</span>.min, <span class="built_in">Math</span>.max);</span><br><span class="line">minMax(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// [1,5]</span></span><br></pre></td></tr></tbody></table></figure><p>作用：利用函数数组，对接下来的输入数据进行处理，得到每个函数处理后的结果数组。</p><p>解析：使用<code>map</code>和<code>apply</code>将输入的数据传递到每个函数中进行处理。</p><h4 id="overArgs"><a href="#overArgs" class="headerlink" title="overArgs"></a>overArgs</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> overArgs = <span class="function">(<span class="params">fn, transforms</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> fn(...args.map(<span class="function">(<span class="params">val, i</span>) =&gt;</span> transforms[i](val)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">n</span> =&gt;</span> n * n;</span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> fn = overArgs(<span class="function">(<span class="params">x, y</span>) =&gt;</span> [x, y], [square, double]);</span><br><span class="line">fn(<span class="number">9</span>, <span class="number">3</span>); <span class="comment">// [81, 6]</span></span><br></pre></td></tr></tbody></table></figure><p>作用：利用 transforms 函数数组，分别处理相应位置的输入数据，并把结果传递进给定函数。</p><p>解析：transforms 函数数组 和参数必须位置对应，这个约束有点强啊。</p><h4 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> partial = <span class="function">(<span class="params">fn, ...partials</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> fn(...partials, ...args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greet = <span class="function">(<span class="params">greeting, name</span>) =&gt;</span> greeting + <span class="string">' '</span> + name + <span class="string">'!'</span>;</span><br><span class="line"><span class="keyword">const</span> greetHello = partial(greet, <span class="string">'Hello'</span>);</span><br><span class="line">greetHello(<span class="string">'John'</span>); <span class="comment">// 'Hello John!'</span></span><br></pre></td></tr></tbody></table></figure><p>作用：将调用函数的数据分为两次输入，并按正序调用。</p><p>解析：两次使用扩展运算符（…），保存不同时期的数据，最后调用。</p><h4 id="partialRight"><a href="#partialRight" class="headerlink" title="partialRight"></a>partialRight</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> partialRight = <span class="function">(<span class="params">fn, ...partials</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> fn(...args, ...partials);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greet = <span class="function">(<span class="params">greeting, name</span>) =&gt;</span> greeting + <span class="string">' '</span> + name + <span class="string">'!'</span>;</span><br><span class="line"><span class="keyword">const</span> greetJohn = partialRight(greet, <span class="string">'John'</span>);</span><br><span class="line">greetJohn(<span class="string">'Hello'</span>); <span class="comment">// 'Hello John!'</span></span><br></pre></td></tr></tbody></table></figure><p>作用：将调用函数的数据分为两次输入，并按反序调用。</p><p>解析：两次使用扩展运算符（…），保存不同时期的数据，最后调用。</p><h4 id="pipeAsyncFunctions"><a href="#pipeAsyncFunctions" class="headerlink" title="pipeAsyncFunctions"></a>pipeAsyncFunctions</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipeAsyncFunctions = <span class="function">(<span class="params">...fns</span>) =&gt;</span> <span class="function"><span class="params">arg</span> =&gt;</span> fns.reduce(<span class="function">(<span class="params">p, f</span>) =&gt;</span> p.then(f), <span class="built_in">Promise</span>.resolve(arg));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = pipeAsyncFunctions(</span><br><span class="line">  x =&gt; x + <span class="number">1</span>,</span><br><span class="line">  x =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(x + <span class="number">2</span>), <span class="number">1000</span>)),</span><br><span class="line">  x =&gt; x + <span class="number">3</span>,</span><br><span class="line">  <span class="keyword">async</span> x =&gt; (<span class="keyword">await</span> x) + <span class="number">4</span></span><br><span class="line">);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> sum(<span class="number">5</span>)); <span class="comment">// 15 (after one second)</span></span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><p>作用：将传入的多个[异步]函数按照正序 依次调用。</p><p>解析：结合<code>reduce</code>和<code>Promise.then</code>，将数据按照正序传递到每个[异步]函数,进行处理，处理的结果又传给下一个[异步]函数，以此类推。</p><h4 id="promisify"><a href="#promisify" class="headerlink" title="promisify"></a>promisify</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promisify = <span class="function"><span class="params">func</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span></span><br><span class="line">    func(...args, (err, result) =&gt; (err ? reject(err) : resolve(result)))</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delay = promisify(<span class="function">(<span class="params">d, cb</span>) =&gt;</span> setTimeout(cb, d));</span><br><span class="line">delay(<span class="number">2000</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hi!'</span>)); <span class="comment">// // Promise resolves after 2s</span></span><br></pre></td></tr></tbody></table></figure><p>作用：将回调函数改为<code>Promise</code>方式处理结果。</p><p>在 Node8+ ，你可以使用<em><code>util.promisify</code></em></p><p>解析：首先接受给定的回调函数，然后直接在 Promise 中调用该函数。</p><p>因为回调函数的结果按照规范永远是最后一个参数，我们只需要在函数调用时，把最后一个参数换成 Promise 的方式，即：如果回调函数出现错误则 reject，反之 resolve。</p><p>注意：被 promisify 的函数必须接受回调参数且后续会调用。</p><h4 id="rearg"><a href="#rearg" class="headerlink" title="rearg"></a>rearg</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rearg = <span class="function">(<span class="params">fn, indexes</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> fn(...indexes.map(<span class="function"><span class="params">i</span> =&gt;</span> args[i]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rearged = rearg(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> [a, b, c];</span><br><span class="line">  },</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">);</span><br><span class="line">rearged(<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></tbody></table></figure><p>作用：根据指定的索引重新排列传入的参数。</p><p>解析：利用<code>map</code>结合扩展运算符，重新排列传入的参数，并将转换后的参数传递给 fn。</p><h4 id="runPromisesInSeries"><a href="#runPromisesInSeries" class="headerlink" title="runPromisesInSeries"></a>runPromisesInSeries</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> runPromisesInSeries = <span class="function"><span class="params">ps</span> =&gt;</span> ps.reduce(<span class="function">(<span class="params">p, next</span>) =&gt;</span> p.then(next), <span class="built_in">Promise</span>.resolve());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delay = <span class="function"><span class="params">d</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span> setTimeout(r, d));</span><br><span class="line">runPromisesInSeries([<span class="function"><span class="params">()</span> =&gt;</span> delay(<span class="number">1000</span>), () =&gt; delay(<span class="number">2000</span>)]); </span><br><span class="line"><span class="comment">// Executes each promise sequentially, taking a total of 3 seconds to complete</span></span><br></pre></td></tr></tbody></table></figure><p>作用：按照正序 运行给定的多个返回类型为 Promise 函数。</p><p>解析：使用<code>reduce</code>创建一个 Promise 链，每次运行完一个传入的 Promise，都会返回最外部的<code>Promise.then</code>，从而进行下一次调用。</p><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function"><span class="params">ms</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, ms));</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sleepyWork</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I'm going to sleep for 1 second."</span>);</span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I woke up after 1 second.'</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>作用: 延迟异步函数的执行。</p><p>解析：创建一个接受毫秒数的函数，并结合<code>setTimeout</code>，在给定的毫秒数后，返回一个<code>resolve</code>状态的 Promise。</p><p>使用场景：利用异步函数的“同步”机制(await)，使其在异步函数中达到“睡眠”的效果。</p><h4 id="spreadOver"><a href="#spreadOver" class="headerlink" title="spreadOver"></a>spreadOver</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spreadOver = <span class="function"><span class="params">fn</span> =&gt;</span> <span class="function"><span class="params">argsArr</span> =&gt;</span> fn(...argsArr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayMax = spreadOver(<span class="built_in">Math</span>.max);</span><br><span class="line">arrayMax([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure><p>作用：将接受可变参数的函数更改为接受数组。</p><p>如果你认真读了文章，就会发现这是<code>collectInto</code>函数的反模式。</p><p>分析：利用了扩展运算符的性质，将传递进来的数组解构再交给处理函数。</p><h4 id="times"><a href="#times" class="headerlink" title="times"></a>times</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times = <span class="function">(<span class="params">n, fn, context = <span class="literal">undefined</span></span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (fn.call(context, i) !== <span class="literal">false</span> &amp;&amp; ++i &lt; n) {}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> output = <span class="string">''</span>;</span><br><span class="line">times(<span class="number">5</span>, i =&gt; (output += i));</span><br><span class="line"><span class="built_in">console</span>.log(output); <span class="comment">// 01234</span></span><br></pre></td></tr></tbody></table></figure><p>作用：将给定的函数，迭代执行 n 次。</p><p>分析：使用<code>Function.call</code>迭代调用给定的函数，并把迭代的次数传进函数第一个参数。</p><p>如果函数返回 false 可提前退出。</p><h4 id="uncurry"><a href="#uncurry" class="headerlink" title="uncurry"></a>uncurry</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uncurry = <span class="function">(<span class="params">fn, n = <span class="number">1</span></span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> next = <span class="function"><span class="params">acc</span> =&gt;</span> <span class="function"><span class="params">args</span> =&gt;</span> args.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x(y), acc);</span><br><span class="line">  <span class="keyword">if</span> (n &gt; args.length) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">'Arguments too few!'</span>);</span><br><span class="line">  <span class="keyword">return</span> next(fn)(args.slice(<span class="number">0</span>, n));</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> <span class="function"><span class="params">z</span> =&gt;</span> x + y + z;</span><br><span class="line"><span class="keyword">const</span> uncurriedAdd = uncurry(add, <span class="number">3</span>);</span><br><span class="line">uncurriedAdd(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br></pre></td></tr></tbody></table></figure><p>作用：函数反柯里化。</p><p>柯里化是将接受多个<a href="https://zh.wikipedia.org/wiki/參數_(程式設計" target="_blank" rel="external nofollow noopener noreferrer">参数</a>)的<a href="https://zh.wikipedia.org/wiki/函数" target="_blank" rel="external nofollow noopener noreferrer">函数</a>变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数。</p><p>而反柯里化就是将多个接受参数的层层函数，铺平。</p><p>解析：反柯里化的关键代码在于 <code>args.reduce((x, y) =&gt; x(y), acc)</code>。</p><figure class="highlight gml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在上例中,</span><br><span class="line">args: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">acc: <span class="symbol">x</span> =&gt; <span class="symbol">y</span> =&gt; z =&gt; <span class="symbol">x</span> + <span class="symbol">y</span> + z</span><br><span class="line"></span><br><span class="line">第一次循环：</span><br><span class="line"><span class="symbol">x</span>：<span class="symbol">x</span> =&gt; <span class="symbol">y</span> =&gt; z =&gt; <span class="symbol">x</span> + <span class="symbol">y</span> + z</span><br><span class="line"><span class="symbol">y</span>：<span class="number">1</span></span><br><span class="line">返回结果：<span class="symbol">y</span> =&gt; z =&gt; <span class="number">1</span> + <span class="symbol">y</span> + z</span><br><span class="line"></span><br><span class="line">第二次循环:</span><br><span class="line"><span class="symbol">x</span>: <span class="symbol">y</span> =&gt; z =&gt; <span class="number">1</span> + <span class="symbol">y</span> + z</span><br><span class="line"><span class="symbol">y</span>: <span class="number">2</span></span><br><span class="line">返回结果：z =&gt; <span class="number">1</span> + <span class="number">2</span> + z</span><br><span class="line"></span><br><span class="line">最后一次循环的结果，即 <span class="number">1</span> + <span class="number">2</span> +<span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><p>可以看出，每次一循环，都会利用闭包”填充”一个所需变量。</p><p>返回的结果分为两种情况：</p><p>一是 一个保留了 n 个前置参数的函数。</p><p>二是层叠函数中最后一个函数的返回结果。</p><p>值得一提的是，在源码中使用了<code>slice(0，n)</code>保留适当数量的参数。</p><p>如果提供的参数的个数小于给定的解析长度，就会抛出错误。</p><h4 id="unfold"><a href="#unfold" class="headerlink" title="unfold"></a>unfold</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unfold = <span class="function">(<span class="params">fn, seed</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">let</span> result = [],</span><br><span class="line">    val = [<span class="literal">null</span>, seed];</span><br><span class="line">  <span class="keyword">while</span> ((val = fn(val[<span class="number">1</span>]))) result.push(val[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">n</span> =&gt;</span> (n &gt; <span class="number">50</span> ? <span class="literal">false</span> : [-n, n + <span class="number">10</span>]);</span><br><span class="line">unfold(f, <span class="number">10</span>); <span class="comment">// [-10, -20, -30, -40, -50]</span></span><br></pre></td></tr></tbody></table></figure><p>作用：使用种子值以及特殊的数据存储与迭代方式构建一个数组。</p><p>解析: 我为什么说数据存储与迭代方式很特殊呢？</p><p>迭代的变量与结果值，保存在同一数组里，用 01 下标区分。</p><p>而迭代的函数，也需要满足这一规范，返回同样的数组[value，nextSeed]，保证下一次迭代，或者返回 false 终止过程。</p><h4 id="when"><a href="#when" class="headerlink" title="when"></a>when</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> when = <span class="function">(<span class="params">pred, whenTrue</span>) =&gt;</span> <span class="function"><span class="params">x</span> =&gt;</span> (pred(x) ? whenTrue(x) : x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doubleEvenNumbers = when(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>, x =&gt; x * <span class="number">2</span>);</span><br><span class="line">doubleEvenNumbers(<span class="number">2</span>); <span class="comment">// 4</span></span><br><span class="line">doubleEvenNumbers(<span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure><p>作用：根据<code>pred</code>函数测试给定数据。如结果为真，则执行<code>whenTrue</code>函数；反之，返回数据。</p><p>解析: 我喜欢语义化的封装，可大幅提升代码的可读性，减少逻辑负担。</p><h3 id="专家级"><a href="#专家级" class="headerlink" title="专家级"></a>专家级</h3><h4 id="memoize"><a href="#memoize" class="headerlink" title="memoize"></a>memoize</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoize = <span class="function"><span class="params">fn</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">const</span> cached = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> cache.has(val) ? cache.get(val) : cache.set(val, fn.call(<span class="keyword">this</span>, val)) &amp;&amp; cache.get(val);</span><br><span class="line">  };</span><br><span class="line">  cached.cache = cache;</span><br><span class="line">  <span class="keyword">return</span> cached;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// See the `anagrams` snippet.</span></span><br><span class="line"><span class="keyword">const</span> anagramsCached = memoize(anagrams);</span><br><span class="line">anagramsCached(<span class="string">'javascript'</span>); <span class="comment">// takes a long time</span></span><br><span class="line">anagramsCached(<span class="string">'javascript'</span>); <span class="comment">// returns virtually instantly since it's now cached</span></span><br><span class="line"><span class="built_in">console</span>.log(anagramsCached.cache); <span class="comment">// The cached anagrams map</span></span><br></pre></td></tr></tbody></table></figure><p>作用：为给定的函数添加缓存功能。</p><p>解析: 通过实例化一个新的<code>Map</code>对象来创建一个空的缓存。 </p><p>并对函数的调用进一步的封装，如果调用时，传入了一个之前已经传递过的参数，将从缓存中直接返回结果，执行时间为 O(1)；如果是首次传递，则需运行函数，将得到结果缓存，并返回。</p><p>其实，我们还可以借助这个片段，看到一丝 JavaScript 语法的残缺。</p><p>到目前为止，一个社区公认的私有属性语法都没有，TC39 一直提议用<code>#</code>号，并阐述了很多原因、声明。</p><p>哎，说白了，就是 JavaScript 从一开始设计的失误，到现在已经无法挽回了。</p><h4 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, wait</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">let</span> inThrottle, lastFn, lastTime;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>,</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (!inThrottle) {</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">      lastTime = <span class="built_in">Date</span>.now();</span><br><span class="line">      inThrottle = <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      clearTimeout(lastFn);</span><br><span class="line">      lastFn = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - lastTime &gt;= wait) {</span><br><span class="line">          fn.apply(context, args);</span><br><span class="line">          lastTime = <span class="built_in">Date</span>.now();</span><br><span class="line">        }</span><br><span class="line">      }, <span class="built_in">Math</span>.max(wait - (<span class="built_in">Date</span>.now() - lastTime), <span class="number">0</span>));</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">'resize'</span>,</span><br><span class="line">  throttle(<span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.innerWidth);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.innerHeight);</span><br><span class="line">  }, <span class="number">250</span>)</span><br><span class="line">); <span class="comment">// Will log the window dimensions at most every 250ms</span></span><br></pre></td></tr></tbody></table></figure><p>作用: 函数节流。</p><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/5" target="_blank" rel="external nofollow noopener noreferrer">什么是防抖和节流？有什么区别？如何实现？</a> 一文中关于防抖解释：</p><blockquote><p>高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行频率。</p></blockquote><p>同样，节流也是面试必考的点。</p><p>解析：第一次执行时，立即执行给定函数，保存当前的时间，并设置标记变量。</p><p>标记变量主要用于判断是否第一次调用，如果是第一次则立刻运行。</p><p>反之不是第一次运行，过了等待的毫秒后才可继续运行。</p><p>主要逻辑是每次运行前先清除上一个的定时器，然后计算出上一次运行的时间与给定的运行间隔所差的毫秒数，并利用其数据新建一个定时器运行。</p><p>定时器里的函数除了调用给定函数，还会更新上一次运行的时间变量。</p><p>节流的实现，网上的文章有很多版本，但多少都有点瑕疵。</p><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>呼，花了很长的时间，终于搞定了这篇文章。</p><p>以后的 30s 源码刨析系列会挑选一些源码片段去解析，而不是针对某一分类了。</p><p>本篇文章涉及了我的一些思考，希望能对你有帮助。</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p><style>.post-toc{overflow-y: auto; overflow-x: hidden; height: 35em;}</style>]]></content>
    
    <summary type="html">
    
      30secondsofcode 源码深入解析之 JavaScript 函数篇, 里面覆盖了大量函数式案例,由浅入深逐个击破各个代码片段, 带你领略源码之美
    
    </summary>
    
    
      <category term="源码" scheme="https://tomotoes.com/blog/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="源码" scheme="https://tomotoes.com/blog/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="JavaScript" scheme="https://tomotoes.com/blog/tags/JavaScript/"/>
    
      <category term="函数式" scheme="https://tomotoes.com/blog/tags/%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>手撸一个静态文档生成器[译]</title>
    <link href="https://tomotoes.com/blog/build-static-site-generator-nodejs/"/>
    <id>https://tomotoes.com/blog/build-static-site-generator-nodejs/</id>
    <published>2020-02-29T04:05:44.000Z</published>
    <updated>2021-10-05T10:24:13.138Z</updated>
    
    <content type="html"><![CDATA[<p>目前有很多优秀的静态文档生成器，它们的工作原理比你想象的要简单得多。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原文: <a href="https://www.webdevdrops.com/en/build-static-site-generator-nodejs-8969ebe34b22/" target="_blank" rel="external nofollow noopener noreferrer">Build a static site generator in 40 lines with Node.js</a></p><p>作者: <a href="https://www.webdevdrops.com/en/author/dmatoso/" target="_blank" rel="external nofollow noopener noreferrer">Douglas Matoso</a></p><p>翻译许可:</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/4-min.gif" alt="image" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/build-static-site-generator-nodejs/permit.png"> </div> <div class="image-caption">image</div> </figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/2-min.gif" alt="img" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/build-static-site-generator-nodejs/1.jpg"> </div> <div class="image-caption">img</div> </figure><h3 id="为什么要造这个轮子"><a href="#为什么要造这个轮子" class="headerlink" title="为什么要造这个轮子"></a>为什么要造这个轮子</h3><p>当我计划建立个人网站时，我的需求很简单，做一个只有几个页面的网站，放置一些关于自己的信息，我的技能和项目就够了。</p><p>毫无疑问，它应该是纯静态的(不需要后端服务，可托管在任何地方)。</p><p>我曾经使用过<code>Jekyll</code>, <code>Hugo</code>和<code>Hexo</code>这些知名的静态文档生成器，但我认为它们有太多的功能，我不想为我的网站增加这么多的复杂性。</p><p>所以我觉得，针对我的需求，一个简单的静态文档生成器就可以满足。</p><p>嗯，手动构建一个简单的生成器，应该不会那么难。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>这个生成器必须满足以下条件：</p><ul><li><p>从<code>EJS</code>模板生成<code>HTML</code>文件。</p></li><li><p>具有布局文件，所有页面都应该具有相同的页眉，页脚，导航等。</p></li><li><p>允许可重用布局组件。</p></li><li><p>站点的大致信息封装到一个配置文件中。</p></li><li><p>从 JSON 文件中读取数据。</p><p>例如：项目列表，这样我可以轻松地迭代和构建项目页面。</p></li></ul><blockquote><p>为什么使用 EJS 模板?</p><p>因为 EJS 很简单，它只是嵌入在 HTML 中的 JavaScript 而已。</p></blockquote><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>/  </span><br><span class="line"> src/  </span><br><span class="line">   assets/  </span><br><span class="line">   data/  </span><br><span class="line">   pages/  </span><br><span class="line">   partials/  </span><br><span class="line">   layout.ejs  </span><br><span class="line"> site.<span class="built_in">config</span>.js</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>public:</strong> 生成站点的位置。</li><li><strong>src:</strong> 源文件。</li><li><strong>src/assets:</strong> 包含 CSS, JS, 图片 等</li><li><strong>src/data:</strong> 包含 JSON 数据。</li><li><strong>src/pages:</strong> 根据其中的 EJS 生成 HTML 页面的模板文件夹。</li><li><strong>src/layout.ejs:</strong> 主要的原页面模板，包含特殊<code>&lt;%-body%&gt;</code>占位符，将插入具体的页面内容。</li><li><strong>site.config.js</strong>: 模板中全局配置文件。</li></ul><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器代码位于<code>scripts/build.js</code>文件中，每次想重建站点时，执行<code>npm run build</code>命令即可。</p><p>实现方法是将以下脚本添加到<code>package.json</code>的<code>scripts</code>块中：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"build": "node ./scripts/build"</span><br></pre></td></tr></tbody></table></figure><p>下面是完整的生成器代码：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fse = <span class="built_in">require</span>(<span class="string">'fs-extra'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> { promisify } = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"><span class="keyword">const</span> ejsRenderFile = promisify(<span class="built_in">require</span>(<span class="string">'ejs'</span>).renderFile)</span><br><span class="line"><span class="keyword">const</span> globP = promisify(<span class="built_in">require</span>(<span class="string">'glob'</span>))</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../site.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> srcPath = <span class="string">'./src'</span></span><br><span class="line"><span class="keyword">const</span> distPath = <span class="string">'./public'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// clear destination folder</span></span><br><span class="line">fse.emptyDirSync(distPath)</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy assets folder</span></span><br><span class="line">fse.copy(<span class="string">`<span class="subst">${srcPath}</span>/assets`</span>, <span class="string">`<span class="subst">${distPath}</span>/assets`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// read page templates</span></span><br><span class="line">globP(<span class="string">'**/*.ejs'</span>, { <span class="attr">cwd</span>: <span class="string">`<span class="subst">${srcPath}</span>/pages`</span> })</span><br><span class="line">  .then(<span class="function">(<span class="params">files</span>) =&gt;</span> {</span><br><span class="line">    files.forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> {</span><br><span class="line">      <span class="keyword">const</span> fileData = path.parse(file)</span><br><span class="line">      <span class="keyword">const</span> destPath = path.join(distPath, fileData.dir)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// create destination directory</span></span><br><span class="line">      fse.mkdirs(destPath)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">          <span class="comment">// render page</span></span><br><span class="line">          <span class="keyword">return</span> ejsRenderFile(<span class="string">`<span class="subst">${srcPath}</span>/pages/<span class="subst">${file}</span>`</span>, <span class="built_in">Object</span>.assign({}, config))</span><br><span class="line">        })</span><br><span class="line">        .then(<span class="function">(<span class="params">pageContents</span>) =&gt;</span> {</span><br><span class="line">          <span class="comment">// render layout with page contents</span></span><br><span class="line">          <span class="keyword">return</span> ejsRenderFile(<span class="string">`<span class="subst">${srcPath}</span>/layout.ejs`</span>, <span class="built_in">Object</span>.assign({}, config, { <span class="attr">body</span>: pageContents }))</span><br><span class="line">        })</span><br><span class="line">        .then(<span class="function">(<span class="params">layoutContent</span>) =&gt;</span> {</span><br><span class="line">          <span class="comment">// save the html file</span></span><br><span class="line">          fse.writeFile(<span class="string">`<span class="subst">${destPath}</span>/<span class="subst">${fileData.name}</span>.html`</span>, layoutContent)</span><br><span class="line">        })</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> { <span class="built_in">console</span>.error(err) })</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> { <span class="built_in">console</span>.error(err) })</span><br></pre></td></tr></tbody></table></figure><p>接下来，我将解释代码中的具体组成部分。</p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>我们只需要三个依赖项：</p><ul><li><p><a href="http://ejs.co/" target="_blank" rel="external nofollow noopener noreferrer"><strong>ejs</strong></a></p><p>把我们的模板编译成<code>HTML</code>。</p></li><li><p><a href="https://www.npmjs.com/package/fs-extra" target="_blank" rel="external nofollow noopener noreferrer"><strong>fs-extra</strong></a></p><p>Node 文件模块的衍生版，具有更多的功能，并增加了<code>Promise</code>的支持。</p></li><li><p><a href="https://www.npmjs.com/package/glob" target="_blank" rel="external nofollow noopener noreferrer"><strong>glob</strong></a></p><p>递归读取目录，返回包含与指定模式匹配的所有文件，类型是数组。</p></li></ul><h4 id="Promisify"><a href="#Promisify" class="headerlink" title="Promisify"></a>Promisify</h4><p>我们使用<code>Node</code>提供的<code>util.promisify</code>将所有回调函数转换为基于<code>Promise</code>的函数。 </p><p>它使我们的代码更短，更清晰，更易于阅读。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { promisify } = <span class="built_in">require</span>(<span class="string">'util'</span>)  </span><br><span class="line"><span class="keyword">const</span> ejsRenderFile = promisify(<span class="built_in">require</span>(<span class="string">'ejs'</span>).renderFile)  </span><br><span class="line"><span class="keyword">const</span> globP = promisify(<span class="built_in">require</span>(<span class="string">'glob'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h4><p>在顶部，我们加载站点配置文件，以稍后将其注入模板渲染中。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../site.config'</span>)</span><br></pre></td></tr></tbody></table></figure><p>站点配置文件本身会加载其他<code>JSON</code>数据，例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> projects = <span class="built_in">require</span>(<span class="string">'./src/data/projects'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {  </span><br><span class="line">  site: {  </span><br><span class="line">    title: <span class="string">'NanoGen'</span>,  </span><br><span class="line">    description: <span class="string">'Micro Static Site Generator in Node.js'</span>,  </span><br><span class="line">    projects  </span><br><span class="line">  }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="清空站点文件夹"><a href="#清空站点文件夹" class="headerlink" title="清空站点文件夹"></a>清空站点文件夹</h4><p>我们使用<code>fs-extra</code>提供的<code>emptyDirSync</code>函数清空 生成后的站点文件夹。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fse.emptyDirSync(distPath)</span><br></pre></td></tr></tbody></table></figure><h4 id="拷贝静态资源"><a href="#拷贝静态资源" class="headerlink" title="拷贝静态资源"></a>拷贝静态资源</h4><p>我们使用<code>fs-extra</code>提供的<code>copy</code>函数，该函数以递归方式复制静态资源 到站点文件夹。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fse.copy(<span class="string">`<span class="subst">${srcPath}</span>/assets`</span>, <span class="string">`<span class="subst">${distPath}</span>/assets`</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="编译页面模板"><a href="#编译页面模板" class="headerlink" title="编译页面模板"></a>编译页面模板</h4><p>首先我们使用<code>glob</code>（已被 promisify）递归读取<code>src/pages</code>文件夹以查找<code>.ejs</code>文件。</p><p>它将返回一个匹配给定模式的所有文件数组。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">globP(<span class="string">'**/*.ejs'</span>, { <span class="attr">cwd</span>: <span class="string">`<span class="subst">${srcPath}</span>/pages`</span> })  </span><br><span class="line">  .then(<span class="function">(<span class="params">files</span>) =&gt;</span> {</span><br></pre></td></tr></tbody></table></figure><p>对于找到的每个模板文件，我们使用<code>Node</code>的<code>path.parse</code>函数来分隔文件路径的各个组成部分（例如目录，名称和扩展名）。 </p><p>然后，我们在站点目录中使用<code>fs-extra</code>提供的<code>mkdirs</code>函数创建与之对应的文件夹。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">files.forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> {  </span><br><span class="line">  <span class="keyword">const</span> fileData = path.parse(file)  </span><br><span class="line">  <span class="keyword">const</span> destPath = path.join(distPath, fileData.dir)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// create destination directory  </span></span><br><span class="line">  fse.mkdirs(destPath)</span><br></pre></td></tr></tbody></table></figure><p>然后，我们使用<code>EJS</code>编译文件，并将配置数据作为数据参数。 </p><p>由于我们使用的是已 promisify 的<code>ejs.renderFile</code>函数，因此我们可以返回调用结果，并在下一个<code>promise</code>链中处理结果。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> {  </span><br><span class="line">  <span class="comment">// render page  </span></span><br><span class="line">  <span class="keyword">return</span> ejsRenderFile(<span class="string">`<span class="subst">${srcPath}</span>/pages/<span class="subst">${file}</span>`</span>, <span class="built_in">Object</span>.assign({}, config))  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在下一个<code>then</code>块中，我们得到了已编译好的页面内容。 </p><p>现在，我们编译布局文件，将页面内容作为<code>body</code>属性传递进去。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">pageContents</span>) =&gt;</span> {  </span><br><span class="line">  <span class="comment">// render layout with page contents  </span></span><br><span class="line">  <span class="keyword">return</span> ejsRenderFile(<span class="string">`<span class="subst">${srcPath}</span>/layout.ejs`</span>, <span class="built_in">Object</span>.assign({}, config, { <span class="attr">body</span>: pageContents }))  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>最后，我们得到了生成好的编译结果（布局+页面内容的 HTML），然后将其保存到对应的<code>HTML</code>文件中。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">layoutContent</span>) =&gt;</span> {  </span><br><span class="line">  <span class="comment">// save the html file  </span></span><br><span class="line">  fse.writeFile(<span class="string">`<span class="subst">${destPath}</span>/<span class="subst">${fileData.name}</span>.html`</span>, layoutContent)  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="调试服务器"><a href="#调试服务器" class="headerlink" title="调试服务器"></a>调试服务器</h3><p>为了使查看结果更容易，我们在<code>package.json</code>的<code>scripts</code>中添加一个简单的静态服务器。</p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"serve"</span>: <span class="string">"serve ./public"</span></span><br></pre></td></tr></tbody></table></figure><p>运行 <code>npm run serve</code> 命令，打开<a href="http://localhost:5000/" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:5000</a>就看到结果了。</p><h3 id="进一步探索"><a href="#进一步探索" class="headerlink" title="进一步探索"></a>进一步探索</h3><h4 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h4><p>大多数静态文档生成器都支持以<code>Markdown</code>格式编写内容。</p><p>并且，它们还支持以<code>YAML</code>格式在顶部添加一些元数据，如下所示：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">---</span>  </span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span>  </span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span>  </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p>只需要一些修改，我们就可以支持相同的功能了。</p><p>首先，我们必须增加两个依赖:</p><ul><li><p><a href="https://www.npmjs.com/package/marked" target="_blank" rel="external nofollow noopener noreferrer"><strong>marked</strong></a></p><p>将<code>markdown</code>编译为<code>HTML</code></p></li><li><p><a href="https://www.npmjs.com/package/front-matter" target="_blank" rel="external nofollow noopener noreferrer"><strong>front-matter</strong></a></p><p>从<code>markdown</code>中提取元数据(front matter)。</p></li></ul><p>然后，我们将<code>glob</code>的匹配模式更新为包括<code>.md</code>文件，并保留<code>.ejs</code>，以支持渲染复杂页面。</p><p>如果想要部署一些纯 HTML 页面，还需包含<code>.html</code>。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">globP(<span class="string">'**/*.@(md|ejs|html)'</span>, { <span class="attr">cwd</span>: <span class="string">`<span class="subst">${srcPath}</span>/pages`</span> })</span><br></pre></td></tr></tbody></table></figure><p>对于每个文件，我们都必须加载文件内容，以便可以在顶部提取到元数据。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> {  </span><br><span class="line">  <span class="comment">// read page file  </span></span><br><span class="line">  <span class="keyword">return</span> fse.readFile(<span class="string">`<span class="subst">${srcPath}</span>/pages/<span class="subst">${file}</span>`</span>, <span class="string">'utf-8'</span>)  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>我们将加载后的内容传递给<code>front-matter</code>。 </p><p>它将返回一个对象，其中<code>attribute</code>属性便是提取后的元数据。</p><p>然后，我们使用此数据扩充站点配置。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">data</span>) =&gt;</span> {  </span><br><span class="line">  <span class="comment">// extract front matter  </span></span><br><span class="line">  <span class="keyword">const</span> pageData = frontMatter(data)  </span><br><span class="line">  <span class="keyword">const</span> templateConfig = <span class="built_in">Object</span>.assign({}, config, { <span class="attr">page</span>: pageData.attributes })</span><br></pre></td></tr></tbody></table></figure><p>现在，我们根据文件扩展名将页面内容编译为 HTML。</p><p>如果是<code>.md</code>，则利用<code>marked</code>函数编译;</p><p>如果是<code>.ejs</code>，我们继续使用<code>EJS</code>编译;</p><p>如果是<code>.html</code>，便无需编译。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pageContent  </span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (fileData.ext) {  </span><br><span class="line">  <span class="keyword">case</span> <span class="string">'.md'</span>:  </span><br><span class="line">    pageContent = marked(pageData.body)  </span><br><span class="line">    <span class="keyword">break</span>  </span><br><span class="line">  <span class="keyword">case</span> <span class="string">'.ejs'</span>:  </span><br><span class="line">    pageContent = ejs.render(pageData.body, templateConfig)  </span><br><span class="line">    <span class="keyword">break</span>  </span><br><span class="line">  <span class="keyword">default</span>:  </span><br><span class="line">    pageContent = pageData.body  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后，我们像以前一样渲染布局。</p><p>增加元数据，最明显的一个意义是，我们可以为每个页面设置单独的标题，如下所示：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">---</span>  </span><br><span class="line"><span class="attr">title:</span> <span class="string">Another</span> <span class="string">Page</span>  </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p>并让布局动态地渲染这些数据：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">page.title</span> ? `${<span class="attr">page.title</span>} | ` <span class="attr">:</span> '' %&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">site.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如此一来，每个页面将具有唯一的<code>&lt;title&gt;</code>标签。</p><h4 id="多种布局的支持"><a href="#多种布局的支持" class="headerlink" title="多种布局的支持"></a>多种布局的支持</h4><p>另一个有趣的探索是，在特定的页面中使用不同的布局。</p><p>比如专门为站点首页设置一个独一无二的布局：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">---</span>  </span><br><span class="line"><span class="attr">layout:</span> <span class="string">minimal</span>  </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p>我们需要有单独的布局文件，我将它们放在<code>src/layouts</code>文件夹中：</p><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src<span class="regexp">/layouts/</span>  </span><br><span class="line">   <span class="keyword">default</span>.ejs  </span><br><span class="line">   mininal.ejs</span><br></pre></td></tr></tbody></table></figure><p>如果<code>front matter</code>出现了布局属性，我们将利用<code>layouts</code>文件夹中同名模板文件进行渲染; 如果未设置，则利用默认模板渲染。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> layout = pageData.attributes.layout || <span class="string">'default'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ejsRenderFile(<span class="string">`<span class="subst">${srcPath}</span>/layouts/<span class="subst">${layout}</span>.ejs`</span>, </span><br><span class="line">  <span class="built_in">Object</span>.assign({}, templateConfig, { <span class="attr">body</span>: pageContent })</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>即使添加了这些新特性，构建脚本也才只有<code>60</code>行。</p><h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><p>如果你想更进一步，可以添加一些不难的附加功能：</p><ul><li><p>可热重载的调试服务器</p><p>你可以使用像<a href="https://www.npmjs.com/package/live-server" target="_blank" rel="external nofollow noopener noreferrer"><strong>live-server</strong></a> (内置自动重新加载) 或 <a href="https://www.npmjs.com/package/chokidar" target="_blank" rel="external nofollow noopener noreferrer"><strong>chokidar</strong></a> (观察文件修改以自动触发构建脚本）这样的模块去完成。</p></li><li><p>自动部署</p><p>添加脚本以将站点部署到<code>GitHub Pages</code>等常见的托管服务，或仅通过<code>SSH</code>（使用<code>scp</code>或<code>rsync</code>等命令）将文件上传到你自己的服务器上。</p></li><li><p>支持 CSS/JS 预处理器</p><p>在静态文件被复制到站点文件前，增加一些预处理器(SASS 编译为 CSS,ES6 编译为 ES5 等)。</p></li><li><p>更好的日志打印</p><p>添加一些 <code>console.log</code> 日志输出 来更好地分析发生了什么。</p><p>你可以使用<code>chalk</code>包来完善这件事。</p></li></ul><p>反馈？ 有什么建议吗？ 请随时发表评论或与我联系！</p><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>这个文章的完整示例可以在这里找到：<a href="https://github.com/doug2k1/nanogen/tree/legacy。" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/doug2k1/nanogen/tree/legacy。</a></p><p>一段时间后，我决定将项目转换为<code>CLI</code>模块，以使其更易于使用，它位于上面链接的<code>master</code>分支中。</p><p>译者：</p><p>今日本想写一篇<a href="https://github.com/panjf2000/ants/" target="_blank" rel="external nofollow noopener noreferrer">ants</a>(一个高性能的<code>goroutine</code>池)源码解析，奈何环境太吵，静不下心，遂罢。</p><p>这是一篇我前些日子无意间看到的文章，虽然是<code>17</code>年的文章，在读完之后仍对我产生了一些思考。</p><p>希望这篇文章对你有所帮助。</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      40行代码手撸一个简易的静态文档生成器，让你了解到hexo，hugo等项目的具体工作流程。
    
    </summary>
    
    
      <category term="后端" scheme="https://tomotoes.com/blog/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="https://tomotoes.com/blog/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Nodejs" scheme="https://tomotoes.com/blog/tags/Nodejs/"/>
    
      <category term="译文" scheme="https://tomotoes.com/blog/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地写博客</title>
    <link href="https://tomotoes.com/blog/how-to-blog-elegantly/"/>
    <id>https://tomotoes.com/blog/how-to-blog-elegantly/</id>
    <published>2020-01-24T03:34:00.000Z</published>
    <updated>2021-10-05T10:24:13.154Z</updated>
    
    <content type="html"><![CDATA[<p>分享我的写作经历。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将以我个人写作方式的演变为主线，分三个不同的阶段讲述。</p><p><em>请注意：文章的重点不在于 静态文档生成器，写作平台的选择。</em></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安逸的-PC-阶段"><a href="#安逸的-PC-阶段" class="headerlink" title="安逸的 PC 阶段"></a>安逸的 PC 阶段</h3><h4 id="初识-Hexo"><a href="#初识-Hexo" class="headerlink" title="初识 Hexo"></a>初识 Hexo</h4><p>在大二刚开学的时候，我便萌生了建立个人博客的念头。</p><p>当查阅很多资料后，发现了一款名叫<code>Hexo</code>的静态文档生成器广受好评，网上有关的文章也非常多，于是在大势所趋下，我走上了这漫长的建站之路。</p><p>这里闲话两句：</p><p>刚开始，我把大量的时间都用在网页交互上，现在回头一想，真是搞错了重点。</p><p><strong>对于一个博客来说，内容才是最重要的。</strong></p><h4 id="CI-的增持"><a href="#CI-的增持" class="headerlink" title="CI 的增持"></a>CI 的增持</h4><p>在最初的写作流程很繁琐，主要分为下面几个步骤：</p><ol><li>调用<code>Hexo</code>命令新建文章</li><li>启动<code>Hexo</code>的本地服务器</li><li>编写好文章</li><li>在本地服务器上检查是否有遗漏</li><li>利用<code>Hexo</code>生成出站点网页</li><li>将这些网页<code>push</code>到<code>Github Page</code>上</li></ol><p>很容易看出，在<code>PC</code>阶段，与写作无关的流程会浪费不少时间，写作效率很难得到保障。</p><p>在无关流程中，第五步骤 生成网页是最占据时间的。</p><p>所以，我根据需求进一步为博客加了上持续集成工具。</p><p>由于我的博客是私有仓库，大部分的<code>CI</code>工具都是收费的。</p><p>迫不得已，我使用了<code>Gitlab</code>，不论项目是<code>private</code>或<code>public</code>，一个月都免费提供 2000 次持续集成，这对一个不常更新的博客来说，足矣。</p><p>后续：现在<code>CI</code>工具已选为<code>GithubAction</code>。</p><p>其对于私有仓库，一个月免费提供 2000 分钟会话，并且构建速度比<code>Gitlab</code>快 5 倍左右。</p><p>So，在持续集成的增持之后，我的写作流程简化成了如下：</p><ol><li>调用<code>Hexo</code>命令新建文章</li><li>启动<code>Hexo</code>的本地服务器</li><li>编写好文章</li><li>在本地服务器上检查是否有遗漏</li><li>直接将项目<code>push</code>到<code>Gitlab</code></li></ol><p>如此一来，将部署阶段彻底隔离。</p><h4 id="Typora-所见即所得"><a href="#Typora-所见即所得" class="headerlink" title="Typora-所见即所得"></a>Typora-所见即所得</h4><p>在<code>PC</code>上我的写作软件是<code>Typora</code>，所见即所得，简单好用。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/1-min.gif" alt="typora-theme-tomotoes" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/how-to-blog-elegantly/typora.png"> </div> <div class="image-caption">typora-theme-tomotoes</div> </figure><p>上图是我根据<code>Tomotoes</code>样式打磨的一款<code>Typora</code>主题 </p><div class="github-card" data-theme="default" data-github="Tomotoes/typora-theme-tomotoes"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script> 已开源，欢迎使用。<p></p><p>虽然<code>PC</code>上写作很安逸，但可惜的是，对于一个没有固定自习位置的学生来说，<code>PC</code>的不易携带性会被逐渐放大，一场潜在的变革 在所难免。</p><h3 id="极致的-Android-阶段"><a href="#极致的-Android-阶段" class="headerlink" title="极致的 Android 阶段"></a>极致的 Android 阶段</h3><p>在大三之后，因忙于考试，我的学习设备从沉重的笔记本换成了<code>Android</code>手机。</p><p>这方便是方便了，可如何写博客呢？这成了一个难题。</p><p>在这个阶段，每当有<code>idea</code>来时，也只能记在本上。</p><p>虽说解决了基本需求，但 一纸一笔是很难分享于众的。</p><p>对于我来说，这还远远不够。</p><p>我曾听说过一句话：</p><blockquote><p>现代人的知识库会因互联网的出现而无限增加。</p></blockquote><p>即，你解决不了的事情，<code>Google</code>就是了。</p><h4 id="遗失的神器-Termux"><a href="#遗失的神器-Termux" class="headerlink" title="遗失的神器-Termux"></a>遗失的神器-Termux</h4><p>很快的，在<code>Google</code>的帮忙下，我找到了我想要的答案—<strong>Termux</strong>（手机上的<code>Shell</code>）。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/2-min.gif" alt="termux" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/how-to-blog-elegantly/termux.jpeg"> </div> <div class="image-caption">termux</div> </figure><p>哈哈，乍一看 是不是很强大！</p><p>我给它安装了<code>zsh，hexo</code>等一系列软件，并且还配置了桌面化程序。</p><p>在我看来，<code>PC</code>上所有的需求几乎都可以实现，称得上一个小型操作系统了。</p><p>不过，<code>Termux</code>有个坑。</p><p>如果你的<code>Android</code>没有<code>root</code>，它是不支持访问内部文件系统的。</p><p>即，外部软件编写好的博文，无法同步到<code>Termux</code>里。</p><p>如果刷机<code>root</code>会浪费很长时间，我采取的是软连接+<code>npm</code>钩子临时复制删除的方法。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"scripts"</span>: {</span><br><span class="line">    <span class="attr">"preci"</span>:<span class="string">"rm -rf ~/blog/source/_posts &amp;&amp; cp -r ~/storage/dcim/_posts ~/blog/source"</span>,</span><br><span class="line">    <span class="attr">"ci"</span>: <span class="string">"git add -A &amp;&amp; git commit -am'add new post' &amp;&amp; git push -f gitlab master"</span>,</span><br><span class="line">    <span class="attr">"postci"</span>: <span class="string">"rm -rf ~/blog/source/_posts &amp;&amp; ln -s ~/storage/dcim/_posts ~/blog/source/_posts"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如有进一步的问题，请留言。</p><h4 id="码字的进一步思考"><a href="#码字的进一步思考" class="headerlink" title="码字的进一步思考"></a>码字的进一步思考</h4><p>虽说，<code>Android</code>上有如此极客风格的神器，但在写作软件的生态，却差强人意。</p><p>在我几乎找遍了<code>Play</code>商店中所有的写作软件之后，我只看上了一款叫做<code>Epsilon Notes</code>的软件。</p><p>然而，在后续发展中，一个致命问题显现了出来：<strong>手机上码字的体验真的是次到爆！</strong></p><p>原本我还想写一篇文章：<code>《你浪费了一部手机》</code>，看来是我想错了。</p><p>输入外设的硬伤，写作的冲动都被浇灭了。</p><h3 id="优雅的-iPad-阶段"><a href="#优雅的-iPad-阶段" class="headerlink" title="优雅的 iPad 阶段"></a>优雅的 iPad 阶段</h3><p>虽然，在<a href="https://tomotoes.com/blog/apple-a-construction-company/">上一篇文章</a>中我吐槽了<code>Apple</code>的作风，但这丝毫不影响我对<code>Apple</code>设备的喜爱，生态闭环的极致便是设备体检的极致。</p><p>哈哈，本文正式开始了。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/3-min.gif" alt="iPad" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/how-to-blog-elegantly/ipad.jpeg"> </div> <div class="image-caption">iPad</div> </figure><p><em>本文，就是在这些工具的加持下完成的。</em></p><p>下面主要讲述这些工具。</p><h4 id="Logitech-K380"><a href="#Logitech-K380" class="headerlink" title="Logitech K380"></a>Logitech K380</h4><p>在键盘方面，我下了不少功课，最终选择的是罗技的<code>K380</code>键盘。</p><p>因为，之前码字主要在笔记本上，所以 短间距，剪刀式的键盘，我用起来很顺手。</p><p>并且值得一提的是，该键盘很轻便，方便携带，可谓是出家旅行的必备之物。</p><h4 id="Working-Copy"><a href="#Working-Copy" class="headerlink" title="Working Copy"></a>Working Copy</h4><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/3-min.gif" alt="working-copy" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/how-to-blog-elegantly/working-copy.png"> </div> <div class="image-caption">working-copy</div> </figure><p>以<code>Apple</code>的喜欢筑墙的性格，终端模拟器是不可能出现在苹果商店里的。</p><p>但在<code>Testflight</code>，我还找到了一个类似于<code>Termux</code>的软件—<code>ish</code>。</p><p>这款软件唯一的缺点就是没有优点，连安装个<code>node</code>都几经失败，我果断弃坑。</p><p>几经辗转，我幸运地遇到了<code>Working Copy</code>，<code>IOS</code>平台上最强大的<code>Git</code>客户端。</p><p>现在我写一篇博文，只需要将<code>pull</code>下来的博客，添加上写好的文章再<code>push</code>上去即可。</p><p>并且这一切，在<code>Woking Copy</code>中只需要点几下按钮，真的是将所有流程都简化到极致。</p><p>可惜的是，<code>Working Copy</code>的价格不便宜-128 元，它只提供 10 天的免费试用。</p><p>但如果你能通过<code>Github</code>学生认证的话，<code>Working Copy</code>还是可以继续使用的<span class="github-emoji" style="background-image:url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>。</p><h4 id="iA-Writer"><a href="#iA-Writer" class="headerlink" title="iA Writer"></a>iA Writer</h4><p>如果你想问我，<code>IOS</code>端有没有值得推荐的写作软件？</p><p>那很抱歉，这个问题 我无法回答。</p><p>在经过数天的寻找之后，我放弃了。</p><p>这些知名软件，真的是一个能打的都没有。</p><p>目前，我的折中方案是使用<code>iA Writer</code>，相当于简易版的<code>Typora</code>，</p><p>它有个神器功能—可直接打开<code>Working Copy</code>中的<code>Github</code>仓库进行编辑。</p><p>也就是说，我建博文，写博客这些流程全在这一个软件中就可以搞定。</p><p>明显的缺点是，对于图片 还要使用<code>Working Copy</code>进行导入，有那么一丝破环沉浸感。</p><h3 id="完美的-CMS-阶段"><a href="#完美的-CMS-阶段" class="headerlink" title="完美的 CMS 阶段"></a>完美的 CMS 阶段</h3><p>CMS？静态博客还想要什么自行车🚴‍♀️。</p><p>困就一个字，溜了溜了。</p><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>这就是我的写作经历，希望对你有所帮助。</p><p>最后，新年快乐。</p><p>转载本站文章请注明作者和出处 <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。</p>]]></content>
    
    <summary type="html">
    
      如何优雅地写博客，hexo与外设的完美结合。
    
    </summary>
    
    
      <category term="博客" scheme="https://tomotoes.com/blog/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="https://tomotoes.com/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="写作" scheme="https://tomotoes.com/blog/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Apple 一家建筑公司</title>
    <link href="https://tomotoes.com/blog/apple-a-construction-company/"/>
    <id>https://tomotoes.com/blog/apple-a-construction-company/</id>
    <published>2020-01-22T06:24:00.000Z</published>
    <updated>2021-10-05T10:24:13.138Z</updated>
    
    <content type="html"><![CDATA[<p>我与墙的故事。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文只从技术发展角度出发，资本层面不允置评。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="筑墙的公司"><a href="#筑墙的公司" class="headerlink" title="筑墙的公司"></a>筑墙的公司</h3><p>如果一家公司有自研的操作系统，有完善的设备生态，并且还拥有一大批成千上万的粉丝用户，那么很可能会发生一个现象：<strong><code>墙</code>的出现</strong>。</p><p>我说的墙指的是，如果你想在我的圈子牟利，你必须遵守我的规矩，必须用我提供的工具，且必须维护我的利益。</p><p>这样的一堵墙不仅束缚了开发者，无形中还阻碍了它自身的发展。</p><p>Apple，正是一家喜欢筑墙的公司。</p><h3 id="我的经历"><a href="#我的经历" class="headerlink" title="我的经历"></a>我的经历</h3><p>这两天，我针对网站在平板上的显示问题，特地去调整了一下<code>Tomotoes</code>的样式。</p><p>结果便陷入了与<code>墙</code>的对抗之中。</p><h4 id="第一堵墙"><a href="#第一堵墙" class="headerlink" title="第一堵墙"></a>第一堵墙</h4><p>我遇到的第一堵墙是<code>Apple</code>专有的浏览器内核。</p><p>因为<code>Tomototes</code>在平板下存在层叠渲染 Bug，我单纯地以为只是<code>Safari</code>的问题，结果当下载了好多个浏览器之后，惊奇地发现：网站显示的问题居然一致。</p><p>不管了<code>Firefox</code>还是<code>Chrome</code>全是一个样，惊了。</p><p>于是我上网搜了一下<code>Apple</code>的浏览器内核信息。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/3-min.gif" alt="apple only have a webkit" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/apple-a-construction-company/webkit.png"> </div> <div class="image-caption">apple only have a webkit</div> </figure><p>信息很明显：我<code>Apple</code>商店中的所有浏览器都必须用我的内核，你们做的只是<code>UI</code>。</p><p>So，那接下来和这一个内核打交道就是了。</p><h4 id="第二堵墙"><a href="#第二堵墙" class="headerlink" title="第二堵墙"></a>第二堵墙</h4><p>我遇到的第二堵墙是苹果浏览器内核的实现标准的任意性。</p><p><em>原本，我想写的文章是 <code>Safari-下一个 IE6</code>，但针对性不强就改了。</em></p><p>在<code>CSS</code>有一个专门指定层叠元素优先级的样式，<code>z-index</code>。</p><p>各家浏览器实现得参差不齐，但都差不多。</p><p>可<code>Apple</code>不一样，它有自己的设计理念。</p><p>在带有 3D 变换的元素上，它根据语义不认同<code>z-index</code>，而是<code>translateZ</code>。</p><p>我觉得这一理念，其实有点道理的，人眼在 3D 层面看待一件东西，确实是 Z 轴决定重叠优先级。</p><p>但，这<code>CSS</code>国际标准就可以这么任意实现嘛，在你重定自己的标准时，你想过有多少开发者会因此掉头发啊。</p><h4 id="第三堵墙"><a href="#第三堵墙" class="headerlink" title="第三堵墙"></a>第三堵墙</h4><p>我遇到的第三堵墙便是<code>IOS</code>设备上的网页调试问题。</p><p>试问，在 2020 年，你如果没有一台<code>Mac</code>，<code>Apple</code>下的所有工具 都休想染指。</p><p>调试 <code>Android</code> 设备上的网页非常简单，只需要打开<code>Chrome</code>开发工具，选择远程设备即可。</p><p>可<code>IOS</code>设备，我只能借助第三方软件。</p><p>由于我的设备是<code>IOS13</code>+<code>Win10</code>，有很多软件都无法适配。比如，<code>ios-webkit-debug-proxy</code> ， <code>RemoteDebug iOS WebKit Adapter</code>等。</p><p>这一来二去，浪费了很长时间。最后，我想了想，只要让<code>IOS</code>设备能在同一网段访问本地网站就可<code>Debug</code>。</p><p>然后，我找到了<a href="http://www.browsersync.cn" target="_blank" rel="external nofollow noopener noreferrer">browser-sync</a>这一利器，满足了基本需求。</p><p>嗯，“愉快”的<code>Debug</code>之路便开始了。</p><h3 id="互联网的专制者"><a href="#互联网的专制者" class="headerlink" title="互联网的专制者"></a>互联网的专制者</h3><p>刚刚在网上刷到了贾跃亭的<a href="http://www.techwalker.com/2015/0413/3049986.shtml" target="_blank" rel="external nofollow noopener noreferrer">一封致苹果的公开信</a>，信中所讲虽有利他之嫌，但对于苹果专制的描绘却很形象。</p><p>信中有一句话是这样描述的：</p><blockquote><p> 在苹果的封闭的体系中，所有的应用开发者、用户，都必须是他的顺民，都必须遵循他苛刻的规则。苹果，已成为“封闭”的代名词。</p></blockquote><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>额，本文有点标题党了。</p><p>但这么封闭专制的公司，不吐不快～</p><p>转载本站文章请注明作者和出处 <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。</p>]]></content>
    
    <summary type="html">
    
      Apple 正在加剧技术壁垒，Apple 对开发者不友好。
    
    </summary>
    
    
      <category term="随笔" scheme="https://tomotoes.com/blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://tomotoes.com/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Apple" scheme="https://tomotoes.com/blog/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>昨日青空</title>
    <link href="https://tomotoes.com/blog/yesterday/"/>
    <id>https://tomotoes.com/blog/yesterday/</id>
    <published>2019-12-19T07:32:33.000Z</published>
    <updated>2021-10-05T10:24:13.190Z</updated>
    
    <content type="html"><![CDATA[<p>起风了。<a id="more"></a></p><h3 id="起风了"><a href="#起风了" class="headerlink" title="起风了"></a>起风了</h3><p align="center"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&amp;id=1293951677&amp;auto=0&amp;height=32"></iframe></p><p class="post">忽然 一瞬间长大</p><p class="post">就像 被时间的手 擦模糊的画</p><p class="post">我们啊 各自要去哪</p><p class="post">问题好傻 谁又能 回答</p><br><p class="post">想念从 不说话</p><p class="post">来不及的再见 多喧哗</p><p class="post">陪我看大雨落下</p><p class="post">潮湿的心 滴滴答答 带着温柔 又想起你啊</p><br><p class="post">我好想你 在起风的夜里</p><p class="post">我好想你 在人群的缝隙</p><p class="post">你听见吗 这一句喜欢你</p><p class="post">追得上你背影吗</p><p class="post">那些大喊过的名字 没完成的约定</p><p class="post">全都藏在心底 开出寂寞的花</p><p class="post">你好吗 为什么长大就要走散啊</p><br><p class="post">你现在在哪里 隔我多远距离</p><p class="post">是否勇敢飞行 有没有人爱你</p><p class="post">每当我想起你 世界突然安静</p><p class="post">你也一样吗</p><p class="post">青春有你出席 不是为了让你缺席</p><p class="post">好想沿着回忆 狂奔向你 昨日的青空</p><p class="post">随少年 挥手消失在 人海之中</p><br><p class="post">你在吗 你要幸福啊</p><p class="post">我想你啊</p><br><p align="left">。</p><style>#post-content > p:nth-child(1),#post-toc,#起风了{display:none}#post-content>p,#post-content>h3{text-align:center;border-bottom:none}.post-count-custom{display:none}#post-content>h3{margin-bottom:15px;margin-top:20px;border-bottom:dashed #efefef 5px;}.post {line-height:180% !important;font-size:105%;letter-spacing:4px;border-radius:20px;text-shadow: rgb(158, 158, 158) 0px 0px 1px;color:hsl(250,13%,30%);padding:0 20px;transition:all .3s ease-in;}.post:hover{transform:translateY(-1px);transition:all 0.2s;}@media screen and (max-width:760px){.post{letter-spacing: 1px;}}</style>  ]]></content>
    
    <summary type="html">
    
      起风了.
    
    </summary>
    
    
      <category term="诗词" scheme="https://tomotoes.com/blog/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="诗词" scheme="https://tomotoes.com/blog/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>[开源福利]Scrcpy-GUI</title>
    <link href="https://tomotoes.com/blog/scrcpy-gui/"/>
    <id>https://tomotoes.com/blog/scrcpy-gui/</id>
    <published>2019-08-24T13:59:37.000Z</published>
    <updated>2021-10-05T10:24:13.178Z</updated>
    
    <content type="html"><![CDATA[<p>高效控制你的 Android 设备。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="💡简介"><a href="#💡简介" class="headerlink" title="💡简介"></a>💡简介</h3><div align="center"><img width="508" height="785.6" src="https://cdn.jsdelivr.net/gh/Tomotoes/images/scrcpy-gui/Chinese.gif"></div><div align="center"><img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/scrcpy-gui/loading.gif"></div><p></p><div class="github-card" data-theme="medium" data-github="Genymobile/scrcpy"></div> 是由流行的<code>Android</code>模拟器<code>Genymotion</code>背后的团队创建的，但它本身并不是<code>Android</code>模拟器，它显示和控制通过<code>USB</code>（或通过<code>TCP/IP</code>）连接的<code>Android</code>设备，它不需要任何<code>root</code>访问权限，它适用于<code>GNU/Linux</code>、<code>Windows</code>和<code>MacOS</code>。<p></p><p><code>Scrcpy</code>的工作原理是在你的<code>Android</code>设备上运行服务器，桌面应用程序使用<code>USB</code>（或使用<code>ADB</code>隧道无线）进行通信。服务器流式传输设备屏幕的<a href="https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=en&amp;sp=nmt4&amp;tl=zh-CN&amp;u=https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC&amp;xid=25657,15700019,15700124,15700186,15700190,15700201,15700237,15700242,15700248&amp;usg=ALkJrhiJZJWaUqBVRqUviQ4IlhKQCwqp_Q" target="_blank" rel="external nofollow noopener noreferrer">H.264</a>视频。 客户端解码视频帧并显示它们。客户端捕获输入（键盘和鼠标）事件，将它们发送到服务器，服务器将它们注入设备。<a href="https://github.com/Genymobile/scrcpy/blob/master/DEVELOP.md" target="_blank" rel="external nofollow noopener noreferrer">文档</a>提供了更多详细信息。</p><p>如果你想在桌面上看到你的<code>Android</code>屏幕与应用程序或内容进行交互，记录你的手机屏幕或执行其他基本任务，那<code>Scrcpy</code>就是一个好的选择。</p><p>简而言之，<code>Scrcpy</code>是一种极好的方式，可以在你的计算机上轻松查看你的<code>Android</code>屏幕，并且可以实时与其进行交互。</p><p><em>引用自<a href="https://ywnz.com/linuxsj/5581.html" target="_blank" rel="external nofollow noopener noreferrer">云网牛站</a></em></p><h3 id="✨亮点"><a href="#✨亮点" class="headerlink" title="✨亮点"></a>✨亮点</h3><ul><li><strong>亮度</strong> （原生，仅显示设备屏幕）</li><li><strong>表演</strong> （30~60fps）</li><li><strong>质量</strong> （1920×1080 或以上）</li><li><strong>低延迟</strong> （70~100ms）</li><li><strong>启动时间短</strong> （显示第一张图像约 1 秒）</li><li><strong>非侵入性</strong> （设备上没有安装任何东西）</li><li><strong>不需要 ROOT</strong></li><li><strong>有线无线都可连接</strong></li><li><strong>可以随便调整界面和码率</strong></li><li><strong>画面随意裁剪，自带录屏（手游直播利器）</strong></li><li><strong>支持多设备同时投屏</strong></li><li><strong>利用电脑的键盘和鼠标可以控制手机</strong></li><li><strong>把 APK 文件拖拽到电脑窗口即可安装应用到手机，把普通文件拖拽到窗口即可复制到手机</strong></li><li><strong>手机电脑共享剪贴板</strong></li><li><strong>自动检测 USB 连接的应用</strong></li><li><strong>可直接添加设备的局域网 IP，达到无线控制的效果</strong></li><li><strong>将自动保存连接过的 IP 地址，下次输入时，自动提醒</strong></li><li><strong>支持设备别名</strong></li><li><strong>支持中英两种语言</strong></li><li><strong>Tray menu</strong></li><li>等等等…</li></ul><p><em>部分引用自<a href="http://zuimeia.com/app/6771/?platform=2" target="_blank" rel="external nofollow noopener noreferrer">最美应用</a></em></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="🌞要求"><a href="#🌞要求" class="headerlink" title="🌞要求"></a>🌞要求</h3><ol><li><p><code>Android 5.0</code>以上</p></li><li><p>打开 USB 调试</p><p>在 <code>开发人员选项</code> 打开 <code>USB 调试</code>，USB 连接手机</p></li><li><p>安装好<code>ADB</code> ，并配置环境变量。</p><p><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" target="_blank" rel="external nofollow noopener noreferrer">Windows</a><a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip" target="_blank" rel="external nofollow noopener noreferrer">Mac OS</a><a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip" target="_blank" rel="external nofollow noopener noreferrer">Linux</a></p><p>在任何路径下打开命令行，键入 <code>ADB</code> 有反馈。</p></li><li><p>安装好<code>scrcpy</code>，并配置环境变量</p><ul><li><p>Windows</p><p>Windows 可以使用包含所有依赖项（包含<code>adb</code>）的预构建存档：   </p><p>下载下面<code>scrcpy</code>的压缩包，里面有<code>ADB</code>文件，然后把解压后的<code>scrcpy</code>文件夹添加到环境变量，再重启电脑，就可以了。</p><ol><li><a href="https://github.com/Genymobile/scrcpy/releases/download/v1.10/scrcpy-win32-v1.10.zip" target="_blank" rel="external nofollow noopener noreferrer"><code>scrcpy-win32-v1.10.zip</code></a></li><li><a href="https://github.com/Genymobile/scrcpy/releases/download/v1.10/scrcpy-win64-v1.10.zip" target="_blank" rel="external nofollow noopener noreferrer"><code>scrcpy-win64-v1.10.zip</code></a></li></ol><p>你也可以<a href="https://github.com/Genymobile/scrcpy/blob/master/BUILD.md" target="_blank" rel="external nofollow noopener noreferrer">手动构建</a>。</p></li><li><p>Mac OS</p><p>可以使用 <a href="https://brew.sh/" target="_blank" rel="external nofollow noopener noreferrer">Homebrew</a> 来安装：</p><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span><span class="keyword">scrcpy</span></span><br></pre></td></tr></tbody></table></figure><p>如果你还没有安装<code>ADB</code>，可以使用下面的命令：</p><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>cask <span class="keyword">install </span><span class="keyword">android-platform-tools</span></span><br></pre></td></tr></tbody></table></figure><p>当然，你也可以<a href="https://github.com/Genymobile/scrcpy/blob/master/BUILD.md" target="_blank" rel="external nofollow noopener noreferrer">手动构建</a>。</p></li><li><p>Linux</p><p>你可能需要<a href="https://github.com/Genymobile/scrcpy/blob/master/BUILD.md" target="_blank" rel="external nofollow noopener noreferrer">手动构建应用程序</a>。别担心，这并不难。</p><p>此外，提供了 <a href="https://en.wikipedia.org/wiki/Snappy_(package_manager" target="_blank" rel="external nofollow noopener noreferrer">Snap</a>) 包：<a href="https://snapstats.org/snaps/scrcpy" target="_blank" rel="external nofollow noopener noreferrer"><code>scrcpy</code></a></p><p>对于 Arch Linux， 可以使用 <a href="https://wiki.archlinux.org/index.php/Arch_User_Repository" target="_blank" rel="external nofollow noopener noreferrer">AUR</a> 包：<a href="https://aur.archlinux.org/packages/scrcpy/" target="_blank" rel="external nofollow noopener noreferrer"><code>scrcpy</code></a></p><p>对于 Gentoo，可以使用 <a href="https://wiki.gentoo.org/wiki/Ebuild" target="_blank" rel="external nofollow noopener noreferrer">Ebuild</a> 包： <a href="https://github.com/maggu2810/maggu2810-overlay/tree/master/app-mobilephone/scrcpy" target="_blank" rel="external nofollow noopener noreferrer"><code>scrcpy/</code></a></p></li></ul></li></ol><h3 id="🎉安装"><a href="#🎉安装" class="headerlink" title="🎉安装"></a>🎉安装</h3><p>点击此处下载<a href="https://github.com/Tomotoes/scrcpy-gui/releases" target="_blank" rel="external nofollow noopener noreferrer">应用</a>。</p><h3 id="🎇使用"><a href="#🎇使用" class="headerlink" title="🎇使用"></a>🎇使用</h3><h4 id="连接方法"><a href="#连接方法" class="headerlink" title="连接方法"></a>连接方法</h4><h5 id="必备条件"><a href="#必备条件" class="headerlink" title="必备条件"></a>必备条件</h5><ul><li>请确保 <strong>adb , scrcpy</strong> 可正常使用</li><li>请确保手机已打开 USB 调试, 并已认证电脑调试</li></ul><h5 id="有线连接"><a href="#有线连接" class="headerlink" title="有线连接"></a>有线连接</h5><ol><li><p>请确保手机已通过数据线连接到电脑</p></li><li><p>等待软件自动检测到设备</p></li><li>选中设备，点击<code>打开选中的镜像</code></li><li>等待设备打开</li></ol><h5 id="无线连接"><a href="#无线连接" class="headerlink" title="无线连接"></a>无线连接</h5><ol><li><p>请确保手机与电脑处在同一局域网</p></li><li><p>第一次无线连接时: </p><ul><li><strong>请确保手机已通过数据线连接到电脑</strong></li><li><strong>请确保只有一个手机通过数据线连接到电脑</strong></li><li>第一次需设置端口，以后连接手机，只需要添加手机的静态 IP 即可</li></ul></li><li><p>输入手机的局域网<code>IP</code>地址（如果<code>IP</code>为<code>DHCP</code>分配，请更改为静态<code>IP</code>）</p></li><li><p>点击<code>开启无线连接</code></p></li><li><p>等待无线连接成功</p></li><li><p>选中设备，点击<code>打开选中的镜像</code></p></li><li><p>等待设备打开</p></li></ol><h3 id="🎯开发"><a href="#🎯开发" class="headerlink" title="🎯开发"></a>🎯开发</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># serve with hot reload at localhost:9080</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># build electron application for production</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># lint all JS/Vue component files in `src/`</span></span><br><span class="line">npm run lint</span><br></pre></td></tr></tbody></table></figure><h3 id="📃协议"><a href="#📃协议" class="headerlink" title="📃协议"></a>📃协议</h3><p><strong>GNU GPLv3</strong></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p></p><div class="github-card" data-theme="medium" data-github="Tomotoes/scrcpy-gui"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script><p></p><p>如果你有任何问题，欢迎提交 <code>Issues</code> 或 <code>PR</code>！</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      Scrcpy-GUI, 展示并控制你的 Android 设备
    
    </summary>
    
    
      <category term="开源" scheme="https://tomotoes.com/blog/categories/%E5%BC%80%E6%BA%90/"/>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="开源" scheme="https://tomotoes.com/blog/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Go 开发中的十大常见陷阱[译]</title>
    <link href="https://tomotoes.com/blog/the-top-10-most-common-mistakes-ive-seen-in-go-projects/"/>
    <id>https://tomotoes.com/blog/the-top-10-most-common-mistakes-ive-seen-in-go-projects/</id>
    <published>2019-08-17T09:26:05.000Z</published>
    <updated>2021-10-05T10:24:13.146Z</updated>
    
    <content type="html"><![CDATA[<p>Golang 中要注意的陷阱和常见错误。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原文: <a href="https://itnext.io/the-top-10-most-common-mistakes-ive-seen-in-go-projects-4b79d4f6cd65#e9ba" target="_blank" rel="external nofollow noopener noreferrer">The Top 10 Most Common Mistakes I’ve Seen in Go Projects</a></p><p>作者: <a href="https://itnext.io/@teivah?source=post_page-----4b79d4f6cd65----------------------" target="_blank" rel="external nofollow noopener noreferrer">Teiva Harsanyi</a></p><p>翻译许可:</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/3-min.gif" alt="image-20210118234116954" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/the-top-10-most-common-mistakes-ive-seen-in-go-projects/permit.png"> </div> <div class="image-caption">image-20210118234116954</div> </figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/2-min.gif" alt="img" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/the-top-10-most-common-mistakes-ive-seen-in-go-projects/1.jpeg"> </div> <div class="image-caption">img</div> </figure><p>我在 Go 开发中遇到的十大常见错误。<em>顺序无关紧要。</em></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="未知的枚举值"><a href="#未知的枚举值" class="headerlink" title="未知的枚举值"></a>未知的枚举值</h3><p>让我们看一个简单的例子:</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Status <span class="keyword">uint32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  StatusOpen Status = <span class="literal">iota</span></span><br><span class="line">  StatusClosed</span><br><span class="line">  StatusUnknown</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>在这里，我们使用 iota 创建了一个枚举，其结果如下：</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">StatusOpen</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">StatusClosed</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">StatusUnknown</span> = <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p>现在，让我们假设这个<code>Status</code>类型是 JSON 请求的一部分，将被<code>marshalled/unmarshalled</code>。 </p><p>我们设计了以下结构：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> {</span><br><span class="line">  ID        <span class="keyword">int</span>    <span class="string">`json:"Id"`</span></span><br><span class="line">  Timestamp <span class="keyword">int</span>    <span class="string">`json:"Timestamp"`</span></span><br><span class="line">  Status    Status <span class="string">`json:"Status"`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后，接收这样的请求：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"Id"</span>: <span class="number">1234</span>,</span><br><span class="line">  <span class="attr">"Timestamp"</span>: <span class="number">1563362390</span>,</span><br><span class="line">  <span class="attr">"Status"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里没有什么特别的，状态会被<code>unmarshalled</code>为<code>StatusOpen</code>。</p><p>然而，让我们以另一个未设置状态值的请求为例:</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"Id"</span>: <span class="number">1235</span>,</span><br><span class="line">  <span class="attr">"Timestamp"</span>: <span class="number">1563362390</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这种情况下，请求结构的<code>Status</code>字段将初始化为它的零值(对于<code>uint32</code>类型:0)，因此结果将是<code>StatusOpen</code>而不是<code>StatusUnknown</code>。</p><p>那么最好的做法是<strong>将枚举的未知值设置为 0</strong>：  </p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Status <span class="keyword">uint32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  StatusUnknown Status = <span class="literal">iota</span></span><br><span class="line">  StatusOpen</span><br><span class="line">  StatusClosed</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>如果状态不是 JSON 请求的一部分，它将被初始化为<code>StatusUnknown</code>，这才符合我们的期望。</p><h3 id="自动优化的基准测试"><a href="#自动优化的基准测试" class="headerlink" title="自动优化的基准测试"></a>自动优化的基准测试</h3><p>基准测试需要考虑很多因素的,才能得到正确的测试结果。</p><p>一个常见的错误是<strong>测试代码无形间被编译器所优化</strong>。 </p><p>下面是<code>teivah/bitvector</code>库中的一个例子:</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">(n <span class="keyword">uint64</span>, i, j <span class="keyword">uint8</span>)</span> <span class="title">uint64</span></span> {</span><br><span class="line">  <span class="keyword">return</span> (math.MaxUint64&lt;&lt;j | ((<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span>)) &amp; n</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此函数清除给定范围内的位。为了测试它，可能如下这样做:</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkWrong</span><span class="params">(b *testing.B)</span></span> {</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ {</span><br><span class="line">    clear(<span class="number">1221892080809121</span>, <span class="number">10</span>, <span class="number">63</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个基准测试中，<code>clear</code>不调用任何其他函数，没有<strong>副作用</strong>。所以编译器将会把<code>clear</code>优化成内联函数。一旦内联，将会导致不准确的测试结果。</p><p>一个解决方案是<strong>将函数结果设置为全局变量</strong>，如下所示：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkCorrect</span><span class="params">(b *testing.B)</span></span> {</span><br><span class="line">  <span class="keyword">var</span> r <span class="keyword">uint64</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ {</span><br><span class="line">    r = clear(<span class="number">1221892080809121</span>, <span class="number">10</span>, <span class="number">63</span>)</span><br><span class="line">  }</span><br><span class="line">  result = r</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如此一来，编译器将不知道<code>clear</code>是否会产生副作用。</p><p>因此，不会将<code>clear</code>优化成内联函数。</p><h4 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h4><p><a href="https://dave.cheney.net/high-performance-go-workshop/dotgo-paris.html?source=post_page-----4b79d4f6cd65----------------------#watch_out_for_compiler_optimisations" target="_blank" rel="external nofollow noopener noreferrer">High Performance Go Workshop</a></p><h3 id="被转移的指针"><a href="#被转移的指针" class="headerlink" title="被转移的指针"></a>被转移的指针</h3><p>在函数调用中，按值传递的变量将创建该变量的副本，而通过指针传递只会传递该变量的内存地址。</p><p>那么，指针传递会比按值传递更快吗？请看一下<a href="https://gist.github.com/teivah/a32a8e9039314a48f03538f3f9535537" target="_blank" rel="external nofollow noopener noreferrer">这个例子</a>。</p><p>我在本地环境上模拟了<code>0.3KB</code>的数据，然后分别测试了按值传递和指针传递的速度。</p><p>结果显示：按值传递比指针传递快 4 倍以上，这很违背直觉。</p><p>测试结果与 Go 中如何管理内存有关。我虽然不能像<a href="https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html" target="_blank" rel="external nofollow noopener noreferrer">威廉·肯尼迪</a>那样出色地解释它，但让我试着总结一下。</p><p>译者注开始</p><p>作者没有说明 Go 内存的基本存储方式，译者补充一下。</p><ol><li><p>下面是来自 Go 语言圣经的介绍：</p><p>一个 goroutine 会以一个很小的栈开始其生命周期，一般只需要 2KB。</p><p>一个 goroutine 的栈，和操作系统线程一样，会保存其活跃或挂起的函数调用的本地变量，但是和 OS 线程不太一样的是，一个 goroutine 的栈大小并不是固定的；栈的大小会根据需要动态地伸缩。</p><p>而 goroutine 的栈的最大值有 1GB，比传统的固定大小的线程栈要大得多，尽管一般情况下，大多 goroutine 都不需要这么大的栈。</p></li><li><p>译者自己的理解：</p><ul><li><p>栈：每个 Goruntine 开始的时候都有独立的栈来存储数据。（<em>Goruntine 分为主 Goruntine 和其他 Goruntine，差异就在于起始栈的大小</em>）</p></li><li><p>堆: 而需要被多个 Goruntine 共享的数据，存储在堆上面。</p></li></ul></li></ol><p>译者注结束</p><p>众所周知，可以在<strong>堆</strong>或<strong>栈</strong>上分配变量。</p><ul><li>栈储存当前<code>Goroutine</code>的正在使用的变量（译者注: 可理解为局部变量）。一旦函数返回，变量就会从栈中弹出。</li><li>堆储存<strong>共享变量</strong>（全局变量等）。</li></ul><p>让我们看一个简单的例子，返回单一的值：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFooValue</span><span class="params">()</span> <span class="title">foo</span></span> {</span><br><span class="line">  <span class="keyword">var</span> result foo</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当调用函数时，<code>result</code>变量会在当前 Goruntine 栈创建，当函数返回时，会传递给接收者一份值的拷贝。而<code>result</code>变量自身会从当前 Goruntine 栈出栈。</p><p>虽然它仍然存在于内存中，但它不能再被访问。并且还有可能被其他数据变量所擦除。</p><p>现在，在看一个返回指针的例子：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFooPointer</span><span class="params">()</span> *<span class="title">foo</span></span> {</span><br><span class="line">  <span class="keyword">var</span> result foo</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">  <span class="keyword">return</span> &amp;result</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当调用函数时，<code>result</code>变量会在当前 Goruntine 栈创建，当函数返回时，会传递给接收者一个指针（变量地址的副本）。如果<code>result</code>变量从当前 Goruntine 栈出栈，则接收者将无法再访问它。（译者注：此情况称为“内存逃逸”）</p><p>在这个场景中，Go 编译器将把<code>result</code>变量<strong>转义</strong>到一个可以共享变量的地方:<strong>堆</strong>。</p><p>不过，传递指针是另一种情况。例如：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  {</span><br><span class="line">  p := &amp;foo{}</span><br><span class="line">  f(p)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>因为我们在同一个 Goroutine 中调用<code>f</code>，所以<code>p</code>变量不需要转义。它只是被推送到堆栈，子功能可以访问它。（译者注：不需要其他 Goruntine 共享的变量就存储在栈上即可）</p><p>比如，<code>io.Reader</code>中的<code>Read</code>方法签名，接收切片参数，将内容读取到切片中，返回读取的字节数。而不是返回读取后的切片。（译者注：如果返回切片，会将切片转义到堆中。）</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> {</span><br><span class="line">  Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>为什么栈如此之快？ 主要有两个原因：</p><ol><li><strong>堆栈不需要垃圾收集器。</strong>就像我们说的，变量一旦创建就会被入栈，一旦函数返回就会从出栈。不需要一个复杂的进程来回收未使用的变量。</li><li><strong>储存变量不需要考虑同步。</strong>堆属于一个 Goroutine，因此与在堆上存储变量相比，存储变量不需要同步。</li></ol><p>总之，当创建一个函数时，我们的<strong>默认行为应该是使用值</strong>而不是指针。只有在我们<strong>想要共享变量时才应使用指针。</strong></p><p>如果我们遇到性能问题，可以使用<code>go build -gcflags "-m -m"</code>命令，来显示编译器将变量转义到堆的具体操作。</p><p>再次重申，对于大多数日常用例来说，值传递是最合适的。</p><h4 id="延伸阅读-1"><a href="#延伸阅读-1" class="headerlink" title="延伸阅读"></a>延伸阅读</h4><ol><li><p><a href="https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html?source=post_page-----4b79d4f6cd65----------------------" target="_blank" rel="external nofollow noopener noreferrer">Language Mechanics On Stacks And Pointers</a></p></li><li><p><a href="https://www.youtube.com/watch?v=ZMZpH4yT7M0" target="_blank" rel="external nofollow noopener noreferrer">Understanding Allocations: the Stack and the Heap - GopherCon SG 2019</a></p></li></ol><h3 id="出乎意料的-break"><a href="#出乎意料的-break" class="headerlink" title="出乎意料的 break"></a>出乎意料的 break</h3><p>如果<code>f</code>返回 true，下面的例子中会发生什么？</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> {</span><br><span class="line">  <span class="keyword">switch</span> f() {</span><br><span class="line">  <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们将调用<code>break</code>语句。然而，将会<code>break</code>出<code>switch</code>语句，而不是<code>for</code>循环。</p><p>同样的问题：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> {</span><br><span class="line">  <span class="keyword">select</span> {</span><br><span class="line">  <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">  <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>break</code>与<code>select</code>语句有关，与<code>for</code>循环无关。</p><p><code>break</code>出<code>for/switch 或 for/select</code>的一种解决方案是<strong>使用带标签的 break</strong>，如下所示：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loop:</span><br><span class="line">  <span class="keyword">for</span> {</span><br><span class="line">    <span class="keyword">select</span> {</span><br><span class="line">    <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">      <span class="keyword">break</span> loop</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h3 id="缺失上下文的错误"><a href="#缺失上下文的错误" class="headerlink" title="缺失上下文的错误"></a>缺失上下文的错误</h3><p>Go 在错误处理方面仍然有待提高，以至于现在错误处理是 Go2 中最令人期待的需求。</p><p>当前的标准库(在 Go 1.13 之前)只提供<code>error</code>的构造函数，自然而然就会缺失其他信息。</p><p>让我们看一下<a href="https://github.com/pkg/errors" target="_blank" rel="external nofollow noopener noreferrer">pkg/errors</a>库中错误处理的思想：</p><p><em>An error should be handled only</em> <strong>once</strong>. Logging an error <strong>is</strong> <em>handling an error. So an error should</em> <strong>either</strong> <em>be logged or propagated.</em></p><p>（译：错误应该只处理一次。记录<em>log</em> 错误就是在处理错误。所以，错误应该记录或者传播）</p><p>对于当前的标准库，很难做到这一点，因为我们希望向错误中添加一些上下文信息，使其具有层次结构。</p><p>例如: 所期望的<code>REST</code>调用导致数据库问题的示例：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unable <span class="keyword">to</span><span class="built_in"> server </span>HTTP POST request <span class="keyword">for</span><span class="built_in"> customer </span>1234</span><br><span class="line"> |_ unable <span class="keyword">to</span> insert<span class="built_in"> customer </span>contract abcd</span><br><span class="line">     |_ unable <span class="keyword">to</span> commit transaction</span><br></pre></td></tr></tbody></table></figure><p>如果我们使用<code>pkg/errors</code>，可以这样做：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postHandler</span><span class="params">(customer Customer)</span> <span class="title">Status</span></span> {</span><br><span class="line">  err := insert(customer.Contract)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    log.WithError(err).Errorf(<span class="string">"unable to server HTTP POST request for customer %s"</span>, customer.ID)</span><br><span class="line">    <span class="keyword">return</span> Status{ok: <span class="literal">false</span>}</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> Status{ok: <span class="literal">true</span>}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(contract Contract)</span> <span class="title">error</span></span> {</span><br><span class="line">  err := dbQuery(contract)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    <span class="keyword">return</span> errors.Wrapf(err, <span class="string">"unable to insert customer contract %s"</span>, contract.ID)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dbQuery</span><span class="params">(contract Contract)</span> <span class="title">error</span></span> {</span><br><span class="line">  <span class="comment">// Do something then fail</span></span><br><span class="line">  <span class="keyword">return</span> errors.New(<span class="string">"unable to commit transaction"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果不是由外部库返回的初始<code>error</code>可以使用<code>error.New</code>创建。中间层<code>insert</code>对此错误添加更多上下文信息。最终通过<code>log</code>错误来处理错误。每个级别要么返回错误，要么处理错误。</p><p>我们可能还想检查错误原因来判读是否应该重试。假设我们有一个来自外部库的<code>db</code>包来处理数据库访问。 该库可能会返回一个名为<code>db.DBError</code>的临时错误。要确定是否需要重试，我们必须检查错误原因：</p><p>使用<code>pkg/errors</code>中提供的<code>errors.Cause</code>可以判断错误原因。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postHandler</span><span class="params">(customer Customer)</span> <span class="title">Status</span></span> {</span><br><span class="line">  err := insert(customer.Contract)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    <span class="keyword">switch</span> errors.Cause(err).(<span class="keyword">type</span>) {</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      log.WithError(err).Errorf(<span class="string">"unable to server HTTP POST request for customer %s"</span>, customer.ID)</span><br><span class="line">      <span class="keyword">return</span> Status{ok: <span class="literal">false</span>}</span><br><span class="line">    <span class="keyword">case</span> *db.DBError:</span><br><span class="line">      <span class="keyword">return</span> retry(customer)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> Status{ok: <span class="literal">true</span>}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(contract Contract)</span> <span class="title">error</span></span> {</span><br><span class="line">  err := db.dbQuery(contract)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    <span class="keyword">return</span> errors.Wrapf(err, <span class="string">"unable to insert customer contract %s"</span>, contract.ID)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我见过的一个常见错误是部分使用<code>pkg/errors</code>。 例如，通过这种方式检查错误：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> err.(<span class="keyword">type</span>) {</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  log.WithError(err).Errorf(<span class="string">"unable to server HTTP POST request for customer %s"</span>, customer.ID)</span><br><span class="line">  <span class="keyword">return</span> Status{ok: <span class="literal">false</span>}</span><br><span class="line"><span class="keyword">case</span> *db.DBError:</span><br><span class="line">  <span class="keyword">return</span> retry(customer)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在此示例中，如果<code>db.DBError</code>被<code>wrapped</code>，它将永远不会执行<code>retry</code>。</p><h4 id="延伸阅读-2"><a href="#延伸阅读-2" class="headerlink" title="延伸阅读"></a>延伸阅读</h4><p><a href="https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully?source=post_page-----4b79d4f6cd65----------------------" target="_blank" rel="external nofollow noopener noreferrer">Don’t just check errors, handle them gracefully</a></p><h3 id="正在扩容的切片"><a href="#正在扩容的切片" class="headerlink" title="正在扩容的切片"></a>正在扩容的切片</h3><p>有时，我们知道切片的最终长度。假设我们想把<code>Foo</code>切片转换成<code>Bar</code>切片，这意味着这两个切片的长度是一样的。</p><p>我经常看到切片以下面的方式初始化：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bars []Bar</span><br><span class="line">bars := <span class="built_in">make</span>([]Bar, <span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p>切片不是一个神奇的数据结构，如果没有更多可用空间，它会进行双倍扩容。在这种情况下，会自动创建一个切片(容量更大)，并复制其中的元素。</p><p>如果想容纳上千个元素，想象一下，我们需要扩容多少次。虽然插入的时间复杂度是<code>O(1)</code>，但它仍会对性能有所影响。</p><p>因此，如果我们知道最终长度，我们可以:</p><ul><li><p>用预定义的长度初始化它</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(foos []Foo)</span> []<span class="title">Bar</span></span> {</span><br><span class="line">  bars := <span class="built_in">make</span>([]Bar, <span class="built_in">len</span>(foos))</span><br><span class="line">  <span class="keyword">for</span> i, foo := <span class="keyword">range</span> foos {</span><br><span class="line">    bars[i] = fooToBar(foo)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> bars</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>或者使用长度 0 和预定义容量初始化它：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(foos []Foo)</span> []<span class="title">Bar</span></span> {</span><br><span class="line">  bars := <span class="built_in">make</span>([]Bar, <span class="number">0</span>, <span class="built_in">len</span>(foos))</span><br><span class="line">  <span class="keyword">for</span> _, foo := <span class="keyword">range</span> foos {</span><br><span class="line">    bars = <span class="built_in">append</span>(bars, fooToBar(foo))</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> bars</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="无规范的-Context"><a href="#无规范的-Context" class="headerlink" title="无规范的 Context"></a>无规范的 Context</h3><p><code>context.Context</code> 经常被误用。 根据官方文档:</p><blockquote><p><em>A Context carries a deadline, a cancelation signal, and other values across API boundaries.</em></p></blockquote><p>这种描述非常笼统，以至于让一些人对使用它感到困惑。</p><p>让我们试着详细描述一下。<code>Context</code>可以包含:</p><ul><li>A <strong>deadline</strong>（最后期限）。它意味着到期之后（250ms 之后或者一个指定的日期），我们必须停止正在进行的操作（<code>I/O</code>请求，等待的<code>channel</code>输入，等等）。</li><li>A <strong>cancelation signal</strong>（取消信号）。一旦我们收到信号，我们必须停止正在进行的活动。例如，假设我们收到两个请求：一个用来插入一些数据，另一个用来取消第一个请求。这可以通过在第一个调用中使用<code>cancelable</code>上下文来实现，一旦我们获得第二个请求，这个上下文就会被取消。</li><li>A list of key/value （键/值列表）均基于<code>interface{}</code>类型。</li></ul><p>值得一提的是，<strong>Context 是可以组合的</strong>。例如，我们可以继承一个带有截止日期和键/值列表的<code>Context</code>。此外，多个<code>goroutines</code>可以共享相同的<code>Context</code>，取消一个<code>Context</code>可能会停止多个活动。</p><p>回到我们的主题，举一个我经历的例子。</p><p>一个基于<a href="https://github.com/urfave/cli" target="_blank" rel="external nofollow noopener noreferrer">urfave/cli</a> （<em>如果您不知道，这是一个很好的库，可以在 Go 中创建命令行应用程序</em>）创建的 Go 应用。一旦开始，程序就会继承父级的<code>Context</code>。这意味着当应用程序停止时，将使用此<code>Context</code>发送取消信号。</p><p>我经历的是，这个<code>Context</code>是在调用<code>gRPC</code>时直接传递的，这不是我想做的。相反，我想当应用程序停止时或无操作 100 毫秒后，发送取消请求。</p><p>为此，可以简单地创建一个组合的<code>Context</code>。如果<code>parent</code>是父级的<code>Context</code>的名称（<em>由 urfave/cli 创建</em>），那么组合操作如下：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx, cancel := context.WithTimeout(parent, <span class="number">100</span> * time.Millisecond)</span><br><span class="line">response, err := grpcClient.Send(ctx, request)</span><br></pre></td></tr></tbody></table></figure><p><code>Context</code>并不复杂，在我看来，可谓是 Go 的最佳特性之一。</p><h4 id="延伸阅读-3"><a href="#延伸阅读-3" class="headerlink" title="延伸阅读"></a>延伸阅读</h4><ol><li><a href="http://p.agnihotry.com/post/understanding_the_context_package_in_golang/?source=post_page-----4b79d4f6cd65----------------------" target="_blank" rel="external nofollow noopener noreferrer">Understanding the context package in golang</a></li><li><a href="https://grpc.io/blog/deadlines/?source=post_page-----4b79d4f6cd65----------------------" target="_blank" rel="external nofollow noopener noreferrer">gRPC and Deadlines</a></li></ol><h3 id="被遗忘的-race-参数"><a href="#被遗忘的-race-参数" class="headerlink" title="被遗忘的-race 参数"></a>被遗忘的-race 参数</h3><p>我经常看到的一个错误是在没有<code>-race</code>参数的情况下测试 Go 应用程序。</p><p>正如<a href="https://blog.acolyer.org/2019/05/17/understanding-real-world-concurrency-bugs-in-go/" target="_blank" rel="external nofollow noopener noreferrer">本报告</a>所述，虽然 Go“旨在使并发编程更容易，更不容易出错”，但我们仍然遇到很多并发问题。</p><p>显然，Go 竞争检测器无法解决每一个并发问题。但是，它仍有很大价值，我们应该在测试应用程序时始终启用它。</p><h4 id="延伸阅读-4"><a href="#延伸阅读-4" class="headerlink" title="延伸阅读"></a>延伸阅读</h4><p><a href="https://medium.com/@val_deleplace/does-the-race-detector-catch-all-data-races-1afed51d57fb" target="_blank" rel="external nofollow noopener noreferrer">Does the Go race detector catch all data race bugs?</a></p><h3 id="更完美的封装"><a href="#更完美的封装" class="headerlink" title="更完美的封装"></a>更完美的封装</h3><p>另一个常见错误是将文件名传递给函数。</p><p>假设我们实现一个函数来计算文件中的空行数。最初的实现是这样的：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">(filename <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> {</span><br><span class="line">  file, err := os.Open(filename)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>, errors.Wrapf(err, <span class="string">"unable to open %s"</span>, filename)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">  scanner := bufio.NewScanner(file)</span><br><span class="line">  count := <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> scanner.Scan() {</span><br><span class="line">    <span class="keyword">if</span> scanner.Text() == <span class="string">""</span> {</span><br><span class="line">      count++</span><br><span class="line">    }</span><br><span class="line">  } </span><br><span class="line">  <span class="keyword">return</span> count, <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>filename</code> 作为给定的参数，然后我们打开该文件，再实现读空白行的逻辑，嗯，没有问题。</p><p>假设我们希望在此函数之上实现单元测试，并使用普通文件，空文件，具有不同编码类型的文件等进行测试。代码很容易变得非常难以维护。</p><p>此外，如果我们想对于<code>HTTP Body</code>实现相同的逻辑，将不得不为此创建另一个函数。</p><p>Go 设计了两个很棒的接口：<code>io.Reader</code> 和 <code>io.Writer</code> (译者注：常见 IO 命令行，文件，网络等)</p><p>所以可以传递一个抽象数据源的<code>io.Reader</code>，而不是传递文件名。</p><p>仔细想一想统计的只是文件吗？一个 HTTP 正文？字节缓冲区？</p><p>答案并不重要，重要的是无论<code>Reader</code>读取的是什么类型的数据，我们都会使用相同的<code>Read</code>方法。</p><p>在我们的例子中，甚至可以缓冲输入以逐行读取它（使用<code>bufio.Reader</code>及其<code>ReadLine</code>方法）：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">(reader *bufio.Reader)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> {</span><br><span class="line">  count := <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> {</span><br><span class="line">    line, _, err := reader.ReadLine()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">      <span class="keyword">switch</span> err {</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, errors.Wrapf(err, <span class="string">"unable to read"</span>)</span><br><span class="line">      <span class="keyword">case</span> io.EOF:</span><br><span class="line">        <span class="keyword">return</span> count, <span class="literal">nil</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">0</span> {</span><br><span class="line">      count++</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>打开文件的逻辑现在交给调用<code>count</code>方：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">  <span class="keyword">return</span> errors.Wrapf(err, <span class="string">"unable to open %s"</span>, filename)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">count, err := count(bufio.NewReader(file))</span><br></pre></td></tr></tbody></table></figure><p>无论数据源如何，都可以调用<code>count</code>。并且，还将促进单元测试，因为可以从字符串创建一个<code>bufio.Reader</code>，这大大提高了效率。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count, err := count(bufio.NewReader(strings.NewReader(<span class="string">"input"</span>)))</span><br></pre></td></tr></tbody></table></figure><h3 id="Goruntines-与循环变量"><a href="#Goruntines-与循环变量" class="headerlink" title="Goruntines 与循环变量"></a>Goruntines 与循环变量</h3><p>我见过的最后一个常见错误是使用 Goroutines 和循环变量。</p><p>以下示例将会输出什么？</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ints := []<span class="keyword">int</span>{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> ints {</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, i)</span><br><span class="line">  }()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>乱序输出 <code>1 2 3</code> ？答错了。</p><p>在这个例子中，每个 Goroutine 共享相同的变量实例，因此最有可能输出<code>3 3 3</code>。</p><p>有两种解决方案可以解决这个问题。</p><p>第一种是将<code>i</code>变量的值传递给闭包（内部函数）：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ints := []<span class="keyword">int</span>{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> ints {</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, i)</span><br><span class="line">  }(i)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二种是在<code>for</code>循环范围内创建另一个变量：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ints := []<span class="keyword">int</span>{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> ints {</span><br><span class="line">  i := i</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, i)</span><br><span class="line">  }()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>i := i</code>可能看起来有点奇怪，但它完全有效。</p><p>因为处于循环中意味着处于另一个作用域内，所以<code>i := i</code>相当于创建了另一个名为<code>i</code>的变量实例。</p><p>当然，为了便于阅读，最好使用不同的变量名称。</p><h4 id="延伸阅读-5"><a href="#延伸阅读-5" class="headerlink" title="延伸阅读"></a>延伸阅读</h4><p><a href="https://github.com/golang/go/wiki/CommonMistakes?source=post_page-----4b79d4f6cd65----------------------#using-goroutines-on-loop-iterator-variables" target="_blank" rel="external nofollow noopener noreferrer">Using goroutines on loop iterator variables</a></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>你还想提到其他常见的错误吗？请随意分享，继续讨论；)</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      Go开发中的十大常见陷阱
    
    </summary>
    
    
      <category term="后端" scheme="https://tomotoes.com/blog/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="https://tomotoes.com/blog/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Go" scheme="https://tomotoes.com/blog/tags/Go/"/>
    
      <category term="译文" scheme="https://tomotoes.com/blog/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>如何成为 IDEA 键盘流</title>
    <link href="https://tomotoes.com/blog/jetbrains-ide-efficient-shortcuts/"/>
    <id>https://tomotoes.com/blog/jetbrains-ide-efficient-shortcuts/</id>
    <published>2019-05-28T02:25:44.000Z</published>
    <updated>2021-10-05T10:24:13.178Z</updated>
    
    <content type="html"><![CDATA[<p>好了，你完全可以丢掉鼠标了。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>常言道：“工欲善其事必先利其器”。</p><p>如何高效编程，成为 JetBrainsIDE 键盘流呢？</p><p>当然是熟悉快捷键再加上各种插件啦~</p></blockquote><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/1-min.gif" alt="JetBrains" title="IDEA" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/jetbrains-ide-efficient-shortcuts/jetbrains.png"> </div> <div class="image-caption">IDEA</div> </figure><p>JetBrainsIDE 有默认的一套快捷键方案，不过在经过长时间的使用后，发现总有些一些快捷键令我难以接受。</p><p>遂花了一天的时间，将快捷键全部调整了一遍，并深度结合了<code>IdeaVim</code>插件，总结如下：</p><p><em>本篇文章适用于任何 JetBrains 公司出品的 IDE ，包括 PhpStorm ，WebStorm ，PyCharm ，RubyMine ，CLion 等。</em></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/2-min.gif" alt="ides" title="IDEA" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/jetbrains-ide-efficient-shortcuts/ides.png"> </div> <div class="image-caption">IDEA</div> </figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><h4 id="多光标"><a href="#多光标" class="headerlink" title="多光标"></a>多光标</h4><ol><li><p>添加或移除光标</p><blockquote><p>Ctrl + 左键</p></blockquote></li><li><p>拖动鼠标选中多行区域</p><blockquote><p>Shift + 左键拖动</p></blockquote></li><li><p>在上方/下方插入光标</p><blockquote><p>Ctrl + Alt + 上下键</p></blockquote></li></ol><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><ol><li><p>删除行</p><blockquote><p>Ctrl + D</p></blockquote></li><li><p>重复行或选中区域</p><blockquote><p>Ctrl + Shift + C</p></blockquote></li><li><p>连接行</p><blockquote><p>Ctrl + J</p></blockquote></li><li><p>扩展选择</p><blockquote><p>Ctrl + Shift + [/]</p></blockquote></li><li><p>切换大小写</p><blockquote><p>Ctrl + Shift + U</p></blockquote></li><li><p>移动行</p><blockquote><p>Alt + 上/下</p></blockquote></li></ol><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><ol><li><p>上移或下移</p><blockquote><p>Ctrl + 上下键</p></blockquote></li><li><p>上移或者下移并根据相对位置滚动</p><blockquote><p>Ctrl + Shift + 上下键</p></blockquote></li><li><p>开始新行</p><blockquote><p>Ctrl/Shift + Enter</p></blockquote></li><li><p>查找</p><blockquote><p>Ctrl + F</p></blockquote></li><li><p>全局查找</p><blockquote><p>Ctrl + Shift + F</p></blockquote></li><li><p>替换</p><blockquote><p>Ctrl + H</p></blockquote></li><li><p>全局替换</p><blockquote><p>Ctrl + Shift + H</p></blockquote></li><li><p>选择所有匹配项</p><blockquote><p>Ctrl + Shift + Y</p></blockquote></li><li><p>将下一个匹配项添加到选择</p><blockquote><p>Ctrl + Y</p></blockquote></li><li><p>取消选择匹配项</p><blockquote><p>Ctrl + Alt + Y</p></blockquote></li><li><p>跳转到下一个匹配项</p><blockquote><p>Ctrl + ‘</p></blockquote></li><li><p>跳转到上一个匹配项</p><blockquote><p>Ctrl + Shift + ‘</p></blockquote></li><li><p>例举最近位置</p><blockquote><p>Alt + X</p></blockquote></li><li><p>跳转到上/下一次编辑代码的位置</p><blockquote><p>Ctrl + Alt + 左右</p></blockquote></li><li><p>切换书签</p><blockquote><p>Ctrl + Shift + Q</p></blockquote></li><li><p>显示书签</p><blockquote><p>Alt + Shift + Q</p></blockquote></li><li><p>进入查找的跳转模式</p><blockquote><p>Ctrl + ;</p></blockquote></li><li><p>进入枚举的跳转模式</p><blockquote><p>Ctrl + Shift + ;</p></blockquote></li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ol><li><p>快捷文档</p><blockquote><p>Ctrl + Q</p></blockquote></li><li><p>参数信息</p><blockquote><p>Ctrl + Shift + Space</p></blockquote></li><li><p>显示实现方法的代码</p><blockquote><p>Ctrl + G</p></blockquote></li><li><p>跳转到实现方法的代码</p><blockquote><p>Ctrl + Shift + D</p></blockquote></li><li><p>查看结构体实现的所有接口</p><blockquote><p>Ctrl + I</p></blockquote></li><li><p>查看函数的所有调用者</p><blockquote><p>Ctrl + M</p></blockquote></li><li><p>为当前代码生成包裹它的复合语句(if/for)</p><blockquote><p>Ctrl + ]</p></blockquote></li><li><p>从当前复合语句中,剥离代码</p><blockquote><p>Ctrl + [</p></blockquote></li><li><p>为变量寻找一个接口去实现,并自动生成该接口中定义的所有方法的待实现模板</p><blockquote><p>Ctrl + Shift + I</p></blockquote></li><li><p>为变量寻找一个接口去实现,并自动生成该接口中定义的所有方法的待实现模板</p><blockquote><p>Ctrl + Shift + X</p></blockquote></li><li><p>为当前结构体生成构造函数</p><blockquote><p>Ctrl + Shift + X</p></blockquote></li><li><p>为当前结构体的字段生成存取器</p><blockquote><p>Ctrl + Shift + X</p></blockquote></li><li><p>为当前方法/文件/包生产测试文件</p><blockquote><p>Ctrl + Shift + X</p></blockquote></li><li><p>为当前文件生成版权</p><blockquote><p>Ctrl + Shift + X</p></blockquote></li><li><p>基本补全</p><blockquote><p>Ctrl + Shift + A</p></blockquote></li><li><p>检查代码</p><blockquote><p>Ctrl + Shift + J</p></blockquote></li><li><p>插入代码模板</p><blockquote><p>Alt + Enter</p></blockquote></li><li><p>行注释</p><blockquote><p>Ctrl + R</p></blockquote></li><li><p>块注释</p><blockquote><p>Ctrl + /</p></blockquote></li><li><p>格式化代码</p><blockquote><p>Ctrl + T</p></blockquote></li><li><p>重构(重命名,更改签名,移动,赋值,提取变量)</p><blockquote><p>Ctrl + Shift + R</p></blockquote></li><li><p>从浏览器打开文档</p><blockquote><p>F1</p></blockquote></li><li><p>展示智能提示</p><blockquote><p>Ctrl + Shift + Enter</p></blockquote></li></ol><h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><ol><li><p>运行</p><blockquote><p>F5</p></blockquote></li><li><p>调试</p><blockquote><p>Ctrl + F5</p></blockquote></li><li><p>停止</p><blockquote><p>F4</p></blockquote></li><li><p>在调试中运行到光标处</p><blockquote><p>Shift + F5</p></blockquote></li><li><p>在调试中强制运行到光标处</p><blockquote><p>Ctrl + Shift + F5</p></blockquote></li><li><p>切换断点</p><blockquote><p>Alt + D</p></blockquote></li><li><p>调试窗口</p><blockquote><p>F6</p></blockquote></li></ol><h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><ol><li><p>新建文件</p><blockquote><p>Ctrl + N</p></blockquote></li><li><p>新建目录</p><blockquote><p>Ctrl + Shift + N</p></blockquote></li><li><p>打开项目</p><blockquote><p>Ctrl + O</p></blockquote></li><li><p>保存全部</p><blockquote><p>Ctrl + S</p></blockquote></li><li><p>最近文件</p><blockquote><p>Ctrl + E</p></blockquote></li><li><p>在资源管理器中打开项目</p><blockquote><p>Alt + R</p></blockquote></li></ol><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><ol><li><p>关闭标签</p><blockquote><p>Ctrl + W</p></blockquote></li><li><p>关闭所有标签</p><blockquote><p>Ctrl + Shift + W</p></blockquote></li><li><p>重新打开关闭的标签</p><blockquote><p>Ctrl + Shift + T</p></blockquote></li><li><p>移动标签</p><blockquote><p>Alt + 左右 / </p></blockquote></li><li><p>拆分窗口</p><blockquote><p>Ctrl + \</p></blockquote></li><li><p>更改拆分方向</p><blockquote><p>Alt + \</p></blockquote></li><li><p>取消拆分</p><blockquote><p>Ctrl + Shift + \</p></blockquote></li><li><p>转到下一个/上一个拆分窗口</p><blockquote><p>Ctrl + Alt + [/]</p></blockquote></li></ol><h4 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h4><ol><li><p>折叠当前代码块</p><blockquote><p>Ctrl + -</p></blockquote></li><li><p>展开当前代码块</p><blockquote><p>Ctrl + =</p></blockquote></li><li><p>递归折叠代码块</p><blockquote><p>Ctrl + Alt + -</p></blockquote></li><li><p>递归展开代码块</p><blockquote><p>Ctrl + Alt + =</p></blockquote></li><li><p>折叠所有代码块</p><blockquote><p>Ctrl + Shift + -</p></blockquote></li><li><p>展开所有代码块</p><blockquote><p>Ctrl + Shift + =</p></blockquote></li></ol><h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><ol><li><p>设置</p><blockquote><p>Ctrl + Shift + S</p></blockquote></li><li><p>重启</p><blockquote><p>Ctrl + Shift + M</p></blockquote></li><li><p>全屏</p><blockquote><p>F11</p></blockquote></li><li><p>关闭其他窗口</p><blockquote><p>Ctrl + Shift + B</p></blockquote></li><li><p>关闭活动窗口</p><blockquote><p>Ctrl + P</p></blockquote></li><li><p>查找帮助</p><blockquote><p>Ctrl + Shift + A</p></blockquote></li><li><p>消息日志</p><blockquote><p>Ctrl + Shift + L</p></blockquote></li><li><p>项目管理</p><blockquote><p>Ctrl + Shift + E</p></blockquote></li><li><p>文件大纲</p><blockquote><p>Ctrl + Shift + P</p></blockquote></li><li><p>终端</p><blockquote><p>Alt + Q</p></blockquote></li><li><p>重命名</p><blockquote><p>F2</p></blockquote></li><li><p>Search Everywhere</p><blockquote><p>Shift + Shift</p></blockquote><p>键入 Tab 切换子面板</p></li><li><p>Favorites</p><blockquote><p>Ctrl + K</p></blockquote></li><li><p>Hierachy</p><blockquote><p>Ctrl + Shift + O</p></blockquote></li><li><p>TODO</p><blockquote><p>Ctrl + L</p></blockquote></li><li><p>版本控制窗口</p><blockquote><p>Ctrl + Shift + G</p></blockquote></li><li><p>调试窗口</p><blockquote><p>F6</p></blockquote></li><li><p>调整字体大小</p><blockquote><p>Ctrl + 滚轮</p></blockquote></li><li><p>重置字体大小</p><blockquote><p>Ctrl + 0</p></blockquote></li></ol><h3 id="IdeaVim"><a href="#IdeaVim" class="headerlink" title="IdeaVim"></a>IdeaVim</h3><ol><li><p>切换开关</p><blockquote><p>Alt + J</p></blockquote></li><li><p>映射为 ESC 的键</p><blockquote><p>jj</p></blockquote></li><li><p>修改原始 Vim 的映射</p><ul><li><p>行首，行尾</p><blockquote><p>H，L</p></blockquote></li><li><p>重做</p><blockquote><p>U</p></blockquote></li></ul></li><li><p>Actions</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">键</span><span class="string">动作</span></span><br><span class="line"><span class="attr">gd</span> <span class="string">GotoDeclaration</span></span><br><span class="line"><span class="attr">ga</span> <span class="string">GotoAction</span></span><br><span class="line"><span class="attr">gt</span> <span class="string">GotoClass</span></span><br><span class="line"><span class="attr">gs</span> <span class="string">GotoSymbol</span></span><br><span class="line"><span class="attr">gf</span> <span class="string">GotoFile</span></span><br><span class="line"><span class="attr">Space</span> <span class="string">+ v + s重载配置文件</span></span><br><span class="line"><span class="attr">Space</span> <span class="string">+ ;AceJump 模式</span></span><br><span class="line"><span class="attr">Alt</span> <span class="string">+ h/l上/下一个标签</span></span><br><span class="line"><span class="attr">Alt</span> <span class="string">+ j/k前进/后退</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><h4 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h4><ol><li><p>克隆我下面的<code>dotfiles</code>仓库 </p><div class="github-card" data-theme="default" data-github="Tomotoes/dotfiles"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script><p></p></li><li><p>找到 <code>JetBrainsIDE.zip</code></p></li><li><p>在 你使用的 JetBrains 家族的 IDE 中导入设置</p></li><li><p>选择快捷键进行导入</p></li></ol><h4 id="IdeaVim-1"><a href="#IdeaVim-1" class="headerlink" title="IdeaVim"></a>IdeaVim</h4><p>如果你还不熟悉 Vim，可以先看我的这两篇文章：</p><ul><li><p><a href="https://tomotoes.com/blog/order-of-vim-cultivation-cheats/">Vim 修炼秘籍之命令篇</a></p></li><li><p><a href="https://tomotoes.com/blog/grammar-of-vim-cultivation-cheats/">Vim 修炼秘籍之语法篇</a></p></li></ul><p>安装步骤如下：</p><ol><li>安装插件，键入关键字<code>ideaVim</code>搜索</li><li>在 ~ 目录下，创建<code>.ideavimrc</code></li><li>复制以下内容到<code>.ideavimrc</code>文件</li></ol><p>个人的<code>IdeaVim</code> 配置文件：</p><p><a id="codeHide" class="alone button button-3d button-primary button-rounded" onclick="$('#sourceCode').slideToggle('slow')">点击显/隐源文件</a></p><div id="sourceCode" style="display:none;padding-top:0.5em;"><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mapleader=<span class="string">' '</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> nowrap</span><br><span class="line"><span class="keyword">set</span> sidescroll=<span class="number">40</span></span><br><span class="line"><span class="keyword">set</span> noback</span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"><span class="keyword">set</span> incsearch</span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"><span class="keyword">set</span> smartcase</span><br><span class="line"><span class="keyword">set</span> showmode</span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"><span class="keyword">set</span> backspace=<span class="built_in">indent</span>,eol,start</span><br><span class="line"><span class="keyword">set</span> ruler</span><br><span class="line"><span class="keyword">set</span> relativenumber</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"><span class="keyword">set</span> scrolloff=<span class="number">3</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">history</span>=<span class="number">100000</span></span><br><span class="line"><span class="keyword">set</span> clipboard+=unnamed</span><br><span class="line"><span class="keyword">set</span> surround</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">so</span>=<span class="number">5</span></span><br><span class="line"><span class="keyword">set</span> autoread</span><br><span class="line"><span class="keyword">set</span> winaltkeys=<span class="keyword">no</span></span><br><span class="line"><span class="keyword">set</span> showmatch</span><br><span class="line"><span class="keyword">set</span> matchtime=<span class="number">2</span></span><br><span class="line"><span class="keyword">set</span> cmdheight=<span class="number">2</span></span><br><span class="line"><span class="keyword">set</span> multiple-cursors</span><br><span class="line"></span><br><span class="line"><span class="keyword">inoremap</span> jj <span class="symbol">&lt;Esc&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">vnoremap</span> v <span class="symbol">&lt;Esc&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> L $</span><br><span class="line"><span class="keyword">vnoremap</span> L $</span><br><span class="line"><span class="keyword">nnoremap</span> H ^</span><br><span class="line"><span class="keyword">vnoremap</span> H ^</span><br><span class="line"><span class="keyword">nnoremap</span> Y v$<span class="keyword">y</span></span><br><span class="line"><span class="keyword">vnoremap</span> Y $<span class="keyword">y</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;s-j&gt;</span> :action EditorJoinLines<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;c-up&gt;</span> :action EditorScrollUp<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;c-down&gt;</span> :action EditorScrollDown<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;s-left&gt;</span> :action EditorLeftWithSelection<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;s-right&gt;</span> :action EditorRightWithSelection<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;s-up&gt;</span> :action EditorUpWithSelection<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;s-down&gt;</span> :action EditorDownWithSelection<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;s-left&gt;</span> <span class="symbol">&lt;C-O&gt;</span>:action EditorLeftWithSelection<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;s-right&gt;</span> <span class="symbol">&lt;C-O&gt;</span>:action EditorRightWithSelection<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;s-up&gt;</span> <span class="symbol">&lt;C-O&gt;</span>:action EditorUpWithSelection<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;s-down&gt;</span> <span class="symbol">&lt;C-O&gt;</span>:action EditorDownWithSelection<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" enter newlines</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;CR&gt;</span> :action EditorEnter<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;CR&gt;</span> <span class="symbol">&lt;C-o&gt;</span>:action EditorEnter<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> / :action Find<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> n :action FindNext<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="keyword">N</span> :action FindPrevious<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>/ /</span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> U :action $Redo<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Reload .ideavimrc</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">vs</span> :<span class="keyword">source</span> ~/.ideavimrc<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" have x (removes single character) not go into the default registry</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="keyword">x</span> <span class="comment">"_x</span></span><br><span class="line"><span class="comment">" Make X an operator that removes without placing text in the default registry</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="keyword">X</span> <span class="comment">"_d</span></span><br><span class="line"><span class="keyword">nmap</span> XX <span class="comment">"_dd</span></span><br><span class="line"><span class="keyword">vmap</span> <span class="keyword">X</span> <span class="comment">"_d</span></span><br><span class="line"><span class="keyword">vmap</span> <span class="keyword">x</span> <span class="comment">"_d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Center screen when jumping to next match</span></span><br><span class="line"><span class="keyword">nnoremap</span> n nzz</span><br><span class="line"><span class="keyword">nnoremap</span> <span class="keyword">N</span> Nzz</span><br><span class="line"><span class="keyword">vnoremap</span> n nzz</span><br><span class="line"><span class="keyword">vnoremap</span> <span class="keyword">N</span> Nzz</span><br><span class="line"><span class="keyword">noremap</span> # #zz</span><br><span class="line"><span class="keyword">noremap</span> * *zz</span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">w</span> wzz</span><br><span class="line"><span class="keyword">noremap</span> W Wzz</span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">e</span> ezz</span><br><span class="line"><span class="keyword">noremap</span> E Ezz</span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">b</span> bzz</span><br><span class="line"><span class="keyword">noremap</span> B Bzz</span><br><span class="line"><span class="keyword">noremap</span> H Hzz</span><br><span class="line"><span class="keyword">noremap</span> L Lzz</span><br><span class="line"><span class="keyword">noremap</span> <span class="number">0</span> <span class="number">0</span>zz</span><br><span class="line"><span class="keyword">noremap</span> $ $zz</span><br><span class="line"><span class="keyword">noremap</span> ^ ^zz</span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">j</span> jzz</span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">k</span> kzz</span><br><span class="line"><span class="keyword">noremap</span> G Gzz</span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">u</span> uzz</span><br><span class="line"><span class="keyword">noremap</span> ( (zz</span><br><span class="line"><span class="keyword">noremap</span> ) )zz</span><br><span class="line"><span class="keyword">noremap</span> { {zz</span><br><span class="line"><span class="keyword">noremap</span> } }zz</span><br><span class="line"><span class="keyword">noremap</span> [{ [{zz</span><br><span class="line"><span class="keyword">noremap</span> ]} ]}zz</span><br><span class="line"><span class="keyword">noremap</span> gd gdzz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nnoremap &lt;leader&gt;; :action AceAction &lt;CR&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;a-h&gt;</span> gT</span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;a-l&gt;</span> gt</span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;a-j&gt;</span> :action Back <span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;a-k&gt;</span> :action Resume <span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></tbody></table></figure></div><p></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>好了，你现在完全可以丢掉鼠标了。</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      IDEA 快捷键分享，快捷键大全。
    
    </summary>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="IDEA" scheme="https://tomotoes.com/blog/tags/IDEA/"/>
    
      <category term="快捷键" scheme="https://tomotoes.com/blog/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>服务器初始化</title>
    <link href="https://tomotoes.com/blog/server-initialization-step/"/>
    <id>https://tomotoes.com/blog/server-initialization-step/</id>
    <published>2019-05-05T07:37:04.000Z</published>
    <updated>2021-10-05T10:24:13.190Z</updated>
    
    <content type="html"><![CDATA[<p>记一下服务器的初始配置。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前些日子，入手了一台服务器，特此记录一下它的初始配置。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><em>注：本人主机为 CentOS 7 x64 系统，以下内容均基于此环境</em>。</p><h3 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h3><p>请查考 <a href="https://tomotoes.com/blog/server-security-manual/">肉鸡是怎样炼成的</a></p><h3 id="字符集修改"><a href="#字符集修改" class="headerlink" title="字符集修改"></a>字符集修改</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/</span><br><span class="line"></span><br><span class="line">sudo vi i18n</span><br><span class="line">LANG=<span class="string">"zh_CN.utf8"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span>  /etc/sysconfig/i18n</span><br></pre></td></tr></tbody></table></figure><h3 id="设置-DNS"><a href="#设置-DNS" class="headerlink" title="设置 DNS"></a>设置 DNS</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></tbody></table></figure><h3 id="配置-Yum-源"><a href="#配置-Yum-源" class="headerlink" title="配置 Yum 源"></a>配置 Yum 源</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">sudo mv CentOS-Base.repo CentOS-Base.repo_bak</span><br><span class="line"></span><br><span class="line">sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></tbody></table></figure><h3 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install ntp -y</span><br><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br><span class="line">timedatectl <span class="built_in">set</span>-ntp yes<span class="comment">#同步</span></span><br><span class="line">timedatectl <span class="comment"># 查看时区</span></span><br></pre></td></tr></tbody></table></figure><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum -y update</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum -y install wget <span class="built_in">bind</span>-utils net-tools lrzsz gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel unzip sudo ntp libaio-devel wget ncurses-devel autoconf automake zlib-devel  python-devel</span><br></pre></td></tr></tbody></table></figure><h4 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim</span><br><span class="line">curl -sLf https://spacevim.org/cn/install.sh | bash -s -- -h</span><br><span class="line"></span><br><span class="line">vi  ~/.SpaceVim.d/</span><br></pre></td></tr></tbody></table></figure><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br><span class="line">git config --global user.name SimonMa</span><br><span class="line">git config --global user.email simon@tomotoes.com</span><br><span class="line">git config --global http.sslverify <span class="literal">false</span></span><br><span class="line">git config --global https.sslverify <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程仓库密钥生成</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"simon@tomotoes.com"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Zsh"><a href="#Zsh" class="headerlink" title="Zsh"></a>Zsh</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 zsh 包</span></span><br><span class="line">yum -y install zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换默认 shell 为 zsh</span></span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务器</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 on my zsh</span></span><br><span class="line"></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"> </span><br><span class="line">vi ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">"agnoster"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># autojump</span></span><br><span class="line">yum install autojump -y</span><br><span class="line">yum install autojump-zsh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh-autosuggestions</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh-syntax-highlighting</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置.zshrc 文件</span></span><br><span class="line">plugins=(</span><br><span class="line">  git </span><br><span class="line">  autojump </span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">  z</span><br><span class="line">  extract</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line">更新</span><br><span class="line">upgrade_oh_my_zsh</span><br><span class="line">卸载</span><br><span class="line">uninstall_oh_my_zsh</span><br></pre></td></tr></tbody></table></figure><ol><li>连按两次 Tab 会列出所有的补全列表并直接开始选择，补全项可以使用 ctrl+n/p/f/b 上下左右切换<ol start="2"><li>命令选项补全。在 zsh 中只需要键入 tar -<tab> 就会列出所有的选项和帮助说明</tab></li><li>命令参数补全。键入 kill <tab> 就会列出所有的进程名和对应的进程号</tab></li><li>更智能的历史命令。在用或者方向上键查找历史命令时，zsh 支持限制查找。比如，输入 ls,然后再按方向上键，则只会查找用过的 ls 命令。而此时使用则会仍然按之前的方式查找，忽略 ls</li><li>多个终端会话共享历史记录</li><li>智能跳转，安装了 autojump 之后，zsh 会自动记录你访问过的目录，通过 j 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过 hadoop-1.0.0 目录，输入 j hado 即可正确跳转。j –stat 可以看你的历史路径库。</li><li>目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。</li><li>在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。在你知道路径的情况下，比如 /usr/local/bin 你可以输入 cd /u/l/b 然后按进行补全快速输入</li><li>通配符搜索：ls -l <strong>/*.sh，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find。使用 </strong>/ 来递归搜索</li><li>扩展环境变量，输入环境变量然后按 就可以转换成表达的值</li><li>在 .zshrc 中添加 setopt HIST_IGNORE_DUPS 可以消除重复记录，也可以利用 sort -t “;” -k 2 -u ~/.zsh_history | sort -o ~/.zsh_history 手动清除</li><li>至此，你现在的 zsh 应该具备如下几个特性：<ol><li>各种补全：路径补全、命令补全，命令参数补全，插件内容补全等等。触发补全只需要按一下或两下<code>tab</code>键，补全项可以使用<code>ctrl+n/p/f/b 上下左右</code>切换。比如你想杀掉 java 的进程，只需要输入<code>kill java + tab 键</code>，如果只有一个 java 进程，zsh 会自动替换为进程的 pid，如果有多个则会出现选择项供你选择。<code>ssh + 空格 + 两个 tab 键</code>，zsh 会列出所有访问过的主机和用户名进行补全；</li><li>即使你没有安装<code>autojump</code>，只要输入<code>d</code>，就会列出你在这个回话中访问的目录，输入前面的序号，就可以直接跳转；</li><li>可以忽略 cd 命令, 输入<code>..</code>或者<code>...</code>和当前目录名都可以跳转；当然，除了上面几点，zsh 还有很多丰富的插件可以使用，这就需要继续的探索了…</li></ol></li></ol></li></ol><h4 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br><span class="line"><span class="built_in">source</span>   ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 node 的最新稳定版</span></span><br><span class="line">nvm install stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装版本</span></span><br><span class="line">nvm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist</span><br><span class="line">npm config <span class="built_in">set</span> puppeteer_download_host https://npm.taobao.org/mirrors</span><br></pre></td></tr></tbody></table></figure><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line">sudo yum install -y nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Nginx</span></span><br><span class="line">sudo systemctl start nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Nginx 加入到开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></tbody></table></figure><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> shadow=<span class="string">'/etc/init.d/shadowsocks'</span></span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">'vim'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> ls=<span class="string">'ls --color=auto'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">"ls --color -al"</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">'grep --color=auto'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前时间</span></span><br><span class="line"><span class="built_in">alias</span> now=<span class="string">'date "+%Y-%m-%d %H:%M:%S"'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> reboot=<span class="string">'sudo /sbin/reboot'</span></span><br><span class="line"><span class="built_in">alias</span> poweroff=<span class="string">'sudo /sbin/poweroff'</span> </span><br><span class="line"><span class="built_in">alias</span> halt=<span class="string">'sudo /sbin/halt'</span></span><br><span class="line"><span class="built_in">alias</span> shutdown=<span class="string">'sudo /sbin/shutdown'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动创建父目录</span></span><br><span class="line"><span class="built_in">alias</span> mkdir=<span class="string">'mkdir -pv'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压任何文件</span></span><br><span class="line"><span class="function"><span class="title">extract</span></span>() { </span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="variable">$1</span> ] ; <span class="keyword">then</span> </span><br><span class="line">      <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span> </span><br><span class="line">        *.tar.bz2)   tar xjf <span class="variable">$1</span>     ;; </span><br><span class="line">        *.tar.gz)    tar xzf <span class="variable">$1</span>     ;; </span><br><span class="line">        *.bz2)       bunzip2 <span class="variable">$1</span>     ;; </span><br><span class="line">        *.rar)       unrar e <span class="variable">$1</span>     ;; </span><br><span class="line">        *.gz)        gunzip <span class="variable">$1</span>      ;; </span><br><span class="line">        *.tar)       tar xf <span class="variable">$1</span>      ;; </span><br><span class="line">        *.tbz2)      tar xjf <span class="variable">$1</span>     ;; </span><br><span class="line">        *.tgz)       tar xzf <span class="variable">$1</span>     ;; </span><br><span class="line">        *.zip)       unzip <span class="variable">$1</span>       ;; </span><br><span class="line">        *.Z)         uncompress <span class="variable">$1</span>  ;; </span><br><span class="line">        *.7z)        7z x <span class="variable">$1</span>        ;; </span><br><span class="line">        *)     <span class="built_in">echo</span> <span class="string">"'<span class="variable">$1</span>' cannot be extracted via extract()"</span> ;; </span><br><span class="line">         <span class="keyword">esac</span> </span><br><span class="line">     <span class="keyword">else</span> </span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"'<span class="variable">$1</span>' is not a valid file"</span> </span><br><span class="line">     <span class="keyword">fi</span> </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件/目录大小</span></span><br><span class="line"><span class="built_in">alias</span> size=<span class="string">'f(){ du -sh $1* | sort -hr; }; f'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放端口</span></span><br><span class="line"><span class="built_in">alias</span> portopen=<span class="string">'f(){ /sbin/iptables -I INPUT -p tcp --dport $1 -j ACCEPT; }; f'</span></span><br><span class="line"><span class="comment"># 关闭端口</span></span><br><span class="line"><span class="built_in">alias</span> portclose=<span class="string">'f(){ /sbin/iptables -I INPUT -p tcp --dport $1 -j DROP; }; f'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="built_in">alias</span> untar=<span class="string">'tar xvf '</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> -s html=<span class="string">'vim'</span>   <span class="comment"># 在命令行直接输入后缀为 html 的文件名，会在 Vim 中打开</span></span><br><span class="line"><span class="built_in">alias</span> -s rb=<span class="string">'vim'</span>     <span class="comment"># 在命令行直接输入 ruby 文件，会在 Vim 中打开</span></span><br><span class="line"><span class="built_in">alias</span> -s py=<span class="string">'vim'</span>      <span class="comment"># 在命令行直接输入 python 文件，会用 vim 中打开，以下类似</span></span><br><span class="line"><span class="built_in">alias</span> -s js=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> -s md=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> -s mjs=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> -s css=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> -s c=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> -s java=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> -s txt=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> -s gz=<span class="string">'tar -xzvf'</span> <span class="comment"># 在命令行直接输入后缀为 gz 的文件名，会自动解压打开</span></span><br><span class="line"><span class="built_in">alias</span> -s tgz=<span class="string">'tar -xzvf'</span></span><br><span class="line"><span class="built_in">alias</span> -s zip=<span class="string">'unzip'</span></span><br><span class="line"><span class="built_in">alias</span> -s bz2=<span class="string">'tar -xjvf'</span></span><br><span class="line"><span class="built_in">alias</span> -s json=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> -s go=<span class="string">'vim'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> cat=ccat</span><br><span class="line"><span class="built_in">alias</span> man=tldr</span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(thefuck --alias)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load zsh-syntax-highlighting.</span></span><br><span class="line"><span class="built_in">source</span> ~/.oh-my-zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Load zsh-autosuggestions.</span></span><br><span class="line"><span class="built_in">source</span> ~/.oh-my-zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable autosuggestions automatically.</span></span><br><span class="line">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=<span class="string">"fg=10"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出 bash 别名</span></span><br><span class="line"><span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 bash shell 别名</span></span><br><span class="line"><span class="built_in">alias</span> name=value</span><br><span class="line"><span class="built_in">alias</span> c=<span class="string">'clear'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除别名</span></span><br><span class="line"><span class="built_in">unalias</span> aliasname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想要使别名永久生效， 请编辑</span></span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这两天，我完成了 <code>CentosInit</code> 项目，一个高度自定义的 Centos 初始化脚本。</p><p></p><div class="github-card" data-theme="medium" data-github="Tomotoes/Centos-init"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script> 欢迎 <code>Star</code> , <code>PR</code> !<p></p><p>如果你想快速配置以上初始化措施，请执行以下命令：</p><p><strong>通过 curl</strong></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://tomotoes.com/Centos-init/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure><p><strong>通过 wget</strong></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://tomotoes.com/Centos-init/install.sh -O -)</span>"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>脚本功能一共分为四大类:</p><ol><li><p>初始化配置（update）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">updateLanguage</span><br><span class="line">updateTime</span><br><span class="line">updateLanguage</span><br><span class="line">updateTime</span><br><span class="line">updateDNS</span><br><span class="line">updateYumSource</span><br><span class="line">updateHostname</span><br><span class="line">updateUlimit</span><br><span class="line">updateCoreConfig</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装常用软件（install）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">installCommonSoft</span><br><span class="line">installGit</span><br><span class="line">installVim</span><br><span class="line">installZsh</span><br><span class="line">installNode</span><br><span class="line">installNpmPackages</span><br><span class="line">installPython</span><br><span class="line">installPipPackages</span><br><span class="line">installDocker</span><br><span class="line">installNginx</span><br><span class="line">installCcat</span><br><span class="line">installShadowSocks</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置安装后的软件（config）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">configVim</span><br><span class="line">configZsh</span><br><span class="line">configGit</span><br><span class="line">configNode</span><br><span class="line">configDocker</span><br><span class="line">configNginx</span><br><span class="line">configShadowSocks</span><br></pre></td></tr></tbody></table></figure></li><li><p>必要的安全配置（secure）</p><ul><li><p>基础项</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deleteOrLockUnnecessaryUsersAndGroups</span><br><span class="line">setPrivileges</span><br><span class="line">closeCtrlAltDel</span><br><span class="line">closeIpv6</span><br><span class="line">closeSELinux</span><br></pre></td></tr></tbody></table></figure></li><li><p>高阶项</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">updateSSHPort</span><br><span class="line">useKeyLogin</span><br><span class="line">useIptable</span><br><span class="line">preventCrackingPassword</span><br></pre></td></tr></tbody></table></figure></li><li><p>用户相关项</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo</span><br><span class="line">addUser</span><br><span class="line">joinWheelGroup</span><br><span class="line">banRootLogin</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><h4 id="单独功能安装"><a href="#单独功能安装" class="headerlink" title="单独功能安装"></a>单独功能安装</h4><p>如果你想安装某一种功能<code>( Update | Install | Config | Secure )</code></p><p>请参考以下案列:</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在安装命令前设置 ONLY_UPDATE=Y 即可只安装 update 服务</span></span><br><span class="line">ONLY_UPDATE=Y sh -c <span class="string">"<span class="variable">$(curl -fsSL https://tomotoes.com/Centos-init/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install and Config</span></span><br><span class="line">ONLY_INSTALL=Y ONLY_CONFIG=Y sh -c <span class="string">"<span class="variable">$(curl -fsSL https://tomotoes.com/Centos-init/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h4><p>你也设置设置交互模式，在交互模式下，可高达自定义化你想使用的功能。</p><p>每执行完一项功能，都会询问你下一步。</p><p>使用功能的方法如下:</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在安装命令前设置 INTERACTIVE=Y</span></span><br><span class="line">INTERACTIVE=Y sh -c <span class="string">"<span class="variable">$(curl -fsSL https://tomotoes.com/Centos-init/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      记一下服务器的初始配置，Centos 初始化的脚本汇总。
    
    </summary>
    
    
      <category term="开源" scheme="https://tomotoes.com/blog/categories/%E5%BC%80%E6%BA%90/"/>
    
    
      <category term="开源" scheme="https://tomotoes.com/blog/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Linux" scheme="https://tomotoes.com/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>肉鸡是怎样炼成的</title>
    <link href="https://tomotoes.com/blog/server-security-manual/"/>
    <id>https://tomotoes.com/blog/server-security-manual/</id>
    <published>2019-04-30T11:11:44.000Z</published>
    <updated>2021-10-05T10:24:13.194Z</updated>
    
    <content type="html"><![CDATA[<p>你的服务器正在被攻击！</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安全是一个服务器最基本的必备条件，在创建了服务器之后，你首先要做的事情就是将服务器加固。</p><p>由于服务器就相当于一台拥有独立 IP 的、直接暴露于互联网之上的电脑，这在为你带来便利的同时也直接让你的服务器与危险画上了等号，密码穷举、DDOS 攻击、各种各样你想到的、想不到的攻击方法都在等着你。</p><p>说不定你的服务器正在被攻击！</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><em>注：本人主机为 CentOS 7 x64 系统，以下内容均基于此环境</em>。</p><h3 id="查看攻击情况"><a href="#查看攻击情况" class="headerlink" title="查看攻击情况"></a>查看攻击情况</h3><ol><li><p>查看登录失败的日志</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lastb</span><br></pre></td></tr></tbody></table></figure></li><li><p>统计尝试暴力破解机器密码的 IP</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grep <span class="string">"Failed password for invalid"</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">'{print $13}'</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></tbody></table></figure></li><li><p>统计有哪些用户名尝试登录</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grep <span class="string">"Failed password for invalid"</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">'{print $11}'</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></tbody></table></figure></li></ol><p>嗯哼，结果可怕吗?</p><h3 id="安全措施"><a href="#安全措施" class="headerlink" title="安全措施"></a>安全措施</h3><h4 id="禁止-root"><a href="#禁止-root" class="headerlink" title="禁止 root"></a>禁止 root</h4><p><strong>永远不要以 <code>root</code> 登录服务器。</strong></p><p>你可以新建一个用户来管理，而非直接使用 root 用户，防止密码被破解。</p><ol><li><p>增加用户</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -m username</span><br><span class="line"><span class="comment"># -m 可以为用户创建相应的帐号和用户目录/home/username</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>设置新用户密码</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></tbody></table></figure></li><li><p>将新用户加入到 <code>Wheel</code> 组</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G wheel username</span><br></pre></td></tr></tbody></table></figure></li><li><p>限制<code>su</code>命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/pam.d/su</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去除下面命令的注释</span></span><br><span class="line"><span class="meta">#</span><span class="bash">auth required pam_wheel.so use_uid</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只允许管理员组的用户执行 sh 命令</span></span><br><span class="line">echo "SU_WHEEL_ONLY yes"&gt;&gt;/etc/login.defs</span><br></pre></td></tr></tbody></table></figure></li><li><p>除去验证密码</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  vi /etc/sudoers</span><br><span class="line">  <span class="comment"># 在 root 下面增加 以下内容：</span></span><br><span class="line">username ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></tbody></table></figure></li><li><p>禁止 <code>root</code> 登陆</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">PermitRootLogin no <span class="comment">#禁止 root 登录</span></span><br><span class="line">PermitEmptyPasswords no <span class="comment">#禁止空密码登录</span></span><br><span class="line">AllowUsers username <span class="comment">#设置刚才创建的用户可以登录</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>重启服务器</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="禁用不必要的账号"><a href="#禁用不必要的账号" class="headerlink" title="禁用不必要的账号"></a>禁用不必要的账号</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">passwd -l dbus</span><br><span class="line">passwd -l nobody</span><br><span class="line">passwd -l ftp</span><br><span class="line">passwd -l mail</span><br><span class="line">passwd -l shutdown</span><br><span class="line">passwd -l halt</span><br><span class="line">passwd -l operator</span><br><span class="line">passwd -l sync</span><br><span class="line">passwd -l adm</span><br><span class="line">passwd -l lp</span><br></pre></td></tr></tbody></table></figure><h4 id="禁止非授权用户获得权限"><a href="#禁止非授权用户获得权限" class="headerlink" title="禁止非授权用户获得权限"></a>禁止非授权用户获得权限</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo chattr +i /etc/passwd</span><br><span class="line">sudo chattr +i /etc/shadow</span><br><span class="line">sudo chattr +i /etc/group</span><br><span class="line">sudo chattr +i /etc/gshadow</span><br><span class="line"></span><br><span class="line">sudo chmod -R 700 /etc/rc.d/init.d/*</span><br></pre></td></tr></tbody></table></figure><p>这样操作之后也无法创建账号和修改密码，后面可以使用<code>chattr -i</code>命令恢复之后再进行操作。</p><h4 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h4><p>ssh 登陆默认的端口是<code>22</code>，那些扫描穷举密码的，也一定从<code>22</code>开始。</p><ol><li><p>编辑配置文件</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure></li><li><p>将其中的<code>Port 22</code>改为其他端口</p><p><code>port</code>的取值范围是 <code>0 – 65535(即 2 的 16 次方)</code></p><p>0 到 1024 是众所周知的端口（知名端口，常用于系统服务等，例如 http 服务的端口号是 80）</p></li><li><p>配置防火墙</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CentOS 6 中防火墙开启对应端口</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 设置的端口号 -j ACCEPT </span><br><span class="line"><span class="comment">#CentOS 7 中防火墙开启对应端口</span></span><br><span class="line">sudo firewall-cmd --zone=public --add-port=设置的端口号/tcp --permanent</span><br></pre></td></tr></tbody></table></figure></li><li><p>重启 <code>sshd</code></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="限制端口转发"><a href="#限制端口转发" class="headerlink" title="限制端口转发"></a>限制端口转发</h4><ol><li><p>编辑配置文件</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改以下内容</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ChrootDirectory /home/%u</span><br><span class="line">X11Forwarding no</span><br><span class="line">AllowTcpForwarding no</span><br><span class="line">UseDNS no</span><br></pre></td></tr></tbody></table></figure></li><li><p>重启服务器</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="ssh-密钥登录"><a href="#ssh-密钥登录" class="headerlink" title="ssh 密钥登录"></a>ssh 密钥登录</h4><blockquote><p>如果一定要使用密码登录，请查考正文最后 <code>fail2ban</code> 与 <code>DenyHosts</code> 的介绍。</p></blockquote><p>不要相信自己的密码，在暴力枚举面前，只是时间文件。</p><p>统计学告诉我们，请配置 <code>RSA</code></p><p>有两种不同的密钥分发方式，但结果都是一样的。</p><ul><li><p>在客户端生成公钥与私钥，上传公钥到服务器</p></li><li><p>在服务器生成公钥和私钥，复制私钥到客户端</p></li></ul><p>我使用第二种方式进行演示：</p><ol><li><p>服务器生成密钥</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssh-keygen -b 2048 -t rsa</span><br></pre></td></tr></tbody></table></figure><p>这样一来，在根目录就生成了一个<code>.ssh</code>的隐藏目录，内含两个密钥文件。</p><p><code>xxx</code> 为私钥，需复制到客户端，<code>xxx.pub</code> 为公钥。</p></li><li><p>服务器配置公钥</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">sudo cat xxx.pub &gt;&gt; authorized_keys <span class="comment"># 默认允许的 key 存储的文件</span></span><br><span class="line"></span><br><span class="line">sudo chmod 600 authorized_keys</span><br><span class="line">sudo chmod 700 ~/.ssh</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置 <code>ssh</code> 文件</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑以下内容</span></span><br><span class="line">RSAAuthentication yes <span class="comment">#RSA 认证</span></span><br><span class="line">PubkeyAuthentication yes <span class="comment">#开启公钥验证</span></span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys <span class="comment">#验证文件路径</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>复制私钥到本地，并且设置相应 <code>ssh</code> 工具的连接配置。</p></li><li><p>重启服务器</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></tbody></table></figure></li><li><p>禁止密码登录</p><p><strong>使用密钥登录成功之后，再设置此项。</strong></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑以下内容</span></span><br><span class="line">PasswordAuthentication no <span class="comment">#禁止密码认证</span></span><br><span class="line">PermitEmptyPasswords no <span class="comment">#禁止空密码</span></span><br><span class="line">UsePAM no<span class="comment">#禁用 PAM</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h4><p><a href="https://www.vpser.net/security/linux-iptables.html" target="_blank" rel="external nofollow noopener noreferrer">iptables</a> 是<code>Linux</code>上最强大的防火墙软件。</p><ol><li><p>安装</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables -y</span><br><span class="line">yum install iptables-services -y <span class="comment">#CentOS7 需安装此 iptables 的 service 软件包#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian/Ubuntu 执行：</span></span><br><span class="line">apt-get install iptables -y</span><br><span class="line">apt-get install iptables-persistent -y <span class="comment">#持久化 iptables 规则服务#</span></span><br></pre></td></tr></tbody></table></figure><p>CentOS 7 上默认安装了 firewalld 建议关闭并禁用：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></tbody></table></figure></li><li><p>清除已有 iptables 规则</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br></pre></td></tr></tbody></table></figure></li><li><p>开发指定端口</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许本地回环接口(即运行本机访问本机)</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line"><span class="comment"># 允许已建立的或相关连的通行</span></span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"><span class="comment">#允许所有本机向外的访问</span></span><br><span class="line">iptables -A OUTPUT -j ACCEPT</span><br><span class="line"><span class="comment"># 允许访问 22222(SSH)端口，以下几条相同，分别是 22222,80,443 端口的访问</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22222 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line"><span class="comment">#允许 FTP 服务的 21 和 20 端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 20 -j ACCEPT</span><br><span class="line"><span class="comment">#如果有其他端口的话，规则也类似，稍微修改上述语句就行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#允许 ping</span></span><br><span class="line">iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁止其他未允许的规则访问（注意：如果 22 端口未加入允许规则，SSH 链接会直接断开。）</span></span><br><span class="line">iptables -A INPUT -j REJECT </span><br><span class="line">iptables -A FORWARD -j REJECT</span><br><span class="line"></span><br><span class="line"><span class="comment">#屏蔽单个 IP 的命令是</span></span><br><span class="line">iptables -I INPUT -s 123.45.6.7 -j DROP</span><br><span class="line"><span class="comment">#封整个段即从 123.0.0.1 到 123.255.255.254 的命令</span></span><br><span class="line">iptables -I INPUT -s 123.0.0.0/8 -j DROP</span><br><span class="line"><span class="comment">#封 IP 段即从 123.45.0.1 到 123.45.255.254 的命令</span></span><br><span class="line">iptables -I INPUT -s 124.45.0.0/16 -j DROP</span><br><span class="line"><span class="comment">#封 IP 段即从 123.45.6.1 到 123.45.6.254 的命令是</span></span><br><span class="line">iptables -I INPUT -s 123.45.6.0/24 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment">#屏蔽某 IP 访问指定端口，以 22 端口为例命令是</span></span><br><span class="line">iptables -I INPUT -s 123.45.6.7 -p tcp --dport 22 -j DROP</span><br><span class="line"><span class="comment">#允许某 IP 访问指定端口，以 22 端口为例命令是</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 22 -j DROP</span><br><span class="line">iptables -I INPUT -s 123.45.6.7 -p tcp --dport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">ACCEPT:允许通过.</span><br><span class="line">LOG:记录日志信息,然后传给下一条规则继续匹配.</span><br><span class="line">REJECT:拒绝通过,必要时会给出提示</span><br><span class="line">DROP:直接丢弃,不给出任何回应.</span><br><span class="line"></span><br><span class="line">PREROUTING:在进行路由选择前处理数据包</span><br><span class="line"></span><br><span class="line">INPUT:处理入站的数据包</span><br><span class="line"></span><br><span class="line">OUTPUT:处理出站的数据包</span><br><span class="line"></span><br><span class="line">FORWARD:处理转发的数据包</span><br><span class="line"></span><br><span class="line">POSTROUTING:在进行路由选择后处理数据包</span><br></pre></td></tr></tbody></table></figure></li><li><p>保存防火墙规则</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置防火墙开机启动</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 345 iptables on</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS7 可执行：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="fail2ban"><a href="#fail2ban" class="headerlink" title="fail2ban"></a>fail2ban</h4><p>如已经设置 <code>禁止密码登录</code>，可忽悠。</p><blockquote><p>通过使用 <code>iptables</code> 防火墙，将尝试爆破 <code>ssh</code> 密码的 <code>IP</code> 封停，默认 10 分钟。</p></blockquote><ol><li><p>安装</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y fail2ban</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cp -pf /etc/fail2ban/jail.conf /etc/fail2ban/jail.local</span><br><span class="line">vim /etc/fail2ban/jail.local</span><br><span class="line"></span><br><span class="line">[sshd]</span><br><span class="line">enabled = trueport = 22222</span><br><span class="line">logpath = %(sshd_log)s</span><br><span class="line">backend = %(sshd_backend)s</span><br><span class="line">filter = sshd</span><br><span class="line">action = iptables[name=SSH, port=22222, protocol=tcp] sendmail-whois[name=SSH, dest=root, sender=fail2ban@example.com]</span><br><span class="line">logpath = /var/<span class="built_in">log</span>/secure</span><br><span class="line">maxretry = 3</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="DenyHosts"><a href="#DenyHosts" class="headerlink" title="DenyHosts"></a>DenyHosts</h4><p>如已经设置 <code>禁止密码登录</code>，可忽悠。</p><blockquote><p>分析<code>sshd</code>的日志文件，当发现重复的攻击时就会记录<code>IP</code>到<code>/etc/hosts.deny</code>文件，从而达到自动屏蔽<code>IP</code>的功能。</p></blockquote><p>和 <code>fail2ban</code> 一样，都是防止暴力破解密码，两者任选其一即可。</p><ol><li><p>安装</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install denyhosts</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/denyhosts.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置相关说明</span></span><br><span class="line">SECURE_LOG = /var/<span class="built_in">log</span>/secure <span class="comment">#ssh 日志文件,系统不同,文件不相同</span></span><br><span class="line">HOSTS_DENY = /etc/hosts.deny <span class="comment">#控制用户登陆的文件</span></span><br><span class="line">PURGE_DENY = <span class="comment">#过多久后清除已经禁止的，空表示永远不解禁</span></span><br><span class="line">BLOCK_SERVICE = sshd <span class="comment">#禁止的服务名，如还要添加其他服务，只需添加逗号跟上相应的服务即可</span></span><br><span class="line">DENY_THRESHOLD_INVALID = 5 <span class="comment">#允许无效用户失败的次数</span></span><br><span class="line">DENY_THRESHOLD_VALID = 10 <span class="comment">#允许普通用户登陆失败的次数</span></span><br><span class="line">DENY_THRESHOLD_ROOT = 1 <span class="comment">#允许 root 登陆失败的次数</span></span><br><span class="line">DENY_THRESHOLD_RESTRICTED = 1</span><br><span class="line">WORK_DIR = /var/lib/denyhosts <span class="comment">#运行目录</span></span><br><span class="line">SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS=YES</span><br><span class="line">HOSTNAME_LOOKUP=YES <span class="comment">#是否进行域名反解析</span></span><br><span class="line">LOCK_FILE = /var/run/denyhosts.pid <span class="comment">#程序的进程 ID</span></span><br><span class="line">ADMIN_EMAIL = root@localhost <span class="comment">#管理员邮件地址,它会给管理员发邮件</span></span><br><span class="line">SMTP_HOST = localhost</span><br><span class="line">SMTP_PORT = 25</span><br><span class="line">SMTP_FROM = DenyHosts &lt;nobody@localhost&gt;</span><br><span class="line">SMTP_SUBJECT = DenyHosts Report</span><br><span class="line">AGE_RESET_VALID=5d <span class="comment">#用户的登录失败计数会在多久以后重置为 0，(h 表示小时，d 表示天，m 表示月，w 表示周，y 表示年)</span></span><br><span class="line">AGE_RESET_ROOT=25d</span><br><span class="line">AGE_RESET_RESTRICTED=25d</span><br><span class="line">AGE_RESET_INVALID=10d</span><br><span class="line">RESET_ON_SUCCESS = yes <span class="comment">#如果一个 ip 登陆成功后，失败的登陆计数是否重置为 0</span></span><br><span class="line">DAEMON_LOG = /var/<span class="built_in">log</span>/denyhosts <span class="comment">#自己的日志文件</span></span><br><span class="line">DAEMON_SLEEP = 30s <span class="comment">#当以后台方式运行时，每读一次日志文件的时间间隔。</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>启动</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/daemon-control start         <span class="comment">#启动 denyhosts</span></span><br><span class="line">chkconfig daemon-control on              <span class="comment">#将 denghosts 设成开机启动</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>启动命令（yum 安装，已默认配好）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service denyhosts start</span><br><span class="line">service denyhosts stop</span><br><span class="line">service denyhosts status</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这两天，我完成了 <code>CentosInit</code> 项目，一个高度自定义的 Centos 初始化脚本。</p><p></p><div class="github-card" data-theme="medium" data-github="Tomotoes/Centos-init"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script> 欢迎 <code>Star</code>  <code>PR</code> !<p></p><p>如果你想快速配置以上安全措施，请执行以下命令：</p><p><strong>通过 curl</strong></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONLY_SECURE=Y sh -c <span class="string">"<span class="variable">$(curl -fsSL https://tomotoes.com/Centos-init/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure><p><strong>通过 wget</strong></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONLY_SECURE=Y sh -c <span class="string">"<span class="variable">$(wget https://tomotoes.com/Centos-init/install.sh -O -)</span>"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>脚本功能一共分为四大类:</p><ol><li><p>初始化配置（update）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">updateLanguage</span><br><span class="line">updateTime</span><br><span class="line">updateLanguage</span><br><span class="line">updateTime</span><br><span class="line">updateDNS</span><br><span class="line">updateYumSource</span><br><span class="line">updateHostname</span><br><span class="line">updateUlimit</span><br><span class="line">updateCoreConfig</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装常用软件（install）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">installCommonSoft</span><br><span class="line">installGit</span><br><span class="line">installVim</span><br><span class="line">installZsh</span><br><span class="line">installNode</span><br><span class="line">installNpmPackages</span><br><span class="line">installPython</span><br><span class="line">installPipPackages</span><br><span class="line">installDocker</span><br><span class="line">installNginx</span><br><span class="line">installCcat</span><br><span class="line">installShadowSocks</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置安装后的软件（config）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">configVim</span><br><span class="line">configZsh</span><br><span class="line">configGit</span><br><span class="line">configNode</span><br><span class="line">configDocker</span><br><span class="line">configNginx</span><br><span class="line">configShadowSocks</span><br></pre></td></tr></tbody></table></figure></li><li><p>必要的安全配置（secure）</p><ul><li><p>基础项</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deleteOrLockUnnecessaryUsersAndGroups</span><br><span class="line">setPrivileges</span><br><span class="line">closeCtrlAltDel</span><br><span class="line">closeIpv6</span><br><span class="line">closeSELinux</span><br></pre></td></tr></tbody></table></figure></li><li><p>高阶项</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">updateSSHPort</span><br><span class="line">useKeyLogin</span><br><span class="line">useIptable</span><br><span class="line">preventCrackingPassword</span><br></pre></td></tr></tbody></table></figure></li><li><p>用户相关项</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo</span><br><span class="line">addUser</span><br><span class="line">joinWheelGroup</span><br><span class="line">banRootLogin</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><h4 id="单独功能安装"><a href="#单独功能安装" class="headerlink" title="单独功能安装"></a>单独功能安装</h4><p>如果你想安装某一种功能<code>( Update | Install | Config | Secure )</code></p><p>请参考以下案列:</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在安装命令前设置 ONLY_UPDATE=Y 即可只安装 update 服务</span></span><br><span class="line">ONLY_UPDATE=Y sh -c <span class="string">"<span class="variable">$(curl -fsSL https://tomotoes.com/Centos-init/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install and Config</span></span><br><span class="line">ONLY_INSTALL=Y ONLY_CONFIG=Y sh -c <span class="string">"<span class="variable">$(curl -fsSL https://tomotoes.com/Centos-init/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h4><p>你也设置设置交互模式，在交互模式下，可高达自定义化你想使用的功能。</p><p>每执行完一项功能，都会询问你下一步。</p><p>使用功能的方法如下:</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在安装命令前设置 INTERACTIVE=Y</span></span><br><span class="line">INTERACTIVE=Y sh -c <span class="string">"<span class="variable">$(curl -fsSL https://tomotoes.com/Centos-init/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>希望上面的这些措施可以帮助你加强服务器的安全。</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">一个坏掉的番茄</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      服务器安全防范。
    
    </summary>
    
    
      <category term="Linux" scheme="https://tomotoes.com/blog/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://tomotoes.com/blog/tags/Linux/"/>
    
      <category term="信安" scheme="https://tomotoes.com/blog/tags/%E4%BF%A1%E5%AE%89/"/>
    
  </entry>
  
  <entry>
    <title>Vim 修炼秘籍之语法篇</title>
    <link href="https://tomotoes.com/blog/grammar-of-vim-cultivation-cheats/"/>
    <id>https://tomotoes.com/blog/grammar-of-vim-cultivation-cheats/</id>
    <published>2018-03-18T08:44:05.000Z</published>
    <updated>2021-10-05T10:24:13.154Z</updated>
    
    <content type="html"><![CDATA[<p>欲练此功，必先自宫。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>少年，我看你骨骼精奇，是万中无一的武学奇才，维护世界和平就靠你了，我这有本秘籍《Vim 修炼秘籍》，见与你有缘，就十块卖给你了！ —— 本秘籍建议零售价：10 元</p></blockquote><p>如果你是一名 Vimer，那么恭喜你，你的 Vim 技能马上要升级了 😈！如果你之前不了解过 Vim ，那么也没关系，本文就当成学英语语法了！好，废话不多说，秘籍送上。<em>ps: 建议先熟悉一遍 <a href="https://tomotoes.com/blog/order-of-vim-cultivation-cheats/">Vim 修炼秘籍之命令篇</a>，本秘籍食用更佳</em></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="核心秘诀"><a href="#核心秘诀" class="headerlink" title="核心秘诀"></a>核心秘诀</h3><p>Vim 功法之究极总结： <strong>（操作次数）+ 操作行为 + 操作范围 </strong>下面，我会将此秘诀 亲自传授于你。</p><h3 id="秘诀解析"><a href="#秘诀解析" class="headerlink" title="秘诀解析"></a>秘诀解析</h3><p>先列一些常用的 Vim 招式给你瞧瞧，看你是否是传说的练武奇才：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c2w       ——  删除当前光标后紧邻的两个单词，并转换为普通模式</span><br><span class="line">dip       ——  删除当前光标所处的一段内容</span><br><span class="line">y3f{char} ——  从当前字符，一直复制到第三个 {char} 字符</span><br><span class="line">&gt;G        ——  当前行到结尾，整体缩进一个 <span class="symbol">&lt;Tab&gt;</span></span><br><span class="line">v`{<span class="keyword">mark</span>}  ——  从当前字符，选择到 {<span class="keyword">mark</span>} 标记位置</span><br><span class="line">cit       ——  删除当前光标所处标签中的内容</span><br></pre></td></tr></tbody></table></figure>如果把招式看成语言，解析其语法，不难发现一个共同点：<p></p><blockquote><p>每个招式必须包括 <strong> 谓语（操作行为） 与 宾语（操作对象）</strong></p></blockquote><p>好，既然有了线索，我这就带你各个击破！</p><h4 id="谓语（操作行为）"><a href="#谓语（操作行为）" class="headerlink" title="谓语（操作行为）"></a>谓语（操作行为）</h4><p>众所周知，谓语是 动词词性的。</p><p>在 Vim 功法中，常用的动词如下：</p><ol><li><code>c</code><blockquote><p>删除内容，进入普通模式</p></blockquote></li><li><code>d</code><blockquote><p>删除</p></blockquote></li><li><code>y</code><blockquote><p>复制</p></blockquote></li><li><code>v</code><blockquote><p>选择</p></blockquote></li><li><code>&gt;,&lt;</code><blockquote><p>缩进</p></blockquote></li><li><code>=</code><blockquote><p>智能缩进</p></blockquote></li><li><code>gu,gU,g~</code><blockquote><p>改变内容大小写</p></blockquote></li></ol><h4 id="宾语（操作对象）"><a href="#宾语（操作对象）" class="headerlink" title="宾语（操作对象）"></a>宾语（操作对象）</h4><p>宾语代表的是操作对象，而在 Vim 中，所需操作的对象即是 操作的范围。而常用的操作范围命令如下：</p><ol><li><p><code>w</code></p><blockquote><p>从当前位置，到下一个单词首字母，单词由特殊字符（”.等）作为间隔</p></blockquote><p>内容： .main {xxx} , 光标处在字符 m 招式：caw结果：. {xxx}</p></li><li><p><code>W</code></p><blockquote><p>从当前位置，到下一个单词首字母，单词由空格作为间隔</p></blockquote><p>内容： .main {xxx} , 光标处在字符 m 招式：caW 结果： {xxx}</p></li><li><code>e</code><blockquote><p>从当前位置，到本单词尾字母</p></blockquote></li><li><code>ge</code><blockquote><p>从当前位置到上一个单词尾字母</p></blockquote></li><li><p><code>b</code></p><blockquote><ol><li>通常代替括号中的内容   </li><li>上一个单词首字母</li></ol></blockquote></li><li><p><code>p</code></p><blockquote><p>段落 paragraph</p></blockquote></li><li><p><code>s</code></p><blockquote><p>句子 sentence</p></blockquote></li><li><p><code>t</code></p><blockquote><p>标签中的内容 </p></blockquote></li><li><p><code>B</code></p><blockquote><p>通常代替花括号中的内容</p></blockquote></li><li><p><code>符号 {) "'&lt;</code></p><blockquote><p>代表的就是 该符号中的内容</p></blockquote></li><li><p><code>G,gg</code></p><blockquote><p>结尾，开头</p></blockquote></li><li><p><code>j,k,h,l</code></p><blockquote><p>上下左右</p></blockquote></li><li><p><code>/{word}&lt;Enter&gt;</code></p><blockquote><p>从当前字符 到下一个 word 之间的内容</p></blockquote></li><li><p><code>f{char}</code></p><blockquote><p>从当前字符到下一个 char 字符之间的内容</p></blockquote></li><li><p>`mark</p><blockquote><p>从当前字符到 mark 标记 之间的内容</p></blockquote></li><li><p>双写动词，操作范围默认是当前行</p><ol><li>dd 删除当前行</li><li>cc 删除当前行 并转换为普通模式</li><li>&gt;&gt; 缩进当前行</li><li>v 动词例外，使用 V 选中当前行。</li><li>gU 命令是一种特殊情况，可用 gUU 来使它作用于当前行。</li></ol></li></ol><h4 id="数词（操作次数）"><a href="#数词（操作次数）" class="headerlink" title="数词（操作次数）"></a>数词（操作次数）</h4><p>假如现在有个任务，让你删除两个单词，你会怎么做？</p><ol><li><p>d2w </p><blockquote><p>删除两个单词</p></blockquote></li><li><p>2dw </p><blockquote><p>执行两次删除单词的命令</p></blockquote></li></ol><p>虽然这两式结果相同，但意义却有所差别，数词灵活多变，可放在 谓语（操作行为）前，又可放在 宾语（操作对象）前，</p><ul><li>放在 谓语前，代表操作次数，</li><li>放在 宾语前，代表操作范围的扩张次数</li></ul><h4 id="介词（修饰范围）"><a href="#介词（修饰范围）" class="headerlink" title="介词（修饰范围）"></a>介词（修饰范围）</h4><p>常用的介词就两个：i(inside) ， a(around)举例说明：光标处在字符 c<code>(main)(div class="vim-test" I am Vimer! div)(main)</code></p><p>分别操作：</p><ul><li>dab结果：<code>(main)(main)</code></li><li>dib结果：<code>(main)()(main)</code></li></ul><p>顾名思义，i 就是内部的内容，a 就是连同包裹的内容 一起干掉。</p><h3 id="招式实战"><a href="#招式实战" class="headerlink" title="招式实战"></a>招式实战</h3><p>我已经教授了你 Vim 秘籍的基本功 ：<strong>（操作次数）+ 操作行为 + 操作范围 </strong>现在，利用你所学，来实战巩固吧。</p><ol><li><p>将下面标签中的内容修改了: I am Vimer! (光标所处 字符 c )</p><blockquote><p><code>(div class="vim-test")you are Bimer!(div)</code></p></blockquote></li><li><p>修改下面字符串为 <a href="https://tomotoes.com">https://tomotoes.com</a> ！（光标所处 第一个 w 字符）</p><blockquote><p><a href="https://www.tomotoes.com" target="_blank" rel="external nofollow noopener noreferrer">https://www.tomotoes.com</a></p></blockquote></li><li><p>将文件 所有内容格式化，写出 你认为的命令</p></li><li><p>将下面字符串改为 I am Vimer （光标所处 I 字符）</p><blockquote><p>I am VIMER</p></blockquote></li><li><p>将下面字符串的每个字符替换为 ‘!’</p><blockquote><p>I love github and juejin </p></blockquote></li></ol><p>等待你的评论答案。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>好的功夫是练出来的，请你以后务必勤加练习。</p><p>好了，Vim 语法先告一段落，希望本文能给你带来帮助。</p><p>如果你想了解 Vim 其他方面 如：Ex 命令，寄存器等，请关注我的后续文章。</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      Vim,工具
    
    </summary>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Vim" scheme="https://tomotoes.com/blog/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>囚思</title>
    <link href="https://tomotoes.com/blog/prison-thoughts/"/>
    <id>https://tomotoes.com/blog/prison-thoughts/</id>
    <published>2018-03-08T01:51:13.000Z</published>
    <updated>2021-10-05T10:24:13.154Z</updated>
    
    <content type="html"><![CDATA[<p>年少时写的一首小词。<a id="more"></a></p><h3 id="囚思"><a href="#囚思" class="headerlink" title="囚思"></a>囚思</h3><p align="center"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&amp;id=417859631&amp;auto=0&amp;height=32"></iframe></p><p class="post">一往情深深几许？</p><p class="post">二心紧绑，三年孤依不言弃。</p><p class="post">炼金情，苦思忆，</p><p class="post">岁月多别离，</p><p class="post">人渐消沉天渐熄，</p><p class="post">思绪囚心屿。</p><br><p style="text-align:left">于 2016.05.28  19:28 所作 <em>（正和她处在异地恋）</em></p><style>#post-content > p:nth-child(1),#post-toc,#囚思{display:none}#post-content>p,#post-content>h3{text-align:center;border-bottom:none}.post-count-custom{display:none}#post-content>h3{margin-bottom:15px;margin-top:20px;border-bottom:dashed #efefef 5px;}.post {line-height:180% !important;font-size:105%;letter-spacing:4px;border-radius:20px;text-shadow: rgb(158, 158, 158) 0px 0px 1px;color:hsl(250,13%,30%);padding:0 20px;transition:all .3s ease-in;}.post:hover{transform:translateY(-1px);transition:all 0.2s;}@media screen and (max-width:760px){.post{letter-spacing: 1px;}}</style>]]></content>
    
    <summary type="html">
    
      个人写的一首小词。
    
    </summary>
    
    
      <category term="诗词" scheme="https://tomotoes.com/blog/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="诗词" scheme="https://tomotoes.com/blog/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>你有所不知的 margin 属性</title>
    <link href="https://tomotoes.com/blog/you-dont-know-the-margin-attribute/"/>
    <id>https://tomotoes.com/blog/you-dont-know-the-margin-attribute/</id>
    <published>2018-02-23T09:41:43.000Z</published>
    <updated>2021-10-05T10:24:13.154Z</updated>
    
    <content type="html"><![CDATA[<p>你真的了解的 margin 属性吗？</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>本文总结于 <a href="http://www.zhangxinxu.com/" target="_blank" rel="external nofollow noopener noreferrer">张鑫旭老师</a>的 <a href="https://www.imooc.com/learn/680" target="_blank" rel="external nofollow noopener noreferrer">CSS 深入理解之 margin 课程</a>，感谢张老师的辛苦付出！</p><h3 id="难学的-CSS"><a href="#难学的-CSS" class="headerlink" title="难学的 CSS"></a>难学的 CSS</h3><p>作为前端狗的我们，每天都要和网页打交道。当 UI 将设计稿发给你时，CSS 的知识便显得尤为重要。而 CSS 这一标记性的语言，却时常让我很头疼：毫无逻辑性，并充满了各种坑爹的潜规则 ，以至于每次做项目时，大部分时间精力都浪费在了调整布局与样式上，详情可点击知乎上的<a href="https://www.zhihu.com/question/66167982/answer/239709754" target="_blank" rel="external nofollow noopener noreferrer">为什么 CSS 这么难学？</a>问题，道出了我的心声 :(</p><p>但谁叫我们是吃这碗饭的呢，不管怎样，有困难必须迎面解决，学好 CSS ，向张老师看齐！</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>margin 算是性格刚烈的属性了，下面，我将从各个方面讲解 margin 的可怕之处。</p><h3 id="元素尺寸的影响"><a href="#元素尺寸的影响" class="headerlink" title="元素尺寸的影响"></a>元素尺寸的影响</h3><blockquote><p>通常一个元素的尺寸可分为：可视尺寸 与 占据尺寸</p></blockquote><ol><li>可视尺寸 - clientWidth (border - padding - size)</li><li>占据尺寸 - outerWidth (border - margin)</li></ol><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/1-min.gif" alt="元素尺寸示例图" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/you-dont-know-the-margin-attribute/1.png"> </div> <div class="image-caption">元素尺寸示例图</div> </figure><p>margin 又是怎样影响这两个尺寸的呢？</p><p>首先，两个尺寸都需满足一定的条件。</p><h4 id="可视尺寸的影响条件"><a href="#可视尺寸的影响条件" class="headerlink" title="可视尺寸的影响条件"></a>可视尺寸的影响条件</h4><ol><li>适用于 没有设定 width/height 的块级元素 (宽高设死了，怎么会影响呢？)其中不包括 float absolute fixed 元素 ，inline 水平 ，table-cell 元素</li><li>只适用于水平方向尺寸（margin-left/margin-right）</li></ol><h4 id="占据尺寸的影响条件"><a href="#占据尺寸的影响条件" class="headerlink" title="占据尺寸的影响条件"></a>占据尺寸的影响条件</h4><ol><li>适用于 block/inline-block 水平元素</li><li>适用于 任何方向</li><li>与 width/height 值无关</li><li>inline 元素只影响水平方向 (后面会提到)</li></ol><h4 id="影响示例"><a href="#影响示例" class="headerlink" title="影响示例"></a>影响示例</h4><ol><li><p>margin 影响元素的可视水平尺寸</p><p></p><p data-height="342" data-theme-id="0" data-slug-hash="PQyyKd" data-default-tab="css,result" data-user="Tomotoes" data-embed-version="2" data-pen-title="margin 的可视尺寸" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/Tomotoes/pen/PQyyKd/" target="_blank" rel="external nofollow noopener noreferrer">margin 的可视尺寸</a> by Simon Ma (<a href="https://codepen.io/Tomotoes" target="_blank" rel="external nofollow noopener noreferrer">@Tomotoes</a>) on <a href="https://codepen.io" target="_blank" rel="external nofollow noopener noreferrer">CodePen</a>.</p><p></p><script async="" src="https://static.codepen.io/assets/embed/ei.js"></script></li><li><p>margin 影响占据尺寸 ，这个可以说是 margin 的本命技能了，就不举例了。</p></li></ol><h3 id="百分比单位"><a href="#百分比单位" class="headerlink" title="百分比单位"></a>百分比单位</h3><p>通常而言，margin 的单位中，百分比单位最容易让人头晕。</p><ol><li><p>普通元素的百分比 margin 都是相对于 <strong>容器的宽度</strong> 计算的</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> {</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#child</span> {</span><br><span class="line">  <span class="comment">/* 等价于 margin: 5% * 父元素的宽度  10% * 父元素的宽度; */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5%</span> <span class="number">10%</span>;</span><br><span class="line">  <span class="comment">/* 父元素的宽度 * 50% */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="comment">/* 父元素的高度 * 50% */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>绝对定位的百分比 margin 是相对于 第一个具有<strong>定位属性的祖先元素的宽度</strong> 计算的(relative/absolute/fixed)</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#child</span> {</span><br><span class="line">  <span class="comment">/* 注意子元素已增加绝对定位，则百分比按照定位属性的祖先元素的宽度计算，</span></span><br><span class="line"><span class="comment">    本例中是浏览器视口 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/* 等价于 margin: 5% * 父元素的宽度  10% * 父元素的宽度; */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5%</span> <span class="number">10%</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="重叠详解"><a href="#重叠详解" class="headerlink" title="重叠详解"></a>重叠详解</h3><p>重叠可谓是 margin 中的最重要的潜规则了。</p><h4 id="发生情景"><a href="#发生情景" class="headerlink" title="发生情景"></a>发生情景</h4><ol><li>相邻的兄弟元素</li><li>父级和第一个/最后一个子元素</li><li>空的块级元素（自己和自己）</li></ol><h4 id="重叠条件"><a href="#重叠条件" class="headerlink" title="重叠条件"></a>重叠条件</h4><ol><li>块级元素 （不包括 float 和 absolute 元素）</li><li>不考虑 writing-mode，只发生在垂直方向 （margin-top/margin-bottom）</li><li><p>父子 重叠条件</p><ul><li><p>margin-top 重叠</p><ol><li>父元素 非格式化上下文元素 没有设置 overflow:hidden</li><li>父元素没有 border-top 设置</li><li>父元素没有 padding-top 设置</li><li>父元素和第一个子元素之间没有 inline 元素分割</li></ol></li><li><p>margin-bottom 重叠</p><ol><li>父元素 非格式化上下文元素 没有设置 overflow:hidden</li><li>父元素没有 border-bottom 设置</li><li>父元素没有 padding-bottom 设置</li><li>父元素和第一个子元素之间没有 inline 元素分割</li><li>父元素没有 height ，min-height，max-height 限制</li></ol></li></ul></li><li><p>空的块级元素 margin 重叠条件</p><ol><li>元素没有 border 设置</li><li>元素没有 padding 设置</li><li>里面没有 inline 元素</li><li>没有 height，或者 min-height</li></ol></li></ol><h4 id="计算规则"><a href="#计算规则" class="headerlink" title="计算规则"></a>计算规则</h4><ol><li><p>正正取大值</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#top</span> {</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#bottom</span> {</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">两个元素垂直距离为 : #top 元素的 margin-top 值</span><br></pre></td></tr></tbody></table></figure></li><li><p>正负值相加</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#top</span> {</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">30px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#bottom</span> {</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">两个元素垂直距离为: #top 元素的 margin-top 值 加上 #bottom 元素的 margin-bottom 值</span><br></pre></td></tr></tbody></table></figure></li><li><p>负负最负值</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#top</span> {</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">30px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#bottom</span> {</span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">20px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">两个元素垂直距离为 : #top 元素的 margin-top 值</span><br></pre></td></tr></tbody></table></figure></li><li><p>父级和第一个/最后一个子元素 发生重叠给子元素设置垂直方向的 margin ，等同于 给父元素设置相同的垂直方向的 margin 属性，也就是说 父子元素发生 margin 重叠时， 它们俩共用一个 margin 属性</p></li></ol><h4 id="重叠意义"><a href="#重叠意义" class="headerlink" title="重叠意义"></a>重叠意义</h4><ul><li>连续段落或列表之类，如果没有 margin 重叠，排版会不自然。</li><li>页面中任何地方，嵌套或直接放入任何空的 div，都不会影响原来的布局。</li><li>遗落空的任意多个 p 元素，不会影响原来的阅读排版。</li></ul><h3 id="margin-auto"><a href="#margin-auto" class="headerlink" title="margin auto"></a>margin auto</h3><p>当你使用 <code>margin auto</code> 时，就应该联想到一个词 ：<strong>填充</strong></p><blockquote><p>一个没有设置宽高的块级元素，会自动填充宽度如果 一侧是定值，一侧是 auto，则 auto 为剩余空间的大小如果两侧均是 auto，则平分 剩余空间</p></blockquote><p>示例如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#demo</span> {</span></span><br><span class="line">    width: 500px;</span><br><span class="line">    margin-right: 100px;</span><br><span class="line"><span class="css">    <span class="comment">/* margin-left: 100vw - margin-right - width*/</span></span></span><br><span class="line">    margin-left: auto;</span><br><span class="line">  }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="margin-auto-0-垂直居中"><a href="#margin-auto-0-垂直居中" class="headerlink" title="margin:auto 0 !== 垂直居中"></a>margin:auto 0 !== 垂直居中</h4><p>以上，我们可得当一个块级元素设置了 <code>margin: 0 auto</code> 可以实现水平居中，</p><p>而为什么 margin:auto 0 不会垂直居中？</p><p>答：一个块级元素会自动填充可用的水平尺寸，但不会填充垂直尺寸，是因为其根本没有任何可用的垂直空间。也就是说 margin: 0 auto , 总是有尺寸可以来填充的！ 而 margin: auto 0 是没有任何尺寸的可以来填充的。</p><h4 id="失效情况"><a href="#失效情况" class="headerlink" title="失效情况"></a>失效情况</h4><p>当子元素的宽度大于父元素的宽度 ，是无法通过 margin: 0 auto 实现居中的因为，这个时候已经没有任何空间可以填充了，当宽度超出父元素时，margin 已经为负值了。</p><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ol><li><p>writing-mode 与垂直居中</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> {</span><br><span class="line">  <span class="attribute">writing-mode</span>: vertical-lr; <span class="comment">/* 更改流的方向为 垂直方向 */</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.son</span> {</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>绝对定位元素</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> {</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.child</span> {</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="失效情景"><a href="#失效情景" class="headerlink" title="失效情景"></a>失效情景</h3><ol><li>inline 水平元素的垂直 margin 无效（margin-top/margin-bottom）</li><li>margin 重叠发生</li><li>绝对定位元素非定位方位的 margin 值 “无效”因为 绝对定位元素 脱离了文档流，与相邻元素没有关系，所以它不可能像普通元素一样，设置 margin，推走其他元素</li><li>margin 鞭长莫及因为 有某些元素破坏了 文档流，设置了 float absolute，造成了假象，margin 不会根据 这些破坏元素作为标准</li><li>display:table-cell/display:table-row 等声明的 margin 无效！某些替换元素除外，根据各个浏览器的实现方式作为区分。比如，给 button 元素声明 display:table-cell，但在 chrome 中,button 的 display 属性是 inline-block 。</li><li>内联特性导致 margin 失效margin-top: 负无穷， 但是，小到 1em 便无效了。因为它是内联元素，默认是基线对齐，x 字母下边缘对齐，margin 值再大，也不会起作用。示例如下：<p data-height="370" data-theme-id="0" data-slug-hash="mXQREv" data-default-tab="css,result" data-user="Tomotoes" data-embed-version="2" data-pen-title="margin 负无穷情景解析" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/Tomotoes/pen/mXQREv/" target="_blank" rel="external nofollow noopener noreferrer">margin 负无穷情景解析</a> by Simon Ma (<a href="https://codepen.io/Tomotoes" target="_blank" rel="external nofollow noopener noreferrer">@Tomotoes</a>) on <a href="https://codepen.io" target="_blank" rel="external nofollow noopener noreferrer">CodePen</a>.</p><script async="" src="https://static.codepen.io/assets/embed/ei.js"></script></li></ol><h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><ol><li><p>margin-start</p><ul><li>正常流向，margin-start 等同于 margin-left，两者重叠不相加</li><li>如果水平流向是从右向左，margin-start 等同于 margin-right</li><li>在垂直流下 ( writing-mode:vertical-*; ) margin-start 等同于 margin-top</li></ul></li><li><p>margin-end 与 margin-start 相对</p></li><li>margin-before 默认情况等同于 margin-top</li><li><p>margin-after 默认情况等同于 margin-bottom</p></li><li><p>margin-collapse</p><ul><li>margin-collapse:collapse;<blockquote><p>(默认值) 发生重叠</p></blockquote></li><li>margin-collapse:discard;<blockquote><p>取消重叠，margin 重叠部分为 0 ，没有 margin</p></blockquote></li><li>margin-collapse:separate;<blockquote><p>不发生重叠，margin 重叠部分为 margin-top + margin-bottom</p></blockquote></li></ul></li></ol><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>margin 课程就到此结束了，再次感谢<a href="http://www.zhangxinxu.com/" target="_blank" rel="external nofollow noopener noreferrer">张鑫旭老师</a>的辛苦付出！本系列就持续更新中，期待你的关注~</p><p>转载本站文章请注明作者和出处 <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。</p><style>.post-toc-level-4{display:none;}</style>]]></content>
    
    <summary type="html">
    
      margin属性讲解，十分全面。
    
    </summary>
    
    
      <category term="前端" scheme="https://tomotoes.com/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://tomotoes.com/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="https://tomotoes.com/blog/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Git 修炼手册</title>
    <link href="https://tomotoes.com/blog/git-training-manual/"/>
    <id>https://tomotoes.com/blog/git-training-manual/</id>
    <published>2018-01-27T01:58:00.000Z</published>
    <updated>2021-10-05T10:24:13.146Z</updated>
    
    <content type="html"><![CDATA[<p>Git 命令大汇总。<a id="more"></a></p><h3 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h3><h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4><ol><li><p>git config –global user.name Simon</p><blockquote><p>设置自己的用户名</p></blockquote></li><li><p>git config –global user.email <a href="mailto:jinmaup@gmail.com" rel="external nofollow noopener noreferrer" target="_blank">jinmaup@gmail.com</a></p><blockquote><p>设置自己的邮箱</p></blockquote></li></ol><h4 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h4><p>git config –list</p><blockquote><p>查看自己 git 的配置信息</p></blockquote><h4 id="设置编辑器"><a href="#设置编辑器" class="headerlink" title="设置编辑器"></a>设置编辑器</h4><p>git config –global core.editor vim</p><blockquote><p>当你用 git 编辑文件时，编辑文件的文本编辑器会默认调用 vim</p></blockquote><h4 id="文本着色"><a href="#文本着色" class="headerlink" title="文本着色"></a>文本着色</h4><p>git config –global color.ui true</p><blockquote><p>可为大部分 git 的代码布上颜色</p></blockquote><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="建立版本库"><a href="#建立版本库" class="headerlink" title="建立版本库"></a>建立版本库</h4><ol><li><p>git init</p><blockquote><p>当前路径文件 初始化为 Git 仓库（可以发现 当前路径增加了.git 文件夹）</p></blockquote></li><li><p>git init 文件夹名</p><blockquote><p>新建一个文件夹，并将其初始化为 Git 代码库</p></blockquote></li></ol><h4 id="文件添加到暂存区"><a href="#文件添加到暂存区" class="headerlink" title="文件添加到暂存区"></a>文件添加到暂存区</h4><ol><li><p>git add .</p><blockquote><p>把当前目录所有未追踪文件，已修改的文件，添加到暂存区 (不包括被删除的文件)</p></blockquote></li><li><p>git add 文件（夹）名</p><blockquote><p>把特定文件（夹）添加到暂存区</p></blockquote></li><li><p>git add -A</p><blockquote><p>提交所有的文件操作到暂存区</p></blockquote></li><li><p>git add -u</p><blockquote><p>提交已修改的文件,被删除的文件（不包括新文件）</p></blockquote></li><li><p>git add -p</p><blockquote><p>交互式的缓存提交，会提供多个选项来自定义提交内容、方式</p></blockquote></li></ol><h4 id="文件添加到本地仓库"><a href="#文件添加到本地仓库" class="headerlink" title="文件添加到本地仓库"></a>文件添加到本地仓库</h4><ol><li><p>git commit -m”commit message”</p><blockquote><p>把暂存区的所有文件添加到本地仓库，-m”提交信息” （越详细越好）</p></blockquote></li><li><p>git commit 文件（夹）名 -m”commit message”</p><blockquote><p>把特定文件（夹）添加到本地仓库，-m”提交信息” （越详细越好）</p></blockquote></li><li><p>git commit -am”commit message”</p><blockquote><p>针对已经被追踪的文件，可以直接添加到本地仓库，不用先 add 在 commit.</p></blockquote></li><li><p>git commit –amend -m”commit message”</p><blockquote><p>利用本次 commit 重写上一次 commit</p></blockquote></li><li><p>git commit –amend –no-edit</p><blockquote><p>利用本次 commit 重写上一次 commit 不会重写上次 commit 的提交信息</p></blockquote></li></ol><h4 id="仓库状态获取"><a href="#仓库状态获取" class="headerlink" title="仓库状态获取"></a>仓库状态获取</h4><p>git status</p><blockquote><p>可以立即获取本地仓库状态 以及 git 的步骤提示，建议多使用此命令</p></blockquote><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ol><li><p>git reset –hard HEAD</p><blockquote><p>将工作区，暂存区，本地仓库恢复到上一个版本（–hard）</p></blockquote></li><li><p>git reset –soft HEAD^^^</p><blockquote><p>将本地仓库恢复到上三个版本,不会修改暂存区，工作区（–soft）</p></blockquote></li><li><p>git reset –mixd HEAD~5</p><blockquote><p>将暂存区，本地仓库恢复到上五个版本，不会修改工作区（–mixd，默认）</p></blockquote></li><li><p>git reset –hard commitID</p><blockquote><p>将工作区，暂存区，本地仓库恢复到上指定版本其中 commitID 就是每一次 commit 的版本号，可以使用 git reflog 获取</p></blockquote></li></ol><h4 id="撤销暂存"><a href="#撤销暂存" class="headerlink" title="撤销暂存"></a>撤销暂存</h4><ol><li><p>git reset HEAD file.txt</p><blockquote><p>撤销 file.txt 的 add 操作，使其变成不跟踪状态</p></blockquote></li><li><p>git reset HEAD^ file.txt</p><blockquote><p>将上一次提交版本的 file.txt 重新置入缓存区</p></blockquote></li></ol><h4 id="撤销工作区"><a href="#撤销工作区" class="headerlink" title="撤销工作区"></a>撤销工作区</h4><ol><li><p>git checkout – file.txt</p><blockquote><p>（只针对未追踪文件）用历史中的 file.txt 替换现有工作区的 file.txt 如果文件增加到暂存区后 又进行了修改，那么执行命令后 将回到暂存区文件状态</p></blockquote></li><li><p>git checkout HEAD – file.txt</p><blockquote><p>用最后一次提交版本中的 file.txt 替换现有工作区的 file.txt</p></blockquote></li><li><p>git checkout commitID – file.txt</p><blockquote><p>用特定版本的 file.txt 替换现有工作区的 file.txt</p></blockquote></li></ol><h4 id="撤销提交"><a href="#撤销提交" class="headerlink" title="撤销提交"></a>撤销提交</h4><p>git revert commitID</p><blockquote><p>撤销指定版本的 commit，并将此操作生成一个全新的 commit 并提交</p></blockquote><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><ol><li><p>touch</p><blockquote><p>touch 文件名 ： 新建文件</p></blockquote></li><li><p>mkdir</p><blockquote><p>mkdir 文件夹名： 新建文件夹</p></blockquote></li><li><p>vim</p><blockquote><p>vim  文件名 ： 新建文件，并用 vim 模式打开该文件进行编写</p></blockquote></li><li><p>git init</p><blockquote><p>git init 文件夹名：新建一个文件夹，并将其初始化为 Git 代码库</p></blockquote></li><li><p>printf </p><blockquote><p>printf ‘content’ &gt; 文件名 ：新建一个文件，并把 content 注入其内容</p></blockquote></li><li><p>echo </p><blockquote><p>echo ‘content’ &gt; 文件名 ：新建一个文件，并把 content 注入其内容</p></blockquote></li></ol><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><ol><li><p>rm</p><blockquote><p>rm 文件名 : 删除文件</p></blockquote></li><li><p>clean</p><blockquote><p>git clean -f 文件名 ：删除未跟踪文件</p></blockquote></li></ol><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><ol><li><p>vim</p><blockquote><p>vim 文件名 ： 打开文件，并用 vim 模式进行修改</p></blockquote></li><li><p>mv</p><blockquote><p>mv 选定文件名 新的文件名：把选定文件名 修改为 新的文件名</p></blockquote></li><li><p>printf</p><blockquote><p>printf ‘content’ &gt; 文件名 ： 将 content 替换 文件原有内容</p></blockquote></li><li><p>echo</p><blockquote><p>echo ‘content’ &gt; 文件名 ： 将 content 替换 文件原有内容</p></blockquote></li></ol><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><ol><li><p>pwd</p><blockquote><p>得到当前路径</p></blockquote></li><li><p>cd</p><blockquote><p>cd 路径 ：进到某一文件路径 cd .. : 回退文件路径cd    : 回到默认的路径 </p></blockquote></li><li><p>cat</p><blockquote><p>cat 文件名：查看该文件的内容</p></blockquote></li><li><p>ls</p><blockquote><p>查看该目录下的文件列表（不包括隐藏文件）</p></blockquote></li><li><p>ls -a</p><blockquote><p>查看该目录下的文件列表（包括隐藏文件）</p></blockquote></li><li><p>show</p><blockquote><p>git show <branch-name>:<file-name> ：展示任意分支某一文件的内容</file-name></branch-name></p></blockquote></li></ol><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><ol><li><p>git branch</p><blockquote><p>列出本地分支   </p></blockquote></li><li><p>git branch -r  </p><blockquote><p>列出远端分支   </p></blockquote></li><li><p>git branch -a </p><blockquote><p>列出所有分支   </p></blockquote></li><li><p>git branch -v</p><blockquote><p>查看各个分支最后一个提交对象的信息   </p></blockquote></li><li><p>git branch –merge</p><blockquote><p>查看已经合并到当前分支的分支   </p></blockquote></li><li><p>git branch –no-merge</p><blockquote><p>查看为合并到当前分支的分支  </p></blockquote></li><li><p>git remote show origin </p><blockquote><p>可以查看 remote 地址，远程分支</p></blockquote></li></ol><h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h4><ol><li><p>git branch name</p><blockquote><p>新建一个名为 name 的分支</p></blockquote></li><li><p>git checkout -b name</p><blockquote><p>新建一个名为 name 的分支，并自动切换为该分支</p></blockquote></li><li><p>git branch [branch] [commit]</p><blockquote><p>新建一个分支，指向指定 commit</p></blockquote></li><li><p>git branch –track [branch] [remote-branch]</p><blockquote><p>新建一个分支，与指定的远程分支建立追踪关系</p></blockquote></li></ol><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><ol><li><p>git branch -d name</p><blockquote><p>删除一个名为 name 的分支</p></blockquote></li><li><p>git branch -D name</p><blockquote><p>强制删除一个名为 name 的分支</p></blockquote></li><li><p>git push <originname> :<branch></branch></originname></p><blockquote><p>删除远程分支</p></blockquote></li><li><p>git push origin –delete <remote-branchname></remote-branchname></p><blockquote><p>删除远程分支</p></blockquote></li></ol><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><ol><li><p>git checkout name</p><blockquote><p>切换一个名为 name 的分支</p></blockquote></li><li><p>git checkout -</p><blockquote><p>切换上一个分支</p></blockquote></li></ol><h4 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h4><ol><li>git branch -m name<blockquote><p>将当前所在分支命名为 name</p></blockquote></li></ol><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h4><ol><li><p>git tag [tag]</p><blockquote><p>新建一个 tag 在当前 commit</p></blockquote></li><li><p>git tag [tag] [commit]</p><blockquote><p>新建一个 tag 在指定 commit</p></blockquote></li><li><p>git tag v0.9 commitID</p><blockquote><p>对某次提交新建标签</p></blockquote></li></ol><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><ol><li>git tag<blockquote><p>列出所有 tag</p></blockquote></li></ol><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><ol><li><p>git tag -d [tag]</p><blockquote><p>删除本地 tag</p></blockquote></li><li><p>git push origin :refs/tags/<tagname></tagname></p><blockquote><p>可以删除一个远程标签</p></blockquote></li></ol><h4 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h4><ol><li><p>git push origin –tags</p><blockquote><p>一次性推送全部尚未推送到远程的本地标签</p></blockquote></li><li><p>git push origin <tagname></tagname></p><blockquote><p>可以推送一个本地标签</p></blockquote></li></ol><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><ol><li><p>git remote</p><blockquote><p>显示所关联的远程仓库</p></blockquote></li><li><p>git remote -v</p><blockquote><p>显示更详细信息</p></blockquote></li><li><p>git remote add origin git@server-name:path/repo-name.git</p><blockquote><p>关联一个远程库</p></blockquote></li><li><p>git remote rm name</p><blockquote><p>删除一个远程库</p></blockquote></li><li><p>git remote rename <old-name> <new-name></new-name></old-name></p><blockquote><p>将远程连接从 <old-name> 重命名为 <new-name></new-name></old-name></p></blockquote></li></ol><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><ol><li><p>git rebase master</p><blockquote><p>将 master 分之上超前的提交，变基到当前分支  </p></blockquote></li><li><p>git rebase –interactive</p><blockquote><p>交互模式，修改 commit   </p></blockquote></li><li><p>git rebase –continue</p><blockquote><p>处理完冲突继续合并   </p></blockquote></li><li><p>git rebase –skip</p><blockquote><p>跳过合并</p></blockquote></li><li><p>git rebase –abort</p><blockquote><p>取消合并</p></blockquote></li></ol><h3 id="查看汇总"><a href="#查看汇总" class="headerlink" title="查看汇总"></a>查看汇总</h3><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><ol><li><p>git whatchanged –since=’2 weeks ago’</p><blockquote><p>查看两个星期内的改动</p></blockquote></li><li><p>git log –follow [file]</p><blockquote><p>显示某个文件的版本历史</p></blockquote></li><li><p>git log –author=”John”</p><blockquote><p>它会显示所有作者叫 John 的提交</p></blockquote></li><li><p>get log –after=”yesterday”</p><blockquote><p>查看昨天的历史信息</p></blockquote></li><li><p>git log -3</p><blockquote><p>展示最近 3 次历史信息</p></blockquote></li><li><p>git log –graph</p><blockquote><p>可以看到分支合并图</p></blockquote></li></ol><h4 id="修改历史"><a href="#修改历史" class="headerlink" title="修改历史"></a>修改历史</h4><p>git rebase -i commitID </p><blockquote><p>将 pick 替换成 r , 然后回车，vi 退出可以使用 :x修改 git 的历史记录的提交信息</p></blockquote><h4 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h4><ol><li><p>git diff HEAD – readme.txt</p><blockquote><p>可以查看工作区和版本库里面最新版本的区别</p></blockquote></li><li><p>git diff –staged </p><blockquote><p>显示暂存区（已经 add）的文件和版本库文件的比较</p></blockquote></li><li><p>git ls-files</p><blockquote><p>查看在暂存区的文件</p></blockquote></li></ol><h4 id="删除暂存"><a href="#删除暂存" class="headerlink" title="删除暂存"></a>删除暂存</h4><ol><li>git rm –cached 文件名<blockquote><p>把文件从暂缓区 返回至 工作区</p></blockquote></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>echo node_modules/ &gt;&gt; .gitignore</p><blockquote><p>添加忽略文件</p></blockquote><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><ol start="2"><li><p>git archive master –format=zip –output=master.zip</p><blockquote><p>将 Master 分支打包</p></blockquote></li><li><p>git bundle create <file> <branch-name></branch-name></file></p><blockquote><p>将历史记录包括分支内容打包到一个文件中</p></blockquote></li><li><p>git clone repo.bundle <repo-dir> -b <branch-name></branch-name></repo-dir></p><blockquote><p>从某个 Bundle 中导入</p></blockquote></li></ol><h4 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h4><ol><li><p>git stash </p><blockquote><p>将工作区现场（已跟踪文件）储藏起来</p></blockquote></li><li><p>git stash list  </p><blockquote><p>查看保存的工作现场   </p></blockquote></li><li><p>git stash apply  </p><blockquote><p>恢复工作现场   </p></blockquote></li><li><p>git stash drop  </p><blockquote><p>删除 stash 内容   </p></blockquote></li><li><p>git stash pop   </p><blockquote><p>恢复的同时直接删除 stash 内容   </p></blockquote></li><li><p>git stash apply stash@{0}  </p><blockquote><p>恢复指定的工作现场</p></blockquote></li></ol><h4 id="查找内容"><a href="#查找内容" class="headerlink" title="查找内容"></a>查找内容</h4><ol><li><p>git grep “Hello”</p><blockquote><p>从当前目录的所有文件中查找文本内容</p></blockquote></li><li><p>git grep “Hello” v2.5</p><blockquote><p>在某一版本中搜索文本</p></blockquote></li></ol><h4 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h4><p>git help -a</p><style>.post-toc-level-4{ display:none }</style>]]></content>
    
    <summary type="html">
    
      Git命令汇总。
    
    </summary>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Git" scheme="https://tomotoes.com/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>网站必备之简繁切换</title>
    <link href="https://tomotoes.com/blog/simplified-chinese-and-traditional-chinese-switching/"/>
    <id>https://tomotoes.com/blog/simplified-chinese-and-traditional-chinese-switching/</id>
    <published>2018-01-26T10:17:31.000Z</published>
    <updated>2021-10-05T10:24:13.194Z</updated>
    
    <content type="html"><![CDATA[<p>一个优秀网站能够更好地照顾不同的用户。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;一个优秀的网站为了能够更好地照顾不同的用户，一般都会提供简繁两种版本字体切换，提高用户的体验。例如 : <a href="https://hexo.io/zh-cn/" target="_blank" rel="external nofollow noopener noreferrer">Hexo 官网</a> 。之所以 Hexo 能得到了不少内地忠实粉丝的追捧，是因为 Hexo 的官网不仅提供了适合台湾同胞<em>（作者是来自台湾的）</em>阅读的繁体中文版，还为我们大陆用户提供了简体中文版，照顾了我们平时的写作习惯。同样，我们也可以提供繁体版来照顾那些使用繁体字的台湾、港澳同胞。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;下面，我将由浅入深地讲解：如何使用 35 行代码，让网站支持简繁切换功能。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;一般而言，网站上实现两种字体的切换，需要先准备两种字体库，而基本逻辑通常是：识别当前字体，然后根据当前字体去相对的字体库中去寻找另一字体，从而进行字体的替换，处理起来不但麻烦而且耗时。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;有没有一种方法，可以绕开这些弯路呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;答案是有的，我们可以利用<strong>数组索引的特性</strong>来完成，具体逻辑如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Exchange</span>(<span class="params">text</span>)</span>{</span><br><span class="line">  <span class="keyword">const</span> Simplified = <span class="string">"万与丑"</span>;</span><br><span class="line">  <span class="keyword">const</span> Traditional = <span class="string">"萬與醜"</span>;<span class="comment">//翻译成简体：万与丑 </span></span><br><span class="line">  <span class="keyword">let</span> result,findIndex;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;text.length;++i){</span><br><span class="line">      findIndex = Simplified.indexOf(text[i]);</span><br><span class="line">      result += findIndex === <span class="number">-1</span> ? text[i] : Traditional[j];</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>&nbsp;&nbsp;&nbsp;&nbsp;系统来讲，切换字体的大体过程 可分为 3 大步骤：<p></p><ol><li>得到页面的字体内容</li><li>切换为简繁字体</li><li>保存状态与切换状态</li></ol><h3 id="得到页面的内容"><a href="#得到页面的内容" class="headerlink" title="得到页面的内容"></a>得到页面的内容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;毫无疑问，我们所要切换的内容便是<strong>页面中的汉字</strong>，众所周知，判断汉字可以使用正则表达式<code>/[\u4e00-\u9fa5]/g</code>，而我们在第一步 所面临的最大问题便是：如何得到页面中所有的字体内容。分析网页中结构可得，显示给用户的内容一般都在<code>body</code>标签中或者其各个子标签中，我们该如何获取这些包裹着内容的标签呢？又该如何判断 元素与所需字体呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;下面，我将带你学习两个原生 JS 的 API 。</p><h4 id="childNodes"><a href="#childNodes" class="headerlink" title="childNodes"></a>childNodes</h4><blockquote><p>childNodes 属性返回节点的子节点集合，包括 元素节点、文本内容、注释、属性等。</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.childNodes;<span class="comment">/* 获得 body 元素的子节点集合*/</span></span><br></pre></td></tr></tbody></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;可以想象到，我们先将 <code>document.body.childNodes</code> 作为入口 循环遍历，然后再如法炮制的递归各个元素，便可得到 body 标签中 所有的 DOM 节点以及节点中所需的文本内容。</p><h4 id="nodeType"><a href="#nodeType" class="headerlink" title="nodeType"></a>nodeType</h4><blockquote><p>nodeType 属性返回以数字值返回指定节点的节点类型。如果节点是元素节点，则 nodeType 属性将返回 1。如果节点是文本节点，则 nodeType 属性将返回 3。</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.nodeType === <span class="number">1</span>;<span class="comment">/* true */</span></span><br></pre></td></tr></tbody></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;有了 nodeType 作为当前元素的判断，我们便可轻松的分离出 DOM 节点与 文本节点，从而来进行不同需求的操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;大体逻辑如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translateBody</span>(<span class="params">obj</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> objs = (obj ? obj : <span class="built_in">document</span>.body).childNodes;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; objs.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (objs[i].nodeType === <span class="number">3</span>) {</span><br><span class="line">            objs[i].textContent = Exchange(objs[i].textContent);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (objs[i].nodeType === <span class="number">1</span> ) {</span><br><span class="line">            translateBody(objs[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>&nbsp;&nbsp;&nbsp;&nbsp;这样，我们便得到了所需要的文本内容。下面，我们将进行 <code>Exchange</code> 函数的编写。<p></p><h3 id="切换简繁字体"><a href="#切换简繁字体" class="headerlink" title="切换简繁字体"></a>切换简繁字体</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;毫无疑问，切换字体最大的困难，就是索引相同的字体库了。所幸，我从网上寻得了前辈总结的资源，欢迎大家使用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Simplified = <span class="string">"万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾"</span>;</span><br><span class="line"><span class="keyword">const</span> Traditional = <span class="string">"萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽"</span>;</span><br></pre></td></tr></tbody></table></figure>&nbsp;&nbsp;&nbsp;&nbsp;根据上面的总结，<code>Exchange</code> 函数编写如下：<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Exchange</span>(<span class="params">text</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">''</span>, j,</span><br><span class="line">        s = <span class="string">"万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾"</span>,</span><br><span class="line">        t = <span class="string">"萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽"</span>;</span><br><span class="line">    <span class="keyword">if</span> (!currentEncoding) {<span class="comment">//如果当前是 繁体切换为简体，进行交换。</span></span><br><span class="line">        j = s; s = t; t = j;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) {</span><br><span class="line">        j = s.indexOf(text[i]);</span><br><span class="line">        result += j === <span class="number">-1</span> ? text[i] : t[j];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="保存与切换状态"><a href="#保存与切换状态" class="headerlink" title="保存与切换状态"></a>保存与切换状态</h3><h4 id="保存状态"><a href="#保存状态" class="headerlink" title="保存状态"></a>保存状态</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;相信学习过 HTML5 的同学都对<code>localStorage</code>有一点的了解吧，我们就利用它来进行当前状态的保存。当用户进入网站时，读取曾经保存的状态，而每当状态的切换，我们都要刷新当前存储的值。另外，值得注意得是，<code>localStorage</code>中存储的是字符串类型的值，必须对其进行转换，才能使用，如下所示：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (localStorage.getItem(<span class="string">"targetEncoding"</span>) === <span class="string">"false"</span>) {</span><br><span class="line">   <span class="comment">/* doSomething... */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="切换状态"><a href="#切换状态" class="headerlink" title="切换状态"></a>切换状态</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;目前我们的需求是简繁字体切换，充其量就是两种状态的保存，用 布尔类型 一定是没错的。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentEncoding = targetEncoding = <span class="literal">true</span>;</span><br></pre></td></tr></tbody></table></figure>&nbsp;&nbsp;&nbsp;&nbsp;我们定义了两个变量，当 <code>currentEncoding</code>的值为 true 时，说明 当前字体为简体，反之为繁体。而<code>targetEncoding</code>永远指向 <code>currentEncoding</code>下一个要切换的状态。<p></p><p>&nbsp;&nbsp;&nbsp;&nbsp;当切换状态时， 逻辑如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">currentEncoding = targetEncoding;</span><br><span class="line">targetEncoding = !targetEncoding;</span><br></pre></td></tr></tbody></table></figure><p></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Ok ，大体过程就搞定了，下面是源码~</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p><a id="codeHide" class="alone button button-3d button-primary button-rounded" onclick="$('#sourceCode').slideToggle('slow')">点击显/隐源文件</a></p><div id="sourceCode" style="display:none;padding-top:0.5em;"><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentEncoding = targetEncoding = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> stopDOM = [<span class="string">"BR"</span>,<span class="string">"TIME"</span>,<span class="string">"IMG"</span>,<span class="string">"CANVAS"</span>,<span class="string">"SCRIPT"</span>];</span><br><span class="line"><span class="keyword">if</span> (localStorage.getItem(<span class="string">"targetEncoding"</span>) === <span class="string">"false"</span>) {</span><br><span class="line">    targetEncoding = <span class="literal">false</span>;</span><br><span class="line">    translateBody();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translateBody</span>(<span class="params">obj</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> objs = (obj ? obj : <span class="built_in">document</span>.body).childNodes;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; objs.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (objs[i].nodeType === <span class="number">3</span> &amp;&amp; <span class="regexp">/[\u4e00-\u9fa5]/g</span>.test(objs[i].textContent)) {</span><br><span class="line">            objs[i].textContent = Exchange(objs[i].textContent);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (objs[i].nodeType === <span class="number">1</span> &amp;&amp; !stopDOM.includes(objs[i].tagName)) {</span><br><span class="line">            translateBody(objs[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Exchange</span>(<span class="params">text</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">''</span>, j,</span><br><span class="line">        s = <span class="string">"万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾"</span>,</span><br><span class="line">        t = <span class="string">"萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽"</span>;</span><br><span class="line">    <span class="keyword">if</span> (!currentEncoding) {</span><br><span class="line">        j = s; s = t; t = j;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) {</span><br><span class="line">        j = s.indexOf(text[i]);</span><br><span class="line">        result += j === <span class="number">-1</span> ? text[i] : t[j];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 调用函数: button.onclick = translatePage() */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translatePage</span>(<span class="params"></span>) </span>{</span><br><span class="line">    currentEncoding = targetEncoding;</span><br><span class="line">    targetEncoding = !targetEncoding;</span><br><span class="line">    localStorage.setItem(<span class="string">"targetEncoding"</span>, targetEncoding);</span><br><span class="line">    translateBody();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p></p><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      网站必备之简繁切换，简繁互换功能。
    
    </summary>
    
    
      <category term="前端" scheme="https://tomotoes.com/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="博客" scheme="https://tomotoes.com/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="前端" scheme="https://tomotoes.com/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>神奇的位运算</title>
    <link href="https://tomotoes.com/blog/magic-bit-operation/"/>
    <id>https://tomotoes.com/blog/magic-bit-operation/</id>
    <published>2018-01-25T08:32:02.000Z</published>
    <updated>2021-10-05T10:24:13.194Z</updated>
    
    <content type="html"><![CDATA[<p>位运算在计算机领域的作用可谓举足轻重。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，我们要了解一个概念：<strong>程序中的所有数在计算机内存中都是以二进制的形式储存的</strong>。而位运算，就是直接对在内存中的二进制位进行操作，跳过了 程序转义成二进制的这一步骤，对编译时间有所提高，但带来的缺点也很明显，程序的可读性变低了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;掌握位运算 是一位程序员的基本素养，位运算在计算机领域的作用可谓举足轻重。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;下面我将讲解 位运算的大体方法以及一些基本的应用。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="and-运算"><a href="#and-运算" class="headerlink" title="and 运算"></a>and 运算</h3><blockquote><p>只有对应的两个 二进制数，均为 1，结果才为 1，否则为 0</p></blockquote><h4 id="amp-1"><a href="#amp-1" class="headerlink" title="&amp; 1"></a>&amp; 1</h4><p><strong>判断 n 的第 m 位数</strong>。</p><p>介绍两个重要应用，来证明其含义：</p><ol><li>(n &gt;&gt;m ) &amp; 1 判断 整数 n 的二进制 第 m 位 是否 为 1 或者 为 0n 的第 m 位数，如果为 1 ，1&amp;1 就返回 1 ，如果为 0，0&amp;1 就返回 0</li><li>判断 奇偶性 如果 n 为奇数，辗转相除 2，最后的余数 必定为 1，如果 n 为偶数，辗转相除 余数必定为 0也就是说，n 为奇数，n&amp;1 等价于 1&amp;1 ，返回 1，n 为偶数，n&amp;1 等价于 0&amp;1，返回 0 </li></ol><h4 id="amp-0"><a href="#amp-0" class="headerlink" title="&amp; 0"></a>&amp; 0</h4><p><strong>将 n 的第 m 位数，重置为 0</strong>基本应用：n &amp; ~(1 &lt;&lt; m)</p><ol><li><p>1 &lt;&lt; m 定位到 n 的第 m 位数</p></li><li><p>~(1 &lt;&lt; m)将 1 进行非运算，变为 0，其他剩下的 m 位，变成 1，而 &amp;1，是无实际作用的</p></li><li><p>n &amp; 0 ：&amp; 按位与运算只有对应的两个数 全部为 1 时，结果才为 1，而&amp;0，返回值一定为 0</p></li></ol><h3 id="or-运算"><a href="#or-运算" class="headerlink" title="or 运算"></a>or 运算</h3><blockquote><p>只有对应的两个 二进制数，均为 0，结果才为 0，否则为 1</p></blockquote><h4 id="1"><a href="#1" class="headerlink" title="| 1"></a>| 1</h4><p><strong>将 n 的第 m 位数，重置为 1</strong></p><p>基本应用：n | (1 &lt;&lt; m):</p><ol><li><p>1 &lt;&lt; m<br>定位到 n 的第 m 位数</p></li><li><p>n | 1<br>n 的第 m 位数 进行 |1 操作 其返回值必定为 1！因为|只有，两个数都为 0 时，结果才为 0 </p></li></ol><h4 id="0"><a href="#0" class="headerlink" title="| 0"></a>| 0</h4><p>无实际作用</p><p>一定要清楚， 是 n 的第 m 位数 在进行操作，其他 位数操作，根本无 影响</p><p>因为，其他位数，是 在进行 “| 0” 操作，而所谓的 |0 操作，与 &amp;1 操作，毫无差别。</p><p>假设 k=n 的第 m 位数，k = 1 ，k|0 = 1|0 = 1，k = 0，k|0 = 0|0 = 0，所谓 无实际作用。</p><p>但是要注意一点，我说的 0 是在二进制数中的 0，有实际含义的 0，不是补 0 的 0</p><p>所以，可以感性的认识到，| 0 与 &amp; 1 以及 下文的 ^ 0，都是无实际作用的</p><h3 id="xor-运算"><a href="#xor-运算" class="headerlink" title="xor 运算"></a>xor 运算</h3><blockquote><p>只有对应的两个 二进制数相等时，结果才为 0，否则为 1</p></blockquote><h4 id="1-1"><a href="#1-1" class="headerlink" title="^ 1"></a>^ 1</h4><p><strong>将 n 的第 m 位数，取反</strong></p><p>基本应用：n ^ (1 &lt;&lt; m)</p><ol><li><p>1 &lt;&lt; m ： 定位到 n 的第 m 位数 </p></li><li><p>n ^ 1，我们要知道，^ (异或）：不相等为 1，相等为 0</p></li></ol><p>而 ^1：如果 n 的第 m 位数 为 1，1^1 返回值为 0，如果 n 的第 m 位数 为 0，0^1 返回值 为 1</p><p>所以，^1 的重要作用，就是 与之相反的作用</p><h4 id="0-1"><a href="#0-1" class="headerlink" title="^ 0"></a>^ 0</h4><p>无实际作用</p><p> 假定 整数 k 为 0，k^0 = 0^0 = 0 ; 假定整数 k 为 1，k^0 = 1^0 = 1</p><p>所以说，无论怎么变化，^0 都是无实际作用的</p><h3 id="shl-amp-shr-运算"><a href="#shl-amp-shr-运算" class="headerlink" title="shl &amp; shr 运算"></a>shl &amp; shr 运算</h3><ol><li><strong>左移运算符 “&lt;&lt;”</strong>表达式：a &lt;&lt; ba&lt;&lt;b 的值是：将 a 各二进位全部左移 b 位后得到的值。左移时，高位丢弃，低位补 0。实际上，左移 1 位，就等于是乘以 2，左移 n 位，就等于是乘以 2n。而左移操作比乘法操作快得多。<figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例如:<span class="number">9</span> &lt;&lt; <span class="number">4</span></span><br><span class="line"><span class="number">9</span>的二进制形式：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1001</span></span><br><span class="line">因此，表达式“<span class="number">9</span>&lt;&lt;<span class="number">4</span>”的值，就是将上面的二进制数左移<span class="number">4</span>位，得：</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1001</span> <span class="number">0000</span></span><br><span class="line">即为十进制的<span class="number">144</span> , 而 <span class="number">9</span>*<span class="number">2</span>的<span class="number">4</span>次幂 = <span class="number">9</span>*<span class="number">16</span> = <span class="number">144.</span></span><br></pre></td></tr></tbody></table></figure></li><li><strong>右移运算符 “&gt;&gt;”</strong> 表达式：a &gt;&gt; b a&gt;&gt;b 的值是：将 a 各二进位全部右移 b 位后得到的值。右移时，移出最右边的位就被丢弃。 对于有符号数，如 long,int,short,char 类型变量，在右移时，符号位（即最高位）将一起移动，并且大多数 C/C++编译器规定，如果原符号位为 1，则右移时高位就补充 1，原符号位为 0，则右移时高位就补充 0。<figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实际上，右移 n 位，就相当于左操作数除以<span class="number">2</span>n，并且将结果往小里取整。</span><br><span class="line">例如：<span class="number">-25</span> &gt;&gt; <span class="number">4</span> = <span class="number">-2</span>   <span class="number">-2</span> &gt;&gt; <span class="number">4</span> = <span class="number">-1</span>   <span class="number">18</span> &gt;&gt; <span class="number">4</span> = <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="对-2-的整数幂进行模运算"><a href="#对-2-的整数幂进行模运算" class="headerlink" title="对 2 的整数幂进行模运算"></a>对 2 的整数幂进行模运算</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k)){</span><br><span class="line">        n&lt;&lt;=k;<span class="comment">//相当于 n 乘以 2 的 k 次幂，并将结果赋给 n </span></span><br><span class="line">        </span><br><span class="line">        n&gt;&gt;=k;<span class="comment">//相当于 n 除以 2 的 k 次幂，并将结果赋给 n </span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="两数交换"><a href="#两数交换" class="headerlink" title="两数交换"></a>两数交换</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m)){</span><br><span class="line">        n^=m;</span><br><span class="line">        m^=n;</span><br><span class="line">        n^=m;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,n,m);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>按位异或 ^ : 不相同 为：1 ; 相同 为 ：0 将参与运算的两操作数各对应的二进制位进行异或操作，即只有对应的两个二进位不相同时，结果的对应二进制位才是 1，否则为 0。</p></blockquote></li></ol><p><strong>异或运算的特点是：如果 a^b=c，那么就有 c^b = a 以及 c^a=b</strong></p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例如：表达式“<span class="number">21</span> ^ <span class="number">18</span> ”的值是<span class="number">7</span>(即二进制数<span class="number">111</span>)。</span><br><span class="line"><span class="number">21</span>：    <span class="number">10101</span></span><br><span class="line"><span class="number">18</span>：    <span class="number">10010</span></span><br><span class="line"><span class="number">21</span>^<span class="number">18</span>:  <span class="number">00111</span></span><br><span class="line"></span><br><span class="line">假设 n = <span class="number">5</span>，m = <span class="number">6</span> </span><br><span class="line"><span class="number">5</span>的二进制为：<span class="number">101</span></span><br><span class="line"><span class="number">6</span>的二进制为：<span class="number">110</span> </span><br><span class="line"></span><br><span class="line">n^=m = <span class="number">5</span>^=<span class="number">6</span>   = <span class="number">101</span> ^ <span class="number">110</span> = <span class="number">011</span> ,</span><br><span class="line">此时 n 的二进制为：<span class="number">011</span> </span><br><span class="line"></span><br><span class="line">m^=n = <span class="number">6</span>^=<span class="number">011</span> = <span class="number">110</span> ^ <span class="number">011</span> = <span class="number">101</span> ,</span><br><span class="line">此时 m 的二进制为：<span class="number">101</span>，也正是 <span class="number">5</span>的二进制数，也就是说 m ==开始的 n </span><br><span class="line"></span><br><span class="line">n^=m = <span class="number">011</span>^=<span class="number">5</span> = <span class="number">011</span> ^ <span class="number">101</span> = <span class="number">110</span> ,</span><br><span class="line">此时 n 的二进制位：<span class="number">110</span>，也正是 <span class="number">6</span>的二进制数，也就是说 n ==开始的 m</span><br></pre></td></tr></tbody></table></figure><p>层次结构：A-&gt;B  B-&gt;A  A-&gt;B 正 反 正</p><h4 id="判断-2-的正整数幂"><a href="#判断-2-的正整数幂" class="headerlink" title="判断 2 的正整数幂"></a>判断 2 的正整数幂</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)){</span><br><span class="line">        <span class="keyword">if</span>(!(n &amp; (n<span class="number">-1</span>)) &amp;&amp; n)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d 为 2 的正整数幂\n"</span>,n);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d 不是 2 的正整数幂\n"</span>,n);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>给定整数 n 判断 n 是否为 2 的正整数幂 表达式：(! (n &amp; (n-1)) &amp;&amp; n</p></blockquote><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">举个例子： n = <span class="number">16</span> = <span class="number">10000</span>，n<span class="number">-1</span> = <span class="number">15</span> = <span class="number">1111</span></span><br><span class="line">那么 ：<span class="number">10000</span> &amp; <span class="number">01111</span> = <span class="number">00000</span> = <span class="number">0</span> </span><br><span class="line">再举个例子： n = <span class="number">256</span> = <span class="number">10000000</span> ,n<span class="number">-1</span> = <span class="number">255</span> = <span class="number">11111111</span></span><br><span class="line">那么：<span class="number">100000000</span> &amp; <span class="number">011111111</span> = <span class="number">000000000</span> = <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p>是的，如果一个数 n 是 2 的正整数幂，那么 n 的二进制必定为 1000…. n-1 的二进制必定为 1111…. <strong>即： n &amp; n-1 = 0  所以 (! (n &amp; (n-1)) 为 1 ; &amp;&amp; n ：判断 n 为正数</strong></p><h4 id="判断奇偶性"><a href="#判断奇偶性" class="headerlink" title="判断奇偶性"></a>判断奇偶性</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)){</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d 是奇数\n"</span>,n);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d 是偶数\n"</span>,n);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>记住：在做位运算时，位数不够的数，自动在 前面补 0</strong>比如：21 &amp; 1 ：10101 &amp; 00001 = 00001 = 1     16 &amp; 1 ：10000 &amp; 00001 = 00000 = 0 事实证明：偶数的二进制的末尾 为 0，奇数的二进制的末尾 为 1 </p><p>十进制 m 转换 n 进制方法： m 一直除 n，每相除一次，m 就等于商，直到商为 0，然后余数反排 即可。 </p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>的二进制：<span class="number">1</span>/<span class="number">2</span> =<span class="number">0</span> 余<span class="number">1</span></span><br><span class="line">余数反排 即是 <span class="number">1</span>的二进制：<span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="number">6</span>的二进制：<span class="number">6</span>/<span class="number">2</span> =<span class="number">3</span> 余<span class="number">0</span></span><br><span class="line">          <span class="number">3</span>/<span class="number">2</span> =<span class="number">1</span> 余<span class="number">1</span></span><br><span class="line">          <span class="number">1</span>/<span class="number">2</span> =<span class="number">0</span> 余<span class="number">1</span> </span><br><span class="line">余数反排 即是 <span class="number">6</span>的二进制：<span class="number">110</span></span><br><span class="line"></span><br><span class="line"><span class="number">15</span>的二进制：<span class="number">15</span>/<span class="number">2</span>=<span class="number">7</span> 余<span class="number">1</span></span><br><span class="line">           <span class="number">7</span>/<span class="number">2</span>=<span class="number">3</span> 余<span class="number">1</span></span><br><span class="line">           <span class="number">3</span>/<span class="number">2</span>=<span class="number">1</span> 余<span class="number">1</span></span><br><span class="line">           <span class="number">1</span>/<span class="number">2</span>=<span class="number">0</span> 余<span class="number">1</span></span><br><span class="line">余数反排 即是 <span class="number">15</span>的二进制：<span class="number">1111</span> </span><br><span class="line"></span><br><span class="line"><span class="number">5</span>的二进制：<span class="number">5</span>/<span class="number">2</span> =<span class="number">2</span> 余<span class="number">1</span></span><br><span class="line">          <span class="number">2</span>/<span class="number">2</span> =<span class="number">1</span> 余<span class="number">0</span> </span><br><span class="line">          <span class="number">1</span>/<span class="number">2</span> =<span class="number">0</span> 余<span class="number">1</span></span><br><span class="line">余数反排 即是 <span class="number">5</span>的二进制：<span class="number">101</span></span><br><span class="line"></span><br><span class="line"><span class="number">21</span>的二进制：<span class="number">21</span>/<span class="number">2</span> =<span class="number">10</span> 余<span class="number">1</span></span><br><span class="line">           <span class="number">10</span>/<span class="number">2</span> =<span class="number">5</span> 余<span class="number">0</span></span><br><span class="line">           <span class="number">5</span>/<span class="number">2</span> =<span class="number">2</span> 余<span class="number">1</span></span><br><span class="line">           <span class="number">2</span>/<span class="number">2</span> =<span class="number">1</span> 余<span class="number">0</span></span><br><span class="line">           <span class="number">1</span>/<span class="number">2</span> =<span class="number">0</span> 余<span class="number">1</span></span><br><span class="line">余数反排 即是 <span class="number">21</span>的二进制：<span class="number">10101</span></span><br></pre></td></tr></tbody></table></figure><h4 id="其他方面"><a href="#其他方面" class="headerlink" title="其他方面"></a>其他方面</h4><blockquote><p>(n &gt;&gt; m) &amp; 1 == (n &gt;&gt; m) | 0 == (n &gt;&gt; m) ^ 0</p><p>n &amp; ~(1 &lt;&lt; m) : 将 n 的第 m 位数，重置为 0</p><p>n | (1 &lt;&lt; m)  : 将 n 的第 m 位数，重置为 1</p><p>n ^ (1 &lt;&lt; m)  : 将 n 的第 m 位数，取其相反</p></blockquote><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。  </p>]]></content>
    
    <summary type="html">
    
      位运算讲解。
    
    </summary>
    
    
      <category term="后端" scheme="https://tomotoes.com/blog/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="https://tomotoes.com/blog/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="位运算" scheme="https://tomotoes.com/blog/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>让你的 Capslock 键变废为宝</title>
    <link href="https://tomotoes.com/blog/resurrect-your-capslock-key/"/>
    <id>https://tomotoes.com/blog/resurrect-your-capslock-key/</id>
    <published>2018-01-18T02:31:08.000Z</published>
    <updated>2021-10-05T10:24:13.198Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候我们是用不到 Capslock 键的。</p><a id="more"></a><h3 id="Capslock-键的劣性"><a href="#Capslock-键的劣性" class="headerlink" title="Capslock 键的劣性"></a>Capslock 键的劣性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;如果你是 Windows 系统用户，就会发现，很多时候我们是用不到 Capslock 键的。Capslock 键是切换大小写的锁定，而在平常工作中，只要摁住 Shift 键一样可完成该功能。并且 在键盘的布局上来看 ，Capslock 键 的地理位置 非常便捷，这可不是我们想要的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;下文将告诉你 如何把 作用微小的 Capslock 键 变成你的得力助手。</p><h3 id="修改前奏"><a href="#修改前奏" class="headerlink" title="修改前奏"></a>修改前奏</h3><p>本文使用的修改键的脚本语言 是使用的 AutoHotKey ，一门超级强大的脚本语言。</p><ol><li>点击<a href="https://www.autohotkey.com/download/1.1/AutoHotkey_1.1.27.06.zip" target="_blank" rel="external nofollow noopener noreferrer">AutoHotKey 官网下载链接</a>下载 AutoHotKey 安装包 并安装。</li><li>新建文本文件，文件名格式为 <code>文件名.ahk</code> , 并用编辑器打开，建议 使用下载 AutoHotKey 插件后的 VSCode。</li><li>新建完成后的 ahk 文件，你可以双击运行，或者 右键点击文件，然后单击 <code>Compile Script</code> 转换成 可执行文件再执行。</li></ol><h3 id="修改进行曲"><a href="#修改进行曲" class="headerlink" title="修改进行曲"></a>修改进行曲</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;俗话说：“授人以鱼不如授人以渔”，所以，我先教你三个简单的例子，以便你能快速掌握 所需的 AHK 脚本知识。</p><h4 id="模拟发送命令"><a href="#模拟发送命令" class="headerlink" title="模拟发送命令"></a>模拟发送命令</h4><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/1-min.gif" alt="AHK 文件" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/resurrect-your-capslock-key/AHKExample.png"> </div> <div class="image-caption">AHK 文件</div> </figure><h4 id="模拟键盘事件"><a href="#模拟键盘事件" class="headerlink" title="模拟键盘事件"></a>模拟键盘事件</h4><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/2-min.gif" alt="AHK 文件" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/resurrect-your-capslock-key/AHKExample1.png"> </div> <div class="image-caption">AHK 文件</div> </figure><h4 id="模拟光标行为"><a href="#模拟光标行为" class="headerlink" title="模拟光标行为"></a>模拟光标行为</h4><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/4-min.gif" alt="AHK 文件" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/resurrect-your-capslock-key/AHKExample.png"> </div> <div class="image-caption">AHK 文件</div> </figure><h4 id="一些-AHK-小常识"><a href="#一些-AHK-小常识" class="headerlink" title="一些 AHK 小常识"></a>一些 AHK 小常识</h4><p>其中还有一些必备的小知识</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/4-min.gif" alt="AHK 文件" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/resurrect-your-capslock-key/AHKKey.png"> </div> <div class="image-caption">AHK 文件</div> </figure><h3 id="修改成果"><a href="#修改成果" class="headerlink" title="修改成果"></a>修改成果</h3><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div> <img src="https://cdn.jsdelivr.net/gh/Tomotoes/images/loading/1-min.gif" alt="AHK 文件" title="" data-original="https://cdn.jsdelivr.net/gh/Tomotoes/blog/resurrect-your-capslock-key/AHKResult.png"> </div> <div class="image-caption">AHK 文件</div> </figure><h4 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h4><p>我调试了很长时间的 Capslock 快捷配置，希望能对你有所帮助。</p><p><a id="codeHide" class="alone button button-3d button-primary button-rounded" onclick="$('#sourceCode').slideToggle('slow')">点击显/隐源文件</a></p><div id="sourceCode" style="display:none;padding-top:0.5em;"><figure class="highlight autohotkey"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;管理员运行</span></span><br><span class="line">if <span class="literal">not</span> <span class="built_in">A_IsAdmin</span></span><br><span class="line">{</span><br><span class="line">   Run *RunAs <span class="string">"%A_ScriptFullPath%"</span> </span><br><span class="line">   <span class="keyword">ExitApp</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">;无环境变量</span></span><br><span class="line"><span class="meta">#NoEnv</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;高进程</span></span><br><span class="line">Process Priority,,High</span><br><span class="line"></span><br><span class="line"><span class="comment">;一直关闭 Capslock</span></span><br><span class="line"><span class="built_in">SetCapsLockState,</span> AlwaysOff</span><br><span class="line"></span><br><span class="line"><span class="comment">; CapsLock -&gt; Esc</span></span><br><span class="line"><span class="title">CapsLock::</span></span><br><span class="line">Send {Esc}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; CapsLock &amp; alt -&gt; Enter</span></span><br><span class="line"><span class="title">CapsLock &amp; alt::</span></span><br><span class="line">Send {Enter}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; CapsLock &amp; Space -&gt; Shift</span></span><br><span class="line"><span class="title">CapsLock &amp; Space::</span></span><br><span class="line">Send {Shift Down}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="title">CapsLock &amp; Space up::</span></span><br><span class="line">Send {Shift up}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 光标移动</span></span><br><span class="line"><span class="title">CapsLock &amp; j::</span></span><br><span class="line"><span class="built_in">MouseMove,</span> -<span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, R  </span><br><span class="line"><span class="keyword">return</span>  </span><br><span class="line"><span class="title">CapsLock &amp; k::</span>  </span><br><span class="line"><span class="built_in">MouseMove,</span> <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, R  </span><br><span class="line"><span class="keyword">return</span>  </span><br><span class="line"><span class="title">CapsLock &amp; i::</span>  </span><br><span class="line"><span class="built_in">MouseMove,</span> <span class="number">0</span>, -<span class="number">15</span>, <span class="number">0</span>, R  </span><br><span class="line"><span class="keyword">return</span>  </span><br><span class="line"><span class="title">CapsLock &amp; l::</span>  </span><br><span class="line"><span class="built_in">MouseMove,</span> <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, R  </span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 左键单击</span></span><br><span class="line"><span class="title">CapsLock &amp; u::</span>  </span><br><span class="line">SendEvent {Blind}{LButton down}  </span><br><span class="line">KeyWait Enter  </span><br><span class="line">SendEvent {Blind}{LButton up}  </span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 右键单击</span></span><br><span class="line"><span class="title">CapsLock &amp; o::</span>  </span><br><span class="line">SendEvent {Blind}{RButton down}  </span><br><span class="line">KeyWait Enter  </span><br><span class="line">SendEvent {Blind}{RButton up}  </span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; h 向上滚动</span></span><br><span class="line"><span class="title">CapsLock &amp; h::</span></span><br><span class="line">SendEvent {Blind}{WheelUp}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 分号 向下滚动</span></span><br><span class="line">CapsLock &amp; `;::</span><br><span class="line">SendEvent {Blind}{WheelDown}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="title">CapsLock &amp; 3::</span></span><br><span class="line">SendEvent {Blind}{WheelUp}</span><br><span class="line"><span class="keyword">return</span>  </span><br><span class="line"><span class="title">CapsLock &amp; 4::</span></span><br><span class="line">SendEvent {Blind}{WheelDown}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="title">CapsLock &amp; F5::</span></span><br><span class="line">Reload</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 指针移动</span></span><br><span class="line"><span class="title">CapsLock &amp; e::</span></span><br><span class="line">Send {Up}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="title">CapsLock &amp; d::</span></span><br><span class="line">Send {Down}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="title">CapsLock &amp; s::</span></span><br><span class="line">Send {Left}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="title">CapsLock &amp; f::</span></span><br><span class="line">Send {right}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 行首行尾</span></span><br><span class="line"><span class="title">CapsLock &amp; a::</span></span><br><span class="line">Send {home}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="title">CapsLock &amp; g::</span></span><br><span class="line">Send {end}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 左右删除</span></span><br><span class="line"><span class="title">CapsLock &amp; w::</span></span><br><span class="line">Send {BS}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="title">CapsLock &amp; r::</span></span><br><span class="line">Send {Delete}</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 撤销重做</span></span><br><span class="line"><span class="title">CapsLock &amp; t::</span></span><br><span class="line">Send ^{z}</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></tbody></table></figure></div><p></p><hr><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。</p>]]></content>
    
    <summary type="html">
    
      通过AutoHotKey魔改Capslock键。
    
    </summary>
    
    
      <category term="开源" scheme="https://tomotoes.com/blog/categories/%E5%BC%80%E6%BA%90/"/>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="开源" scheme="https://tomotoes.com/blog/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="AHK" scheme="https://tomotoes.com/blog/tags/AHK/"/>
    
  </entry>
  
  <entry>
    <title>学习 Less-看这篇就够了</title>
    <link href="https://tomotoes.com/blog/learning-less-seeing-this-is-enough/"/>
    <id>https://tomotoes.com/blog/learning-less-seeing-this-is-enough/</id>
    <published>2017-12-08T02:52:11.000Z</published>
    <updated>2021-10-05T10:24:13.178Z</updated>
    
    <content type="html"><![CDATA[<p>Less 一门简单而又优雅的预处理语言。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="CSS-的短板"><a href="#CSS-的短板" class="headerlink" title="CSS 的短板"></a>CSS 的短板</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;作为前端学习者的我们 或多或少都要学些 CSS ，它作为前端开发的三大基石之一，时刻引领着 Web 的发展潮向。 而 CSS 作为一门标记性语言，可能 给初学者第一印象 就是简单易懂，毫无逻辑，不像编程该有的样子。在语法更新时，每当新属性提出，浏览器的兼容又会马上变成绊脚石，可以说 CSS 短板不容忽视。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;问题的诞生往往伴随着技术的兴起， 在 Web 发展的这几年， 为了让 CSS 富有逻辑性，短板不那么严重，涌现出了 一些神奇的预处理语言。 它们让 CSS 彻底变成一门 可以使用 变量 、循环 、继承 、自定义方法等多种特性的标记语言，逻辑性得以大大增强。</p><h3 id="预处理语言的诞生"><a href="#预处理语言的诞生" class="headerlink" title="预处理语言的诞生"></a>预处理语言的诞生</h3><p>其中 就我所知的有三门语言：Sass、Less 、Stylus 。</p><ol><li>Sass 诞生于 2007 年，Ruby 编写，其语法功能都十分全面，可以说 它完全把 CSS 变成了一门编程语言。另外 在国内外都很受欢迎，并且它的项目团队很是强大 ，是一款十分优秀的预处理语言。</li><li>Stylus 诞生于 2010 年，来自 Node.js 社区，语法功能也和 Sass 不相伯仲，是一门十分独特的创新型语言。</li><li>Less 诞生于 2009 年，受 Sass 的影响创建的一个开源项目。 它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充（<em>引用于官网</em>）。</li></ol><h3 id="选择预处理语言"><a href="#选择预处理语言" class="headerlink" title="选择预处理语言"></a>选择预处理语言</h3><p>这是一个十分纠结的问题。</p><ul><li><p>在我看来，这就好比 找女朋友，有人喜欢 贤惠安静的，就有人喜欢 活泼爱闹的，各有各的爱好，可晚上闭灯后 其实都差不多，所以你不用太过纠结。当然了 ，首先 你要有女朋友。</p></li><li><p>在网上讨论看来，Sass 与 Stylus 相比于 Less 功能更为丰富，但对于学习成本以及适应时间 ，Less 稍胜一筹，这也是我选择 Less 的原因。</p></li><li><p>Less 没有去掉任何 CSS 的功能，而是在现有的语法上，增添了许多额外的功能特性，所以学习 Less 是一件非常舒服的事情。</p></li></ul><p>如果你之前没有接触过预处理语言，纠结应该学哪一个，不如先看看 下面 Less 的介绍，我相信你会爱上它的。</p><h3 id="使用-Less-的前奏"><a href="#使用-Less-的前奏" class="headerlink" title="使用 Less 的前奏"></a>使用 Less 的前奏</h3><p>使用 Less 有两种方式</p><ol><li>在页面中 引入 Less.js <ul><li>可在<a href="http://lesscss.org/" target="_blank" rel="external nofollow noopener noreferrer">官网</a>下载</li><li>或使用 CDN<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>需要注意的是，link 标签一定要在 Less.js 之前引入，并且 link 标签的 rel 属性要设置为 stylesheet/less。<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet/less"</span> <span class="attr">href</span>=<span class="string">"style.less"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"less.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>在命令行 使用 npm 安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></tbody></table></figure><p>具体使用命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lessc styles.less &gt; styles.css</span><br></pre></td></tr></tbody></table></figure><p>假如还有问题，<a href="http://less.bootcss.com/" target="_blank" rel="external nofollow noopener noreferrer">官网</a>已经有了明确的步骤。</p><p>如果你也是 Webpack 的使用者，还需要配合 less-loader 进行处理，具体可见我的这篇文章：<a href="http://tomotoes.com/blog/webpack-flight-manual/">Webpack 飞行手册</a>，里面详细说明了 less 的处理方式。</p><p>如果你在本地环境，可以使用第一种方式，非常简单；但在生产环境中，性能非常重要，最好使用第二种方式。</p></li></ol><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>下面我将简介 Less 的功能特性。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>我们常常在 CSS 中 看到同一个值重复多次，这样难易于代码维护。理想状态，应是下面这样：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bgColor=<span class="string">"skyblue"</span>;</span><br><span class="line">$(<span class="string">".post-content"</span>).css(<span class="string">"background-color"</span>,bgColor);</span><br><span class="line">$(<span class="string">"#wrap"</span>).css(<span class="string">"background-color"</span>,bgColor);</span><br><span class="line">$(<span class="string">".arctive"</span>).css(<span class="string">"background-color"</span>,bgColor);</span><br></pre></td></tr></tbody></table></figure>只要我们修改 <code>bgColor</code>这一个变量， 整个页面的背景颜色都会随之改变。<p></p><p>而 Less 中的变量十分强大，可化万物，值得一提的是，其变量是常量 ，所以只能定义一次，不能重复使用。</p><ol><li><p>值变量</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@color:</span> <span class="number">#999</span>;</span><br><span class="line"><span class="variable">@bgColor:</span> skyblue;<span class="comment">//不要添加引号</span></span><br><span class="line"><span class="variable">@width:</span> <span class="number">50%</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">@bgColor</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以 <code>@</code> 开头 定义变量，并且使用时 直接 键入 <code>@</code>名称。</p><p>在平时工作中，我们就可以把 常用的变量 封装到一个文件中，这样利于代码组织维护。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@lightPrimaryColor:</span> <span class="number">#c5cae9</span>;</span><br><span class="line"><span class="variable">@textPrimaryColor:</span> <span class="number">#fff</span>;</span><br><span class="line"><span class="variable">@accentColor:</span> rgb(<span class="number">99</span>, <span class="number">137</span>, <span class="number">185</span>);</span><br><span class="line"><span class="variable">@primaryTextColor:</span> <span class="number">#646464</span>;</span><br><span class="line"><span class="variable">@secondaryTextColor:</span> <span class="number">#000</span>;</span><br><span class="line"><span class="variable">@dividerColor:</span> <span class="number">#b6b6b6</span>;</span><br><span class="line"><span class="variable">@borderColor:</span> <span class="number">#dadada</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>选择器变量</p><p>让 选择器 变成 动态</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@mySelector:</span> #wrap;</span><br><span class="line"><span class="variable">@Wrap:</span> wrap;</span><br><span class="line"><span class="variable">@{mySelector}</span>{ <span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.@{Wrap}</span>{</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#@{Wrap}</span>{</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.wrap</span>{</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>属性变量</p><p>可减少代码书写量</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@borderStyle:</span> border-style;</span><br><span class="line"><span class="variable">@Soild:</span>solid;</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">@{borderStyle}</span>: <span class="variable">@Soild</span>;<span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">border-style</span>:solid;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>url 变量</p><p>项目结构改变时，修改其变量即可。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@images:</span> <span class="string">"../img"</span>;<span class="comment">//需要加引号</span></span><br><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"@{images}/dog.png"</span>);<span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"../img/dog.png"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>声明变量</p><p>有点类似于 下面的 混合方法</p><ul><li>结构: @name: { 属性: 值 ;};</li><li>使用：@name();</li></ul><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@background:</span> {<span class="attribute">background</span>:red;};</span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">    <span class="variable">@background</span>();</span><br><span class="line">}</span><br><span class="line"><span class="variable">@Rules:</span>{</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">};</span><br><span class="line"><span class="selector-id">#con</span>{</span><br><span class="line">  <span class="variable">@Rules</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#con</span>{</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>变量运算</p><p>不得不提的是，Less 的变量运算完全超出我的期望，十分强大。</p><ul><li>加减法时 以第一个数据的单位为基准</li><li>乘除法时 注意单位一定要统一</li></ul><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">300px</span>;</span><br><span class="line"><span class="variable">@color:</span><span class="number">#222</span>;</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">width</span>:<span class="variable">@width-20</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@width-20</span>*<span class="number">5</span>;</span><br><span class="line">  <span class="attribute">margin</span>:(<span class="variable">@width-20</span>)*<span class="number">5</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">@color</span>*<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="variable">@color</span> + <span class="number">#111</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">280px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">1400px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#333</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>变量作用域</p><p>一句话理解就是：<strong>就近原则</strong>，不要跟我提闭包。</p><p><em>借助官网的 Demo</em></p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@var:</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="variable">@a:</span> <span class="number">100%</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@var</span>;</span><br><span class="line">  <span class="variable">@a:</span> <span class="number">9%</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">9%</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>用变量去定义变量</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@fnord:</span>  <span class="string">"I am fnord."</span>;</span><br><span class="line"><span class="variable">@var:</span>    <span class="string">"fnord"</span>;</span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>{</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">@@var</span>; <span class="comment">//将@var 替换为其值 content:@fnord;</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>{</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"I am fnord."</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><ol><li><p>&amp; 的妙用</p><p>&amp; ：代表的上一层选择器的名字，此例便是<code>header</code>。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#header</span>{</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>{</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"Less is more!"</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="selector-class">.title</span>{</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">  }</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">_content</span>{<span class="comment">//理解方式：直接把 &amp; 替换成 #header</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#header</span><span class="selector-pseudo">::after</span>{</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"Less is more!"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.title</span>{ <span class="comment">//嵌套了</span></span><br><span class="line">  <span class="attribute">font-weight</span>:bold;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#header_content</span>{<span class="comment">//没有嵌套！</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>媒体查询</p><p>在以往的工作中，我们使用 媒体查询，都要把一个元素 分开写</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">768px</span>){</span><br><span class="line">  <span class="selector-id">#wrap</span>{</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Less 提供了一个十分便捷的方式</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">    <span class="comment">//something...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> screen{</span><br><span class="line">        <span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>){</span><br><span class="line">          <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">@media</span> tv {</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">2000px</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">maxwidth</span>:<span class="number">768px</span>){</span><br><span class="line">  <span class="selector-id">#main</span>{</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">100px</span>; </span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">@media</span> tv{</span><br><span class="line">  <span class="selector-id">#main</span>{</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">2000px</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>唯一的缺点就是 每一个元素都会编译出自己 <code>@media</code> 声明，并不会合并。</p></li><li><p>实战技巧</p><p>可以借助 Less 在元素中，去定义自己的私有样式。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="comment">// something..</span></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.show</span>{</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.show</span>{</span><br><span class="line">  <span class="attribute">display</span>:none;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</span><br><span class="line">main.classList.add(<span class="string">"show"</span>);</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span><span class="selector-class">.show</span>{</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.show</span>{</span><br><span class="line">  <span class="attribute">display</span>:none; <span class="comment">//会被覆盖。</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="混合方法"><a href="#混合方法" class="headerlink" title="混合方法"></a>混合方法</h3><ol><li><p>无参数方法</p><p>方法犹如 声明的集合，使用时 直接键入名称即可。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.card</span> { <span class="comment">// 等价于 .card()</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> rgba(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, .<span class="number">58</span>);</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="selector-class">.card</span>;<span class="comment">//等价于.card();</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> rgba(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, .<span class="number">58</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中 <code>.card</code> 与 <code>.card()</code> 是等价的。个人建议，为了避免 代码混淆，应写成 :</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span>(){</span><br><span class="line">  <span class="comment">//something...</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="selector-class">.card</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要点：</p><ul><li><code>.</code> 与 <code>#</code> 皆可作为 方法前缀。</li><li>方法后写不写 <code>()</code> 看个人习惯。</li></ul></li><li><p>默认参数方法</p><ul><li>Less 可以使用默认参数，如果 没有传参数，那么将使用默认参数。</li><li><code>@arguments</code> 犹如 JS 中的 <code>arguments</code> 指代的是 全部参数。</li><li>传的参数中 必须带着单位。</li></ul><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.border</span>(<span class="variable">@a</span>:<span class="number">10px</span>,<span class="variable">@b</span>:<span class="number">50px</span>,<span class="variable">@c</span>:<span class="number">30px</span>,<span class="variable">@color</span>:<span class="number">#000</span>){</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="variable">@color</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;<span class="comment">//指代的是 全部参数</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">0px</span>,<span class="number">5px</span>,<span class="number">30px</span>,red);<span class="comment">//必须带着单位</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">0px</span>);</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#content</span>{</span><br><span class="line">  <span class="selector-class">.border</span>;<span class="comment">//等价于 .border()</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> red;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">0px</span>,<span class="number">5px</span>,<span class="number">30px</span>,red;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">50px</span> <span class="number">30px</span> <span class="number">#000</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#content</span>{</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">50px</span> <span class="number">30px</span> <span class="number">#000</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>方法的匹配模式</p><p>与 面向对象中的多态 很相似</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.triangle</span>(top,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>){</span><br><span class="line">    <span class="attribute">border-color</span>:transparent  transparent <span class="variable">@color</span> transparent ;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.triangle</span>(right,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>){</span><br><span class="line">    <span class="attribute">border-color</span>:transparent <span class="variable">@color</span> transparent  transparent ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.triangle</span>(bottom,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>){</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="variable">@color</span> transparent  transparent  transparent ;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.triangle</span>(left,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>){</span><br><span class="line">    <span class="attribute">border-color</span>:transparent  transparent  transparent <span class="variable">@color</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.triangle</span>(<span class="variable">@_</span>,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>){</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="variable">@width</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">    <span class="selector-class">.triangle</span>(left, <span class="number">50px</span>, <span class="number">#999</span>)</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">border-color</span>:transparent  transparent  transparent <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">50px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要点</p><ul><li>第一个参数 <code>left</code> 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。</li><li>如果匹配的参数 是变量，则将会匹配，如 <code>@_</code> 。</li></ul></li><li><p>方法的命名空间</p><p>让方法更加规范</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#card</span>(){</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#723232</span>;</span><br><span class="line">    <span class="selector-class">.d</span>(<span class="variable">@w</span>:<span class="number">300px</span>){</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-id">#a</span>(<span class="variable">@h</span>:<span class="number">300px</span>){</span><br><span class="line">            <span class="attribute">height</span>: <span class="variable">@h</span>;<span class="comment">//可以使用上一层传进来的方法</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">    <span class="selector-id">#card</span> &gt; <span class="selector-class">.d</span> &gt; <span class="selector-id">#a</span>(<span class="number">100px</span>); <span class="comment">// 父元素不能加 括号</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">    <span class="selector-id">#card</span> <span class="selector-class">.d</span>();</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#con</span>{</span><br><span class="line">    <span class="comment">//不得单独使用命名空间的方法</span></span><br><span class="line">    <span class="comment">//.d() 如果前面没有引入命名空间 #card ，将会报错</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-id">#card</span>; <span class="comment">// 等价于 #card();</span></span><br><span class="line">    <span class="selector-class">.d</span>(<span class="number">20px</span>); <span class="comment">//必须先引入 #card</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#con</span>{</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">20px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要点</p><ul><li>在 CSS 中<code>&gt;</code> 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。</li><li>在引入命令空间时，如使用 <code>&gt;</code> 选择器，父元素不能加 括号。</li><li>不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。</li><li>子方法 可以使用上一层传进来的方法</li></ul></li><li><p>方法的条件筛选</p><p>Less 没有 if else，可是它有 <code>when</code></p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#card</span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// and 运算符 ，相当于 与运算 &amp;&amp;，必须条件全部符合才会执行</span></span><br><span class="line">    <span class="selector-class">.border</span>(<span class="variable">@width</span>,<span class="variable">@color</span>,<span class="variable">@style</span>) <span class="keyword">when</span> (<span class="variable">@width</span>&gt;<span class="number">100px</span>) <span class="keyword">and</span>(<span class="variable">@color</span>=<span class="number">#999</span>){</span><br><span class="line">        <span class="attribute">border</span>:<span class="variable">@style</span> <span class="variable">@color</span> <span class="variable">@width</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// not 运算符，相当于 非运算 !，条件为 不符合才会执行</span></span><br><span class="line">    <span class="selector-class">.background</span>(<span class="variable">@color</span>) <span class="keyword">when</span> <span class="keyword">not</span> (<span class="variable">@color</span>&gt;=<span class="number">#222</span>){</span><br><span class="line">        <span class="attribute">background</span>:<span class="variable">@color</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行</span></span><br><span class="line">    <span class="selector-class">.font</span>(<span class="variable">@size</span>:<span class="number">20px</span>) <span class="keyword">when</span> (<span class="variable">@size</span>&gt;<span class="number">50px</span>) , (<span class="variable">@size</span>&lt;<span class="number">100px</span>){</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">@size</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">    <span class="selector-id">#card</span>&gt;<span class="selector-class">.border</span>(<span class="number">200px</span>,<span class="number">#999</span>,solid);</span><br><span class="line">    <span class="selector-id">#card</span> <span class="selector-class">.background</span>(<span class="number">#111</span>);</span><br><span class="line">    <span class="selector-id">#card</span> &gt; <span class="selector-class">.font</span>(<span class="number">40px</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">border</span>:solid <span class="number">#999</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#111</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要点</p><ul><li>比较运算有： &gt; &gt;= = =&lt; &lt;。</li><li>= 代表的是等于</li><li>除去关键字 true 以外的值都被视为 false：</li></ul></li><li><p>数量不定的参数</p><p>如果你希望你的方法接受数量不定的参数，你可以使用… ，犹如 ES6 的扩展运算符。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.boxShadow</span>(...){</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.textShadow</span>(<span class="variable">@a</span>,...){</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">    <span class="selector-class">.boxShadow</span>(<span class="number">1px</span>,<span class="number">4px</span>,<span class="number">30px</span>,red);</span><br><span class="line">    <span class="selector-class">.textShadow</span>(<span class="number">1px</span>,<span class="number">4px</span>,<span class="number">30px</span>,red);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">4px</span> <span class="number">30px</span> red;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">4px</span> <span class="number">30px</span> red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>方法使用 important！</p><p>使用方法 非常简单，在方法名后 加上关键字即可。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.border</span>{</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">    <span class="selector-class">.border</span>() !important;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span> {</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>循环方法</p><p>Less 并没有提供 for 循环功能，但这也难不倒 聪明的程序员，使用递归去实现。下面是官网中的一个 Demo，模拟了生成栅格系统。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.generate-columns</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.generate-columns</span>(<span class="variable">@n</span>, <span class="variable">@i</span>: <span class="number">1</span>) <span class="keyword">when</span> (<span class="variable">@i</span> =&lt; <span class="variable">@n</span>) {</span><br><span class="line">  <span class="selector-class">.column-</span><span class="variable">@{i}</span> {</span><br><span class="line">    <span class="attribute">width</span>: (<span class="variable">@i</span> * <span class="number">100%</span> / <span class="variable">@n</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="selector-class">.generate-columns</span>(<span class="variable">@n</span>, (<span class="variable">@i</span> + <span class="number">1</span>));</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.column-1</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.column-2</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.column-3</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.column-4</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>属性拼接方法</p><p><code>+_</code> 代表的是 空格；<code>+</code> 代表的是 逗号。</p><ul><li>逗号<figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.boxShadow</span>() {</span><br><span class="line">    <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">inset</span> <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">10px</span> <span class="selector-id">#555</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.main</span> {</span><br><span class="line">  <span class="selector-class">.boxShadow</span>();</span><br><span class="line">  <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">20px</span> <span class="selector-tag">black</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.main</span> {</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#555</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> black;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>空格<figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.Animation</span>() {</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">scale</span>(<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.main</span> {</span><br><span class="line">  <span class="selector-class">.Animation</span>();</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">rotate</span>(<span class="number">15deg</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-class">.main</span> {</span><br><span class="line">  <span class="attribute">transform</span>: scale(<span class="number">2</span>) rotate(<span class="number">15deg</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>实战技巧</p><p>下面是官网中的一个非常赞的 Demo</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.average</span>(<span class="variable">@x</span>, <span class="variable">@y</span>) {</span><br><span class="line">  <span class="variable">@average:</span> ((<span class="variable">@x</span> + <span class="variable">@y</span>) / <span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> {</span><br><span class="line">  <span class="selector-class">.average</span>(<span class="number">16px</span>, <span class="number">50px</span>); <span class="comment">// 调用 方法</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">@average</span>;    <span class="comment">// 使用返回值</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-tag">div</span> {</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">33px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以说 Less 是一门优雅编程语言。</p></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>extend 是 Less 的一个伪类。它可继承 所匹配声明中的全部样式。</p><ol><li><p>extend 关键字的使用</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.animation</span>{</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out;</span><br><span class="line">    <span class="selector-class">.hide</span>{</span><br><span class="line">      <span class="attribute">transform</span>:scale(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.animation)</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#con</span>{</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.animation</span> <span class="selector-class">.hide</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.animation</span>,<span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.animation</span> <span class="selector-class">.hide</span> , <span class="selector-id">#con</span>{</span><br><span class="line">    <span class="attribute">transform</span>:scale(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>all 全局搜索替换</p><p>使用选择器匹配到的 全部声明。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span> {</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> {</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"Less is good!"</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">:extend(</span><span class="selector-id">#main</span> <span class="keyword">all</span>) {}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>,<span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span><span class="selector-pseudo">:after</span>, <span class="selector-id">#wrap</span><span class="selector-pseudo">:after</span> {</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"Less is good!"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>减少代码的重复性</p><p>从表面 看来，extend 与 方法 最大的差别，就是 extend 是同个选择器共用同一个声明，而 方法 是使用自己的声明，这无疑 增加了代码的重复性。</p><p>方法示例 与上面的 extend 进行对比：</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.Method</span>{</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> {</span><br><span class="line">      <span class="attribute">content</span>:<span class="string">"Less is good!"</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="selector-class">.Method</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="selector-class">.Method</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>{</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"Less is good!"</span>;</span><br><span class="line">  }  </span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>{</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"Less is good!"</span>;</span><br><span class="line">  }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>要点</p><p><em>翻译官网</em></p><ul><li>选择器和扩展之间 是允许有空格的：pre:hover :extend(div pre).</li><li>可以有多个扩展: pre:hover:extend(div pre):extend(.bucket tr) - 注意这与 pre:hover:extend(div pre, .bucket tr)一样。</li><li>这是不可以的，扩展必须在最后 : pre:hover:extend(div pre).nth-child(odd)。</li><li>如果一个规则集包含多个选择器，所有选择器都可以使用 extend 关键字。</li></ul></li></ol><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ol><li><p>导入 less 文件 可省略后缀</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import "main"; </span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">import "main.less";</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>@import</code> 的位置可随意放置</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">15px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"style"</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>reference</p><p>Less 中 最强大的特性使用 引入的 Less 文件，但不会 编译它。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="keyword">@import</span> (reference) <span class="string">"bootstrap.less"</span>; </span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">:extend(.navbar</span> <span class="keyword">all</span>){}</span><br></pre></td></tr></tbody></table></figure><p> 翻译官网：</p><blockquote><p>使用@import (reference)导入外部文件，但不会添加 把导入的文件 编译到最终输出中，只引用。</p></blockquote></li><li><p>once</p><blockquote><p>@import 语句的默认行为。这表明相同的文件只会被导入一次，而随后的导入文件的重复代码都不会解析。</p></blockquote> <figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> (once) <span class="string">"foo.less"</span>;</span><br><span class="line"><span class="keyword">@import</span> (once) <span class="string">"foo.less"</span>; <span class="comment">// this statement will be ignored</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>multiple</p><blockquote><p>使用@import (multiple)允许导入多个同名文件。</p></blockquote><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// file: foo.less</span></span><br><span class="line"><span class="selector-class">.a</span> {</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// file: main.less</span></span><br><span class="line"><span class="keyword">@import</span> (multiple) <span class="string">"foo.less"</span>;</span><br><span class="line"><span class="keyword">@import</span> (multiple) <span class="string">"foo.less"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.a</span> {</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.a</span> {</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li><p>判断类型</p><ul><li>isnumber<blockquote><p>判断给定的值 是否 是一个数字。</p></blockquote></li></ul><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">isnumber</span>(<span class="number">#ff0</span>);     <span class="comment">// false</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(blue);     <span class="comment">// false</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(<span class="string">"string"</span>); <span class="comment">// false</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(<span class="number">1234</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(<span class="number">56px</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(<span class="number">7.8%</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(keyword);  <span class="comment">// false</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(url(<span class="string">...</span>)); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>iscolor</p><blockquote><p>判断给定的值 是否 是一个颜色。</p></blockquote></li><li><p>isurl</p><blockquote><p>判断给定的值 是否 是一个 url 。</p></blockquote></li></ul></li><li><p>颜色操作</p><ul><li><p>saturate</p><blockquote><p>增加一定数值的颜色饱和度。</p></blockquote></li><li><p>lighten</p><blockquote><p>增加一定数值的颜色亮度。</p></blockquote></li><li><p>darken</p><blockquote><p>降低一定数值的颜色亮度。</p></blockquote></li><li><p>fade</p><blockquote><p>给颜色设定一定数值的透明度。</p></blockquote></li><li><p>mix</p><blockquote><p>根据比例混合两种颜色。</p></blockquote></li></ul></li><li><p>数学函数</p><ul><li><p>ceil</p><blockquote><p>向上取整。</p></blockquote></li><li><p>floor</p><blockquote><p>向下取整。</p></blockquote></li><li><p>percentage</p><blockquote><p>将浮点数转换为百分比字符串。</p></blockquote></li><li><p>round</p><blockquote><p>四舍五入。</p></blockquote></li><li><p>sqrt</p><blockquote><p>计算一个数的平方根。</p></blockquote></li><li><p>abs</p><blockquote><p>计算数字的绝对值，原样保持单位。</p></blockquote></li><li><p>pow</p><blockquote><p>计算一个数的乘方。</p></blockquote></li></ul></li></ol><p>由于 文章 篇幅有限，所以 只能介绍一些 使用效率高的函数。如果你想了解更多，可以去官网的<a href="http://lesscss.cn/functions/" target="_blank" rel="external nofollow noopener noreferrer">函数链接</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><p>注释</p><ul><li>/* */ CSS 原生注释，会被编译在 CSS 文件中。</li><li>/&nbsp;&nbsp;&nbsp;/ Less 提供的一种注释，不会被编译在 CSS 文件中。</li></ul></li><li><p>避免编译</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">width</span>:<span class="string">~'calc(300px-30px)'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>{</span><br><span class="line">  <span class="attribute">width</span>:calc(<span class="number">300px</span>-<span class="number">30px</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结构： <code>~' 值 '</code></p></li><li><p>变量拼串</p><p>在平时工作中，这种需求 太常见了。在下面例子中， 实现了不同的 transtion-delay、animation、@keyframes</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.judge</span>(<span class="variable">@i</span>) <span class="keyword">when</span>(<span class="variable">@i</span>=<span class="number">1</span>){</span><br><span class="line">  <span class="variable">@size:</span><span class="number">15px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.judge</span>(<span class="variable">@i</span>) <span class="keyword">when</span>(<span class="variable">@i</span>&gt;<span class="number">1</span>){</span><br><span class="line">  <span class="variable">@size:</span><span class="number">16px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.loopAnimation</span>(<span class="variable">@i</span>) <span class="keyword">when</span> (<span class="variable">@i</span>&lt;<span class="number">16</span>) {</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.circle</span><span class="selector-pseudo">:nth-child(</span><span class="variable">@{i}</span>){</span><br><span class="line">      <span class="selector-class">.judeg</span>(<span class="variable">@i</span>);</span><br><span class="line">      <span class="attribute">border-radius</span>:<span class="variable">@size</span> <span class="variable">@size</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">animation</span>: <span class="string">~"circle-@{i}"</span> <span class="variable">@duration</span> infinite <span class="variable">@ease</span>;</span><br><span class="line">      <span class="attribute">transition-delay</span>:<span class="string">~"@{i}ms"</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">@keyframes</span> <span class="string">~"circle-@{i}"</span> {</span><br><span class="line">      <span class="comment">// do something...</span></span><br><span class="line">  }</span><br><span class="line">  <span class="selector-class">.loopAnimation</span>(<span class="variable">@i</span> + <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结构： <code>~"字符@{变量}字符"</code>;</p></li><li><p>使用 JS</p><p>因为 Less 是由 JS 编写，所以 Less 有一得天独厚的特性：代码中使用 Javascript 。</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@content:</span><span class="built_in">`"aaa".toUpperCase()`</span>;</span><br><span class="line"><span class="selector-id">#randomColor</span>{</span><br><span class="line">  <span class="variable">@randomColor:</span> <span class="string">~"rgb(`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`)"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">width</span>: <span class="string">~"`Math.round(Math.random() * 100)`px"</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>{</span><br><span class="line">      <span class="attribute">content</span>:<span class="variable">@content</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="attribute">height</span>: <span class="string">~"`window.innerHeight`px"</span>;</span><br><span class="line">  <span class="attribute">alert</span>:<span class="string">~"`alert(1)`"</span>;</span><br><span class="line">  <span class="selector-id">#randomColor</span>();</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@randomColor</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出 1</span></span><br><span class="line"><span class="selector-id">#wrap</span>{</span><br><span class="line">  <span class="attribute">width</span>: 随机值（<span class="number">0</span>~<span class="number">100</span>）px;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">743px</span>;<span class="comment">//由电脑而异</span></span><br><span class="line">  <span class="attribute">background</span>: 随机颜色;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>{</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"AAA"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;前几个月 ， 有个 <code>CSS in JS</code> 的概念非常火，现在 看来 <code>JS in CSS</code> 也未曾不可。我觉得完全可以根据 Less 这个特性来造个轮子，JS 来控制 CSS ，形成 动态属性，如果成功 很可能会改变 现在前端的打开姿势。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;从我学习 Web 以来，无数前辈告诉我，Web 有三大基石，JS 控制行为，HTML 控制结构，CSS 控制样式。我一直再想 为什么要分为 3 个语言？为什么不能合成一个语言？或者说 就没有更合适的吗？在这几年的 Web 发展中，页面从 MVC  到 现在的 MVVC，结构正在发生着改变，但 其根本 不过是造了一个又一个 完美的轮子。我们为什么就不能打破传统呢？让 前端的 三大基石 变成一座大山呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;请试想一下，那该是个怎样的世界。</p><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>以上便是 Less 的特性总结，希望本文能对你有所帮助。</p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。  </p><style>.post-content ol li > p:nth-child(1){font-weight:bold;color:#555;text-shadow: rgb(207, 207, 207) 0 0 1px;}</style>]]></content>
    
    <summary type="html">
    
      学习Less-看这篇就够了，Less大全。
    
    </summary>
    
    
      <category term="前端" scheme="https://tomotoes.com/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://tomotoes.com/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Less" scheme="https://tomotoes.com/blog/tags/Less/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 之高效快捷键</title>
    <link href="https://tomotoes.com/blog/vscode-efficient-shortcuts/"/>
    <id>https://tomotoes.com/blog/vscode-efficient-shortcuts/</id>
    <published>2017-12-05T08:40:11.000Z</published>
    <updated>2021-10-05T10:24:13.154Z</updated>
    
    <content type="html"><![CDATA[<p>绝对福利,不容错过！<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>常言道：“工欲善其事必先利其器”，而我的器便是 <a href="https://code.visualstudio.com/" target="_blank" rel="external nofollow noopener noreferrer">VSCode</a> ，这是一款高颜值的编辑器。不过在经过长时间的使用后，发现总有些一些快捷键令我难以接受。遂花了一天的时间，将快捷键全部调整了一遍，总结如下：</p><blockquote><p><span class="github-emoji" style="background-image:url(https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8">😶</span> 底部有源文件,可供你替换 </p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><ol><li>Alt + Enter <span class="Key">跳转到下一个编辑点</span></li><li>Ctrl + A <span class="Key">全选</span></li><li>Ctrl + Shift + A  <span class="Key">Autoprefixer/Eslint</span></li><li>Ctrl + Shift + Z <span class="Key">重做</span></li><li>Ctrl + R <span class="Key">注释当前行</span></li><li>Ctrl + T<span class="Key">格式化</span></li><li>Ctrl + Y<span class="Key">选择下一个匹配</span></li><li>Ctrl + Shift + Y<span class="Key">选择所有匹配项</span></li><li>Ctrl + /<span class="Key">增加注释</span></li><li>Ctrl + J<span class="Key">连接下一行</span></li><li>Ctrl + Shift + J<span class="Key">将标签内的内容全部缩成一行</span></li><li>Ctrl + P<span class="Key">交换字符位置</span></li><li>Ctrl + G <ul><li><span class="Key">浏览 markdown</span></li><li><span class="Key">开启 LiveServer</span></li><li><span class="Key">Alt + G 关闭 LiveServer</span></li></ul></li><li>Alt + .<br><span class="Key">Emmet 命令列表</span></li><li>Alt + z<span class="Key">自动换行</span></li><li>Ctrl + L<span class="Key">选中一行</span></li><li>Ctrl + Shift + L<span class="Key">跳转行</span></li><li>Ctrl + D<span class="Key">删除行</span></li><li>Ctrl + F<span class="Key">搜索</span></li><li>Ctrl + H<span class="Key">替换</span></li><li>Ctrl + Shift + C<span class="Key">向下复制一行 </span></li><li>Ctrl + Shift + V<span class="Key">打开 Ditto</span></li><li>Ctrl + Enter<span class="Key">在当前行下边插入一行 </span></li><li>Shift + Enter<span class="Key">在当前行上方插入一行</span></li><li>Alt + Up/Down<span class="Key">移动行</span></li><li>Ctrl + Shift + []<span class="Key">折叠代码</span> </li><li>Alt + X<span class="Key">光标撤销</span></li><li>Ctrl + F5<span class="Key">Code Run</span></li><li>Ctrl + Shift + Space<span class="Key">显示参数</span></li><li>Ctrl  + 左键 <span class="Key">多处编辑</span></li><li>Ctrl  + Shift + 左键 <span class="Key">块选择</span></li><li>Alt + Shift + Right<span class="Key">选中标签内中的内容</span></li><li>Alt + Shift + Left<span class="Key">选中标签中的第一个子标签</span></li><li>Alt + Left <span class="Key">移除包裹标签</span></li><li>Alt + Right <span class="Key">键入标签名 包围所在标签 与 多光标一起使用 威力无穷</span></li><li>Alt + Shift +Enter <span class="Key">将当前标签替换成键入的标签</span></li><li>Ctrl + Shift + J<span class="Key">将标签内的内容全部缩成一行</span></li><li>Alt + Enter<span class="Key">跳转到下一个编辑点</span></li><li>F12<span class="Key">移动到定义处</span></li><li>Alt + F12<span class="Key">定义处缩略图,可更改</span></li><li>Shift + F12<span class="Key">列出所有的引用</span></li><li>Ctrl + Alt + Up<span class="Key">定位到文件中上一个修改</span></li><li>Ctrl + Alt + Down<span class="Key">定位到文件中下一个修改</span></li></ol><h3 id="命令窗口"><a href="#命令窗口" class="headerlink" title="命令窗口"></a>命令窗口</h3><ol><li>F1</li><li>Ctrl + Shift + P</li><li>Ctrl + E 输入 &gt;</li><li>Ctrl + P 输入 &gt;</li></ol><p>其中在 Ctrl + E / P 窗口中还可以这么玩 :</p><ul><li>直接输入文件名，跳转到文件</li><li>? 列出当前可执行的动作</li><li>! 显示 Errors 或 Warnings，也可以 Ctrl+Shift+M</li><li>: 跳转到行数</li><li>@ 跳转到 symbol（搜索变量或者函数），也可以 Ctrl+Shift+O 直接进入</li><li>@ 根据分类跳转 symbol，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入</li><li># 根据名字查找 symbol</li></ul><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ol><li>Ctrl + O <span class="Key">打开文件</span></li><li>Ctrl + Shift + O <span class="Key">打开文件夹</span></li><li>Ctrl + Alt + O <span class="Key">打开本地 Git 项目</span></li><li>Ctrl + B <span class="Key">打开最近项目</span></li><li>Alt + R (需先 Ctrl + Shift + E) <span class="Key">打开聚焦文件的路径</span></li></ol><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ol><li>Ctrl + Shift + T <span class="Key">打开关闭后的标签</span></li><li>Ctrl + Num <span class="Key">聚焦到某个标签</span></li><li>Ctrl + W <span class="Key">关闭当前标签</span></li></ol><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ol><li>F5  <span class="Key">调试</span></li><li>Shift + F5  <span class="Key">运行 不调试</span></li><li>F10 <span class="Key">单步执行</span></li></ol><p><strong>注意事项</strong></p><ul><li>先关掉所有的 Chrome</li><li>启动调试 Launch to Chrome</li><li>可以使用断点，单独调试</li><li>还可以像 Chrome 调试台那样 去使用调试<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#header"</span>).style.background</span><br><span class="line">获取 header 的背景颜色</span><br><span class="line"></span><br><span class="line">$ </span><br><span class="line"><span class="built_in">document</span>.querySelector 。  </span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">相当于 <span class="built_in">document</span>.querySelectorAll 。  </span><br><span class="line"></span><br><span class="line">$_ </span><br><span class="line">返回上一个表达式的值  </span><br><span class="line"></span><br><span class="line">dir</span><br><span class="line"><span class="built_in">console</span>.dir  </span><br><span class="line"></span><br><span class="line">keys</span><br><span class="line">取对象的键名, 返回键名组成的数组 </span><br><span class="line"></span><br><span class="line">values(object)</span><br><span class="line">返回一个数组，该数组包含属于指定对象的所有属性值。</span><br><span class="line"></span><br><span class="line">dirxml(object)</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#header"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</span><br><span class="line">使用页面中的框架,记录 jQuery</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> + <span class="number">2</span></span><br><span class="line">普通输入 </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{alert(<span class="number">1</span>);}</span><br><span class="line">函数</span><br></pre></td></tr></tbody></table></figure><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3></li></ul><ol><li>Ctrl + , <span class="Key">设置</span></li><li>Ctrl + Shift + , <span class="Key">快捷键</span></li><li>Ctrl + Alt + , <span class="Key">代码片段</span></li><li>Alt + F2 <span class="Key">选择主题</span></li><li>Alt + F1 <span class="Key">改变语言</span></li><li>Ctrl + Shift + S <span class="Key">设置</span></li></ol><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><ol><li>Ctrl + M  <span class="Key">打开新窗口</span></li><li>Ctrl + Shift +M <span class="Key">重新载入</span></li><li>Ctrl + \ <span class="Key">多栏编辑</span></li><li>Ctrl + Shift + \ <span class="Key">切换多栏布局</span></li><li>Alt + W <span class="Key">只保留当前栏</span></li><li>Alt + A <span class="Key">当前栏增大视图</span></li><li>Alt + Num <span class="Key">聚焦到第 Num 个栏</span></li></ol><h3 id="Booksmarks"><a href="#Booksmarks" class="headerlink" title="Booksmarks"></a>Booksmarks</h3><ol><li>Ctrl + Q <span class="Key">切换书签</span></li><li>Ctrl + Shift + Q<span class="Key"> 跳转到下一个书签</span></li><li>Ctrl + Alt + Q<span class="Key">跳转到上一个书签</span></li><li>Ctrl + Shift + Alt + Q <span class="Key">书签列表</span></li><li>F1 + Clear remove all bookmarks in the current file<span class="Key">清除当前文件的所有标签</span></li><li>F1 + Clear from All Files remove all bookmarks from all files<span class="Key"> 清除所有标签</span></li></ol><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ol><li>Ctrl + S <span class="Key">保存当前文件</span></li><li>Ctrl + Shift +S <span class="Key">保存所有文件</span></li><li>Ctrl + Alt + S <span class="Key">另存为</span></li><li>Ctrl + Shift + N<span class="Key"> 在资源管理器中新建文件</span></li></ol><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><ol><li>Ctrl + Shift + E  <span class="Key">聚焦到资源管理器 </span></li><li>Ctrl + Shift + F  <span class="Key">全局搜索 </span></li><li>Ctrl + Shift + D <span class="Key"> 调试代码  </span> </li><li>Ctrl + Shift + G <span class="Key"> Git 版本库  </span></li><li>Ctrl + Shift + X <span class="Key"> 插件商场  </span></li><li>Ctrl + Shift + B <span class="Key">切换侧边栏</span></li><li>Ctrl + Shift + H<span class="Key"> 全局替换</span></li></ol><h3 id="底栏"><a href="#底栏" class="headerlink" title="底栏"></a>底栏</h3><ol><li>Ctrl + Shift + W <span class="Key">问题</span><ul><li>F8<span class="Key">下一个错误/警告</span></li><li>Shift + F8<span class="Key">上一个错误/警告</span></li></ul></li><li>Ctrl + Shift + R <span class="Key">调试控制台</span></li><li>Ctrl + Shift + U<span class="Key"> 输出</span></li><li>Alt + Q <span class="Key">终端</span></li></ol><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ol><li>Alt + B <span class="Key">粗体</span></li><li>Ctrl + i <span class="Key">斜体</span></li><li>Ctrl + Shift + [/] <span class="Key">增加标题等级</span></li><li>Ctrl + G <span class="Key">浏览视图</span></li><li>右键 Markdown 视图 <span class="Key">保存多种类型</span></li></ol><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><ol><li>悬停提示</li><li>文件拖拽移动</li><li>双击变量 高亮匹配相同词</li><li>code ./ 使用 VSCode 打开当前文件</li><li>F11 全屏 </li><li>文件右键<ul><li>在资源管理器中打开</li><li>在终端打开</li><li>选择以比较 然后在选择一个文件 即可进行比较</li><li>复制路径 Alt + Shift+C</li><li>Git 查看该文件的历史</li></ul></li><li>Git<ol><li>F1<ul><li>View Git History (git log) (git.viewHistory)</li><li>View File History (git.viewFileHistory)</li><li>View Line History (git.viewLineHistory)</li></ul></li><li>Alt + F3<span class="Key">查看文件更改</span></li></ol></li><li>NPM &amp;&amp; Task<ol><li>Ctrl + I<span class="Key">导入模块 </span></li><li>Alt + F5<span class="Key">运行脚本</span></li><li>Ctrl+u<span class="Key">运行任务</span></li></ol></li></ol><h3 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h3><p><a id="codeHide" class="alone button button-3d button-primary button-rounded" onclick="$('#sourceCode').slideToggle('slow')">点击显/隐源文件</a></p><div id="sourceCode" style="display:none;padding-top:0.5em;"><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br></pre></td><td class="code"><pre><span class="line">[{</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"tab"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.expandAbbreviation"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"config.emmet.triggerExpansionOnTab &amp;&amp; editorTextFocus &amp;&amp; !editorHasMultipleSelections &amp;&amp; !editorHasSelection &amp;&amp; !editorReadonly &amp;&amp; !editorTabMovesFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+c"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+c"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.overrideCtrlC &amp;&amp; vim.use&lt;C-c&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+f"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+f"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-f&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+l"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"expandLineSelection"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },{</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+h"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+h"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-h&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode == 'Insert'"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+v"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+v"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-v&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+f1"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-extension.viewInBrowser"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"alt+x"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"cursorUndo"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },{</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"shift+alt+f"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-editor.action.formatDocument"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorHasDocumentFormattingProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+f"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"actions.find"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+f"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-actions.find"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+f"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"workbench.action.findInFiles"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"!searchInputBoxFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+f"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-workbench.action.findInFiles"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"!searchInputBoxFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+f"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"workbench.view.search"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"!searchViewletVisible"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+f"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-workbench.view.search"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"!searchViewletVisible"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+r"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"editor.action.commentLine"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+oem_2"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-editor.action.commentLine"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+d"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"editor.action.deleteLines"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+k"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-editor.action.deleteLines"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+alt+o"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-extension.openWith"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId == 'html'"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"alt+f1"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"workbench.action.editor.changeLanguageMode"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+k m"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-workbench.action.editor.changeLanguageMode"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"shift+enter"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"editor.action.insertLineBefore"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+enter"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-editor.action.insertLineBefore"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+g"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"workbench.view.scm"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+g"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-workbench.view.scm"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"alt+shift+g"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"markdown.showPreview"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorLangId == 'markdown'"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+v"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-markdown.showPreview"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorLangId == 'markdown'"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+c"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"editor.action.copyLinesDownAction"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"shift+alt+down"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-editor.action.copyLinesDownAction"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"alt+r"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"revealFileInOS"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"explorerViewletFocus &amp;&amp; explorerViewletVisible"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"shift+alt+r"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-revealFileInOS"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"explorerViewletFocus &amp;&amp; explorerViewletVisible"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+a"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+a"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-a&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+g"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"extension.liveServer.goOnline"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId != 'markdown'"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"alt+g"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"extension.liveServer.goOffline"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId != 'markdown'"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"alt+l o"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-extension.liveServer.goOnline"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"alt+l c"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-extension.liveServer.goOffline"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+q"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"bookmarks.toggle"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+alt+k"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-bookmarks.toggle"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+q"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"bookmarks.jumpToNext"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+alt+l"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-bookmarks.jumpToNext"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+alt+q"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"bookmarks.jumpToPrevious"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+alt+j"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-bookmarks.jumpToPrevious"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+alt+q"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"bookmarks.listFromAllFiles"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+n"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+n"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-n&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+n"</span>,</span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"explorer.newFile"</span>,</span><br><span class="line">    },</span><br><span class="line">    { </span><br><span class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+n"</span>,                </span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.files.newUntitledFile"</span> ,</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+w"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+w"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-w&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+w ctrl+w"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_navigateGroups"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"vim.active &amp;&amp; vim.use&lt;C-w&gt; &amp;&amp; !editorTextFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+w l"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_navigateRight"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"vim.active &amp;&amp; vim.use&lt;C-w&gt; &amp;&amp; !editorTextFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+w j"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_navigateDown"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"vim.active &amp;&amp; vim.use&lt;C-w&gt; &amp;&amp; !editorTextFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+w k"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_navigateUp"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"vim.active &amp;&amp; vim.use&lt;C-w&gt; &amp;&amp; !editorTextFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+w h"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_navigateLeft"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"vim.active &amp;&amp; vim.use&lt;C-w&gt; &amp;&amp; !editorTextFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+u"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+u"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-u&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+o"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+o"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-o&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"win+a"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_cmd+a"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-a&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"backspace"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_backspace"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+alt+down"</span>,               </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.editor.nextChange"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span> </span><br><span class="line">},</span><br><span class="line">{   <span class="attr">"key"</span>: <span class="string">"ctrl+alt+up"</span>,          </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.editor.previousChange"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span> </span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"win+d"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_cmd+d"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-d&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"win+right"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_cmd+right"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-right&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"win+v"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_cmd+v"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-v&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode == 'SearchInProgressMode'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+pagedown"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+pagedown"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-pagedown&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+r"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+r"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-r&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+pageup"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+pageup"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-pageup&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+2"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+shift+2"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-shift+2&gt;"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+x"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+x"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-x&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+x"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+x"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-x&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+x"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+x"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-x&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-y&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-y&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-y&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-y&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-y&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-y&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-y&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"delete"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_delete"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"delete"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_delete"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"end"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_end"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"end"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_end"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"home"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_home"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"win+left"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_cmd+left"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-left&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+oem_4"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+["</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-[&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+ oem_6"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+]"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-]&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+b"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+b"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-b&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+d"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+d"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+e"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+e"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-e&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+i"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+i"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-i&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+j"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+j"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-j&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+k"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+k"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-k&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+p"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_ctrl+p"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"suggestWidgetVisible &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-p&gt;"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_down"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl &amp;&amp; !suggestWidgetMultipleSuggestions &amp;&amp; !suggestWidgetVisible"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"left"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_left"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"right"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_right"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"shift+backspace"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_shift+backspace"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;shift+BS&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode == 'SearchInProgressMode'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"tab"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_tab"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_up"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl &amp;&amp; !suggestWidgetMultipleSuggestions &amp;&amp; !suggestWidgetVisible"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"win+c"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-extension.vim_cmd+c"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.overrideCopy &amp;&amp; vim.use&lt;D-c&gt; &amp;&amp; !inDebugRepl"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+y"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.addSelectionToNextFindMatch"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+o"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.files.openFolder"</span></span><br><span class="line">},</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+/"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.blockComment"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+s"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.files.saveAll"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+alt+s"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.files.saveAs"</span></span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+y"</span>,               </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.changeAll"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span> </span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+t"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.formatDocument"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+t"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"HookyQR.beautifyFile"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+j"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.joinLines"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+m"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.insertSnippet"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+enter"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.inspectTMScopes"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+p"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.transposeLetters"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+a"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"eslint.executeAutofix"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+alt+,"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.openSnippets"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+f2"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.selectTheme"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+m"</span>,          </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.newWindow"</span> </span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+,"</span>,         </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.openGlobalKeybindings"</span> </span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+u"</span>,         </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.tasks.runTask"</span> </span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"f11"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.toggleZenMode"</span> </span><br><span class="line">},</span><br><span class="line">{   </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+f5"</span>,           </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"code-runner.run"</span> </span><br><span class="line">},</span><br><span class="line">{   </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+i"</span>,           </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"npm-intellisense.import"</span> ,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorLangId != 'markdown'"</span></span><br><span class="line">},</span><br><span class="line">{   </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+f5"</span>,           </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"npm-script.run"</span> </span><br><span class="line">},</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"shift+f5"</span>,               <span class="attr">"command"</span>: <span class="string">"workbench.action.debug.run"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"!inDebugMode"</span> },</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+\\"</span>,           </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.toggleEditorGroupLayout"</span> </span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+b"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.toggleSidebarVisibility"</span> </span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+g"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"markdown.showPreview"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorLangId == 'markdown'"</span></span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+l"</span>,                </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.gotoLine"</span> </span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+a"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.increaseViewSize"</span> ,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorLangId != 'markdown'&amp;&amp;editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+w"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.joinTwoGroups"</span> ,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+1"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex1"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+2"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex2"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+3"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex3"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+4"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex4"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+5"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex5"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+6"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex6"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+7"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex7"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+8"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex8"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+9"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex9"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"alt+1"</span>,                <span class="attr">"command"</span>: <span class="string">"workbench.action.focusFirstEditorGroup"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"alt+2"</span>,                <span class="attr">"command"</span>: <span class="string">"workbench.action.focusSecondEditorGroup"</span> },</span><br><span class="line">{ <span class="attr">"key"</span>: <span class="string">"alt+3"</span>,                <span class="attr">"command"</span>: <span class="string">"workbench.action.focusThirdEditorGroup"</span> },</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+m"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.reloadWindow"</span> </span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+."</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.showEmmetCommands"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorLangId != 'markdown'&amp;&amp;editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+enter"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.nextEditPoint"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+j"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.mergeLines"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+left"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.removeTag"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+right"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.wrapWithAbbreviation"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+shift+right"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.balanceOut"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+shift+left"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.balanceIn"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+shift+enter"</span>,              </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.updateTag"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+w"</span>,          </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.actions.view.problems"</span> </span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+q"</span>,           </span><br><span class="line">     <span class="attr">"command"</span>: <span class="string">"workbench.action.terminal.toggleTerminal"</span> </span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+r"</span>,          </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.debug.action.toggleRepl"</span> </span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+a"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"autoprefixer.execute"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId != 'javascript' &amp;&amp; editorLangId != 'typescript'"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+a"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"tslint.fixAllProblems"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId != 'javascript' &amp;&amp; editorLangId != 'less' &amp;&amp; editorLangId != 'css'"</span></span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+alt+o"</span>,            </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"gitProjectManager.openProject"</span> </span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+b"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.action.openRecent"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+r"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-workbench.action.openRecent"</span></span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+b"</span>,                </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"markdown.extension.editing.toggleBold"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId == 'markdown'"</span> </span><br><span class="line">},</span><br><span class="line">{ </span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+c"</span>,          </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"markdown-preview-enhanced.syncPreview"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorLangId == 'markdown'"</span> </span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"win+`"</span>,          </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"search.action.collapseSearchResults"</span></span><br><span class="line">}</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div><p></p><hr><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>如果你的机器是 Windows 系统，同时也是 VSCode 重度使用者，不妨试试我的快捷键，可以让你的操作彻底飞起来~<span class="github-emoji" style="background-image:url(https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8">😎</span></p><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。  </p><style>.Key{color:#999;font-size:98%;}</style>]]></content>
    
    <summary type="html">
    
      VSCode,快捷键,效率,工具
    
    </summary>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="快捷键" scheme="https://tomotoes.com/blog/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="VSCode" scheme="https://tomotoes.com/blog/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 飞行手册</title>
    <link href="https://tomotoes.com/blog/webpack-flight-manual/"/>
    <id>https://tomotoes.com/blog/webpack-flight-manual/</id>
    <published>2017-11-30T11:16:57.000Z</published>
    <updated>2021-10-05T10:24:13.154Z</updated>
    
    <content type="html"><![CDATA[<p>现在是一个 Web 技术蓬发的时代。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学习 Webpack 之前，我们需要了解一个概念：<strong>模块</strong>。</p><h3 id="何为模块？"><a href="#何为模块？" class="headerlink" title="何为模块？"></a>何为模块？</h3><p>如果你曾学过 Java , C# 之类的语言，一定会知道 Java 中的 import 或 C# 中的 using 吧？比如：我想在 C# 中进行数据库操作，我只需要在代码头部加上 下面这两段代码即可。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br></pre></td></tr></tbody></table></figure>这两段代码可以看成 两个与数据库操作相关的模块。当我们需求是数据库，或者是读取 IO 等其他操作，我们便加载其他不同的模块。很明显，这实现了编程中的一个非常重要的功能 <strong>按需加载</strong>。<p></p><p>在前端中 模块又该如何定义呢？按照我个人的理解：</p><ul><li>在 HTML 中 模块 便是一个组件<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">name</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;% for(var i = 0; i &lt; People.length;++i) { %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">People</span>[<span class="attr">i</span>] %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> } %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在 CSS 中 模块 便是一个局部样式</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span>{</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">h1</span>{</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在 Javascript 中 模块 便是一个封装着方法或数据的脚本文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> People = { <span class="attr">name</span>: <span class="string">"Simon"</span> } ;</span><br><span class="line"><span class="built_in">module</span>.exports = People;</span><br></pre></td></tr></tbody></table></figure></li></ul><p>而我们又该怎样实现 在前端中加载模块呢？下面是两个很常见的例子：</p><blockquote><p>在 Less 中  </p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"header"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"layout"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"footer"</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在 Javascript  </p></blockquote><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS</span></span><br><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">"jQuery"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> People = { <span class="attr">name</span>: <span class="string">"Simon"</span> } ;</span><br><span class="line"><span class="built_in">module</span>.exports = People;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./layer.less"</span>;</span><br><span class="line"><span class="keyword">import</span> tpl <span class="keyword">from</span> <span class="string">"./layer.ejs"</span>;</span><br></pre></td></tr></tbody></table></figure><p>如果你直接运行以上代码，浏览器并不会解析，这个时候，就要依靠 Webpack 了！</p><h3 id="Webpack-是什么"><a href="#Webpack-是什么" class="headerlink" title="Webpack 是什么"></a>Webpack 是什么</h3><p>Webpack 是一款目前非常流行的前端模块打包工具，可以将项目中所加载的模块进行打包，以及将 一些浏览器不支持的语言进行转换。</p><p>Webpack 的打包原理是 先找到入口文件，递归探索出所有依赖的模块，最后 利用 Loader 进行不同文件类型的处理，打包成一个 Javascript 文件。</p><p>其中，Webpack 的两个最核心原理分别是：</p><ol><li><strong>一切皆模块</strong></li><li><strong>按需加载</strong></li></ol><p>当然 Webpack 的作用不止加载模块这么简单，前端的常用需求通常都可以实现：利用 Loader 转换 es6 、 Less 、 Typescript ，还可利用插件 开发多页面应用,等等诸多强大功能。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>下面，我将讲解 Webpack 的具体使用和配置。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>我一般在项目中使用 Webpack，都是先执行下面这四条命令进行 Webpack 的安装</p><ol><li>npm install -g webpack在全局安装 Webpack，第一次使用时 执行</li><li>npm install --save-dev webpack将 Webpack 安装到你的项目</li><li>npm initnpm 初始化，会询问你的项目信息，可以回车跳过</li><li>npm install --save-dev webpack-dev-server在当前项目，安装 Webpack 服务器</li></ol><p>安装完成后，便是建立配置文件了。</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>在项目根目录下新建名为 webpack.config.js 的文件，基本上 一个配置文件的大体结构就是下面这样：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">modules.export={</span><br><span class="line">    entry:{</span><br><span class="line">        <span class="comment">/* 入口文件 */</span></span><br><span class="line">    },</span><br><span class="line">    output:{</span><br><span class="line">        <span class="comment">/* 出口文件 */</span></span><br><span class="line">    },</span><br><span class="line">    <span class="built_in">module</span>:{</span><br><span class="line">        <span class="comment">/* Loader */</span></span><br><span class="line">        rules:[{},{},{}]</span><br><span class="line">    },</span><br><span class="line">    plugins:[ </span><br><span class="line">        <span class="comment">/* 插件 */</span> </span><br><span class="line">    ],</span><br><span class="line">    devtool: ...</span><br><span class="line">    devServer: {...}</span><br><span class="line">    resolve:{...}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>我们下面就先分析 modules.export 各个属性<p></p><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p><strong>entry</strong> 代表是入口文件，Webpack 工作的开始。Webpack 会递归的探索出 入口文件中所依赖的模块，并按照顺序 利用 Loader 进行处理。官网给出了其 3 种数据类型：</p><ol><li>字符串<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: <span class="string">"app.js"</span>;</span><br></pre></td></tr></tbody></table></figure></li><li>数组数组中的每一项都会被打包，形成互不依赖的文件<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: [<span class="string">"app.js"</span>,<span class="string">"main.js"</span>];</span><br></pre></td></tr></tbody></table></figure></li><li>对象对象中的每一个属性都会被打包，形成互不依赖的文件<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry:{</span><br><span class="line">    app: <span class="string">"./src/js/app.js"</span>,</span><br><span class="line">    main: <span class="string">"./src/js/main.js"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>一般入口文件中多是 import 或者 require 等模块导入命令。</li></ol><h3 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h3><p><strong>output</strong>顾名思义，Webpack 打包后文件的具体配置常用的属性有 4 个</p><ol><li>path: <code>${__dirname }/dist</code>打包后文件所在路径</li><li>filename: “js/[name].js”打包后文件的名字，这里有 4 种常用的写法<ol><li>自定义</li><li>[name].js代表的便是入口的文件名</li><li>[hash].js此次打包后的 hash 值</li><li>[chunkhash]该块打包后的 hash 值</li></ol></li></ol><ol start="3"><li>publicPath: <code>"http://cdn.com/"</code> 上线时的公共路径，主要应用于线上</li><li>chunkFilename: ‘js/[name].js’  按需加载模块时输出的文件名称</li></ol><h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>Loader 是 Webpack 中最振奋人心的东西了！将一切浏览器不支持的语言，处理成 浏览器可以支持。针对各个文件类型，都有各种的 Loader 等你去挖掘。</p><p>Loader 的工作方式 是从右向左执行，链式地按照顺序进行编译。loader 链中的第一个返回值给下一个 loader，在最后一个 loader，返回所预期的结果。</p><p>loader 可以是同步或异步函数，也可使用 options 对象去接受配置参数。</p><p>基础结构</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:{</span><br><span class="line">  rules:[</span><br><span class="line">    {</span><br><span class="line">      test:<span class="regexp">/\.xxx$/</span>,<span class="comment">//以 xxx 结尾的文件</span></span><br><span class="line">      loader: <span class="string">"xxx-loader"</span>,</span><br><span class="line">      exclude: {排除的路径},</span><br><span class="line">      include: {包含的路径},</span><br><span class="line">      options: {Loader 配置}</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以很清楚的看到，Loader 利用 test 的正则 找到各个类型文件，然后使用 loader 进行处理，便可转换成浏览器支持的文件。</p><p>其中我知道的 loader 的写法有两种:</p><ol><li>每一个 loader 都是一个对象<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loaders:[</span><br><span class="line">  {<span class="attr">loader</span>:<span class="string">"style-loader"</span>},</span><br><span class="line">  { <span class="attr">loader</span>: <span class="string">"css-loader?modules"</span>, <span class="attr">options</span>: { <span class="attr">importLoaders</span>: <span class="number">1</span> } },</span><br><span class="line">  {<span class="attr">loader</span>: <span class="string">"less-loader"</span>}</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></li><li>使用 ! 号拼接的写法<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loader: <span class="string">"style-loader!css-loader?importLoaders=1!less-loader"</span></span><br></pre></td></tr></tbody></table></figure>下面介绍三个 前端必备的 Loader 方式<h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4></li><li>style-loader通过注入<code>style</code>标签将 CSS 添加到 DOM <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader --save-dev</span><br></pre></td></tr></tbody></table></figure></li><li>css-loadercss-loader 像 import / require（）一样解释@import 和 url（）并解析它们。<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader --save-dev</span><br></pre></td></tr></tbody></table></figure></li><li>postcss-loader补充 不兼容的 css 属性 的浏览器前缀<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install post-loader --save-dev</span><br></pre></td></tr></tbody></table></figure></li><li>less-loader将 Less 转换成 CSS<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install less --save-dev</span><br><span class="line">npm install less-loader --save-dev</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><p>babel主要用于将 es6 转换成 es2015</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-core babel-loader babel-preset-es2015</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="图片-amp-字体"><a href="#图片-amp-字体" class="headerlink" title="图片 &amp; 字体"></a>图片 &amp; 字体</h4><ol><li>file-loader用于压缩文件<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></tbody></table></figure></li><li>url-loader如果文件下于 规定限制，将会转换成 二进制编码<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev url-loader</span><br></pre></td></tr></tbody></table></figure><h4 id="ejs"><a href="#ejs" class="headerlink" title="ejs"></a>ejs</h4>另外 我想介绍一下 自己常用的 ejs-loader</li><li><p>配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev ejs-loader</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test:<span class="regexp">/\.ejs$/</span> , <span class="attr">loader</span>:<span class="string">"ejs-loader"</span>,</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用</p></li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">name</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &lt;% for(let i = 0; i &lt; Array.length;++i) { %&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">Array</span>[<span class="attr">i</span>] %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> } %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口文件</span></span><br><span class="line"><span class="keyword">import</span> tpl <span class="keyword">from</span> <span class="string">"./layer.ejs"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = tpl({</span><br><span class="line">  name:<span class="string">"Simon"</span>,</span><br><span class="line">  arr:[<span class="string">"Apple"</span>,<span class="string">"Xiaomi"</span>]</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>运行 生成后的页面 ，便会发现 ejs 组件已经被加进去了，想象一下，我们在平时工作中是否可以把 一个轮播图，或者 排行榜 、评论 当成一个组件呢？</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><strong>plugins</strong>在日常工作中，我们使用 Loader 处理不同类型的文件，当有某种其他方面的需求时，比如 抽离 CSS 、生成多页面 HTML ，plugins 便派上了用场。</p><p>插件的使用，一般都要先 require 出来，然后在 plugins 属性中 进行初始化</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line">......</span><br><span class="line">plugins: [ <span class="keyword">new</span> htmlWebpackPlugin({<span class="comment">/* options */</span>}) ]</span><br></pre></td></tr></tbody></table></figure><p></p><p>下面将介绍 一些工作中常用的插件</p><ol><li>clean-webpack-plugin主要用于 打包之前 先清空 打包目录下的文件，防止文件混乱。<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></tbody></table></figure></li><li>html-webpack-plugin 主要用于生成 HTML，可以规定 模板 HTML，也可以为 模板传入参数，压缩文件等<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></tbody></table></figure>这个插件可谓是 前端必备的，它的配置有很多<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> htmlWebpackPlugin({</span><br><span class="line">  <span class="comment">//打包后的文件名</span></span><br><span class="line">  filename: <span class="string">"index.html"</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//模板</span></span><br><span class="line">  template: <span class="string">"index.html"</span>,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//为 true 自动生成 script 标签添加到 html 中</span></span><br><span class="line">  <span class="comment">//或者写 body/head 标签名</span></span><br><span class="line">  inject: <span class="literal">false</span>,<span class="comment">//js 的注入标签</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">//通过&lt;%= htmlWebpackPlugin.options.title  %&gt;引用</span></span><br><span class="line">  title: <span class="string">"参数 title"</span>,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//通过&lt;%= htmlWebpackPlugin.options.date %&gt; 引用</span></span><br><span class="line">  date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//网站的图标</span></span><br><span class="line">  favicon: <span class="string">'path/to/yourfile.ico'</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">//生成此次打包的 hash</span></span><br><span class="line">  <span class="comment">//如果文件名中有哈希，便代表有 合理的缓冲</span></span><br><span class="line">  hash: <span class="literal">true</span>,</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//排除的块</span></span><br><span class="line">   excludeChunks: [<span class="string">''</span>],</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//选中的块 与入口文件相关</span></span><br><span class="line">  chunks: [<span class="string">'app'</span>,<span class="string">'people'</span>],</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//压缩</span></span><br><span class="line">  minify:{ </span><br><span class="line">   removeComments: <span class="literal">true</span>,</span><br><span class="line">   collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">   removeRedundantAttributes: <span class="literal">true</span>,</span><br><span class="line">   useShortDoctype: <span class="literal">true</span>,</span><br><span class="line">   removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">   removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">   keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">   minifyJS: <span class="literal">true</span>,</span><br><span class="line">   minifyCSS: <span class="literal">true</span>,</span><br><span class="line">   minifyURLs: <span class="literal">true</span>,</span><br><span class="line">  }</span><br><span class="line"> </span><br><span class="line">}),</span><br></pre></td></tr></tbody></table></figure>那么问题来了，我们在模板文件中 又该怎样使用参数呢？直接按照 ejs 的语法写入 html 文件即可！<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.date</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>生成后的模板文件<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">Thu Dec 07 2017 10:01:58 GMT+0800 (中国标准时间)</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>另外，如果想生成 多页面应用，只需 将上面的配置，多复制几遍即可。<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> htmlWebpackPlugin({ <span class="attr">filename</span>: <span class="string">"index1.html"</span>, }</span><br><span class="line"><span class="keyword">new</span> htmlWebpackPlugin({ <span class="attr">filename</span>: <span class="string">"index2.html"</span>, }</span><br><span class="line"><span class="keyword">new</span> htmlWebpackPlugin({ <span class="attr">filename</span>: <span class="string">"index3.html"</span>, }</span><br></pre></td></tr></tbody></table></figure></li><li>UglifyJsPlugin主要用于压缩 Javascript 文件<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D uglifyjs-webpack-plugin</span><br></pre></td></tr></tbody></table></figure></li><li>webpack.ProvidePlugin自动加载模块，全局使用变量，下面借助 官网的 DEMO<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin({</span><br><span class="line">  $: <span class="string">'jquery'</span>,</span><br><span class="line">  jQuery: <span class="string">'jquery'</span></span><br><span class="line">})</span><br><span class="line"><span class="comment">// in a module</span></span><br><span class="line">$(<span class="string">'#item'</span>); <span class="comment">// &lt;= 起作用</span></span><br><span class="line">jQuery(<span class="string">'#item'</span>); <span class="comment">// &lt;= 起作用</span></span><br><span class="line"><span class="comment">// $ 自动被设置为 "jquery" 输出的内容</span></span><br></pre></td></tr></tbody></table></figure></li><li>open-browser-webpack-plugin打开服务器后 会自动打开浏览器端口，用起来 很方便</li><li>HotModuleReplacementPlugin热更新插件</li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>webpack 最基本的启动 webpack 命令。找到根目录下的 webpack.config.js 文件中的 entry 属性，递归出所有项目中依赖的模块。</p></li><li><p>webpack -w 监控代码变化，实时进行打包更新</p></li><li>webpack -p 对打包后的文件进行压缩，利用线上发布</li><li>webpack -d 提供 SourceMaps，方便调试代码</li><li>webpack –colors 输出结果带彩色，可以更详细的查看信息</li><li>webpack –profile 输出性能数据，可以看到每一步的耗时</li></ul><p>前两个命令使用频率会较大</p><h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><p>不知道你现在时候有没有一个想法？ webpack 打包后的文件就一定正确无误吗？ 如果发生错误的话，该怎么办呢？</p><p>devtool 属性 便提供了生成 sourcemap 的功能，具体有下面这些选项。</p><ol><li>source-map此选项具有最完备的 source map，但会减慢打包的速度；</li><li>cheap-module-source-map生成一个不带列映射的 map</li><li>eval-source-map使用 eval 打包源文件模块，生成一个完整的 source map。</li><li>cheap-module-eval-source-map这是最快生成 source map 的方法，生成后的 Source Map 会和打包后的 JavaScript 文件同行显示，但没有列映射，所以慎用</li></ol><h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><ol><li>contentBase: “./dist”, 本地服务器所加载的页面所在的目录</li><li>historyApiFallback: true, 再找不到文件的时候默认指向 index.html</li><li>inline: true,当源文件改变时会自动刷新页面</li><li>hot: true,热加载开启</li><li>port:8080设置默认监听端口</li></ol><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><ol><li><p>extensions: [“.js”, “.html”, “.css”, “.txt”,”less”,”ejs”,”json”],自动扩展文件后缀名，意味着我们 require 模块可以省略不写后缀名</p></li><li><p>alias: { Temp: path.resolve(__dirname, “src/templates/“) }模块别名定义，直接 require(‘AppStore’) 即可,方便后续直接引用别名</p></li></ol><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><h4 id="path"><a href="#path" class="headerlink" title="path"></a>path</h4><p>常用于字符串拼接路径。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br></pre></td></tr></tbody></table></figure>有两个 API<p></p><ol><li>path.resolve()将相对路径转换成绝对路径<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aPath = path.resolve(<span class="string">"__dirname"</span>,<span class="string">"js"</span>,<span class="string">"main.js"</span>);</span><br><span class="line"><span class="comment">// aPath = 当前目录下的 js 文件夹的 main.js 文件的路径</span></span><br></pre></td></tr></tbody></table></figure></li><li>path.join()对路径进行拼接<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rPath = path.join(<span class="string">"source"</span>,<span class="string">"js"</span>,<span class="string">"main.js"</span>);</span><br><span class="line"><span class="comment">// aPath = //source/js/main.js</span></span><br></pre></td></tr></tbody></table></figure></li><li>__dirnameNode.js 中的全局变量，代表的是 项目的当前路径。常与 path 结合使用。</li></ol><h4 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h4><p>上面我们已经提过了 <code>webpack -w</code> 命令，它可以实时的监控 代码的改变，从而自动进行打包，但是 有个缺点 在于它不能及时的刷新界面。在我们 开启服务器后，是无法使用 此命令的，这个时候，如果你还想进行 自动打包，又想自动刷新界面，热更新 便是不二之选，另外 Webpack 只会热更新 发生改变的模块，不会重新加载整个页面，便可加快开发速度。</p><p>开启步骤：</p><ol><li>修改 devServer 属性<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: {</span><br><span class="line">  hot: <span class="literal">true</span>,<span class="comment">//热加载开启</span></span><br><span class="line">  inline: <span class="literal">true</span>,<span class="comment">//文件改变时会自动刷新页面</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>增加热更新插件<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="comment">//Other property</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>另外，只有修改 依赖的项目，才会进行实时更新。</li></ol><h3 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h3><p>个人总结了很长时间的 Webpack 配置，希望能对你有帮助。</p><p><a id="codeHide" class="alone button button-3d button-primary button-rounded" onclick="$('#sourceCode').slideToggle('slow')">点击显/隐源文件</a></p><div id="sourceCode" style="display:none;padding-top:0.5em;"><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span></span><br><span class="line">  path = <span class="built_in">require</span>(<span class="string">"path"</span>),</span><br><span class="line"> </span><br><span class="line">  webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>),</span><br><span class="line"> </span><br><span class="line">  htmlWebpackPlugin = <span class="built_in">require</span> (<span class="string">"html-webpack-plugin"</span>),</span><br><span class="line"> </span><br><span class="line">  ExtractTextPlugin = <span class="built_in">require</span> (<span class="string">"extract-text-webpack-plugin"</span>),</span><br><span class="line"> </span><br><span class="line">  marked = <span class="built_in">require</span>(<span class="string">"marked"</span>),</span><br><span class="line">  renderer = <span class="keyword">new</span> marked.Renderer(),</span><br><span class="line"> </span><br><span class="line">  CleanWebpackPlugin = <span class="built_in">require</span> (<span class="string">"clean-webpack-plugin"</span>),</span><br><span class="line"> </span><br><span class="line">  OpenBrowserPlugin = <span class="built_in">require</span> (<span class="string">"open-browser-webpack-plugin"</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">const</span> MyConfig = {</span><br><span class="line"> </span><br><span class="line">  entry: {</span><br><span class="line">   app:<span class="string">"./src/js/app.js"</span></span><br><span class="line">  },</span><br><span class="line"> </span><br><span class="line">  output: {</span><br><span class="line">   path: <span class="string">`<span class="subst">${__dirname }</span>/dist`</span>,</span><br><span class="line">   filename: <span class="string">"js/[name].js"</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 上线时的公共路径</span></span><br><span class="line">   <span class="comment">// publicPath: "http://cdn.com/",</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 按需加载模块时输出的文件名称</span></span><br><span class="line">   <span class="comment">// chunkFilename: 'js/[name].js'</span></span><br><span class="line">  },</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* 生成调试用的 source-map */</span></span><br><span class="line">  devtool: <span class="string">"eval-source-map"</span>,</span><br><span class="line"> </span><br><span class="line">  devServer: {</span><br><span class="line">   contentBase: <span class="string">"./dist"</span>, <span class="comment">//本地服务器所加载 的页面所在的目录</span></span><br><span class="line">   historyApiFallback: <span class="literal">true</span>, <span class="comment">//再找不到文件 的时候默认指向 index.html,</span></span><br><span class="line">   inline: <span class="literal">true</span>,<span class="comment">//当源文件改变时会自动刷新页面</span></span><br><span class="line">   hot: <span class="literal">true</span>,<span class="comment">//热加载开启</span></span><br><span class="line">   port:<span class="number">8080</span><span class="comment">// 设置默认监听端口</span></span><br><span class="line">  },</span><br><span class="line">  resolve:{</span><br><span class="line">   <span class="comment">//自动扩展文件后缀名，意味着我们 require 模块可 以省略不写后缀名</span></span><br><span class="line">   extensions: [<span class="string">".js"</span>, <span class="string">".html"</span>, <span class="string">".css"</span>,  <span class="string">".txt"</span>,<span class="string">"less"</span>,<span class="string">"ejs"</span>,<span class="string">"json"</span>],</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//模块别名定义，直接 require('AppStore')  即可,方便后续直接引用别名</span></span><br><span class="line">   alias: { <span class="attr">Temp</span>: path.resolve(__dirname,  <span class="string">"src/templates/"</span>) }</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>:{</span><br><span class="line">   rules:[</span><br><span class="line">    {</span><br><span class="line">     test: <span class="regexp">/\.(less|css)?$/</span> ,</span><br><span class="line">     use:ExtractTextPlugin.extract({</span><br><span class="line">      fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">      use:[</span><br><span class="line">       { <span class="attr">loader</span>: <span class="string">"css-loader? modules"</span>, <span class="attr">options</span>: {  <span class="attr">importLoaders</span>: <span class="number">1</span> } },</span><br><span class="line">       {</span><br><span class="line">        loader:<span class="string">"postcss-loa der"</span>,</span><br><span class="line">        options:{<span class="attr">plugins</span>:  <span class="function">(<span class="params">loader</span>) =&gt;</span>  [<span class="built_in">require</span> (<span class="string">"autoprefixer"</span>)()]  }</span><br><span class="line">       },</span><br><span class="line">       {<span class="attr">loader</span>: <span class="string">"less-loader"</span>}</span><br><span class="line">      ]</span><br><span class="line">     }),</span><br><span class="line">     exclude: path.resolve (__dirname,<span class="string">"./node_modules"</span>)</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">     test: <span class="regexp">/\.js$/</span> ,  <span class="attr">loader</span>:<span class="string">"babel-loader"</span>,</span><br><span class="line">     exclude: path.resolve (__dirname,<span class="string">"./node_modules"</span>),</span><br><span class="line">     include: path.resolve (__dirname, <span class="string">"./src"</span>),</span><br><span class="line">     options: {<span class="string">"presets"</span>: [<span class="string">"latest"</span>]  }</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">     test:<span class="regexp">/\.html$/</span> ,  <span class="attr">loader</span>:<span class="string">"html-loader"</span>,</span><br><span class="line">     include:path.resolve(__dirname, <span class="string">"./src/layer"</span>),</span><br><span class="line">     exclude: path.resolve (__dirname,<span class="string">"./node_modules"</span>)</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">     test:<span class="regexp">/\.ejs$/</span> ,  <span class="attr">loader</span>:<span class="string">"ejs-loader"</span>,</span><br><span class="line">     include:path.resolve(__dirname, <span class="string">"./src/layer"</span>),</span><br><span class="line">     exclude: path.resolve (__dirname,<span class="string">"./node_modules"</span>)</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">     test: <span class="regexp">/\.(png|jpg|jpeg|gif|svg| woff|woff2|ttf|eot|otf)$/i</span>,</span><br><span class="line">     loaders: [</span><br><span class="line">      <span class="string">"file-loader"</span>,</span><br><span class="line">      <span class="string">"url-loader?limit=8192"</span>,{</span><br><span class="line">       loader:  <span class="string">"image-webpack-loader"</span>,</span><br><span class="line">       options: {</span><br><span class="line">        gifsicle: {  <span class="attr">interlaced</span>: <span class="literal">false</span> } ,</span><br><span class="line">        optipng: {  <span class="attr">optimizationLevel</span>:  <span class="number">7</span> },</span><br><span class="line">        pngquant: {  <span class="attr">quality</span>: <span class="string">"65-90"</span>,  <span class="attr">speed</span>: <span class="number">4</span> },</span><br><span class="line">        mozjpeg: {  <span class="attr">progressive</span>: <span class="literal">true</span>,  <span class="attr">quality</span>: <span class="number">65</span> },</span><br><span class="line">        webp: { <span class="attr">quality</span>:  <span class="number">75</span> } }</span><br><span class="line">       }</span><br><span class="line">     ],</span><br><span class="line">     exclude: path.resolve (__dirname,<span class="string">"./node_modules"</span>)</span><br><span class="line"> </span><br><span class="line">    }</span><br><span class="line">   ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//打包前 先删除 dist 目录下的文件</span></span><br><span class="line">   <span class="keyword">new</span> CleanWebpackPlugin(</span><br><span class="line">    [<span class="string">"dist"</span>],</span><br><span class="line">    {</span><br><span class="line">     root: __dirname,<span class="comment">//指定插件根目录 位置</span></span><br><span class="line">     verbose: <span class="literal">true</span>, <span class="comment">//开启在控制台输出 信息</span></span><br><span class="line">     dry: <span class="literal">false</span> <span class="comment">//启用删除文件</span></span><br><span class="line">    }</span><br><span class="line">   ),</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//生成 html</span></span><br><span class="line">   <span class="keyword">new</span> htmlWebpackPlugin({</span><br><span class="line">    filename: <span class="string">"index.html"</span>,<span class="comment">//文件名</span></span><br><span class="line">    template: <span class="string">"index.html"</span>,<span class="comment">//模板</span></span><br><span class="line">    inject: <span class="literal">false</span>,<span class="comment">//js 的注入标签</span></span><br><span class="line">    <span class="comment">//这个配置项为 true 表示自动把打包出来的文 件通过自动生成 script 标签添加到 html 中</span></span><br><span class="line"> </span><br><span class="line">    title: <span class="string">"参数 title"</span>,<span class="comment">//通过&lt;%=  htmlWebpackPlugin.options.title %&gt; 引用</span></span><br><span class="line">    date: <span class="keyword">new</span> <span class="built_in">Date</span>()<span class="comment">//通过&lt;%=  htmlWebpackPlugin.options.date %&gt;引 用</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//favicon: 'path/to/yourfile.ico'</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// excludeChunks: [''],//排除的块</span></span><br><span class="line">    <span class="comment">// chunks: ['app','people']//选中的 块</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*minify:{ //压缩</span></span><br><span class="line"><span class="comment">     removeComments: true,</span></span><br><span class="line"><span class="comment">     collapseWhitespace: true,</span></span><br><span class="line"><span class="comment">     removeRedundantAttributes:  true,</span></span><br><span class="line"><span class="comment">     useShortDoctype: true,</span></span><br><span class="line"><span class="comment">     removeEmptyAttributes: true,</span></span><br><span class="line"><span class="comment">     removeStyleLinkTypeAttributes:  true,</span></span><br><span class="line"><span class="comment">     keepClosingSlash: true,</span></span><br><span class="line"><span class="comment">     minifyJS: true,</span></span><br><span class="line"><span class="comment">     minifyCSS: true,</span></span><br><span class="line"><span class="comment">     minifyURLs: true,</span></span><br><span class="line"><span class="comment">    }*/</span></span><br><span class="line"> </span><br><span class="line">   }),</span><br><span class="line">   <span class="comment">//防止 CSS 文件混乱，单独生成一个 css 文件</span></span><br><span class="line">   <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"./css/[name] .min.css"</span>),</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//在每个生成的 chunk 顶部添加 banner</span></span><br><span class="line">   <span class="keyword">new</span> webpack.BannerPlugin (<span class="string">"Anthor:Simon"</span>),<span class="comment">//添加一个显示版权声明的插 件</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin({</span><br><span class="line">    compress:{<span class="comment">//额外的压缩选项</span></span><br><span class="line">     warnings:<span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// mangle: {  排除不想要压缩的对象名称</span></span><br><span class="line">             <span class="comment">//      except: ['$super', '$',  'exports', 'require', 'module',  '_']</span></span><br><span class="line">             <span class="comment">// },</span></span><br><span class="line">   }),<span class="comment">//压缩 js</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">//定义全局变量</span></span><br><span class="line">   <span class="keyword">new</span> webpack.DefinePlugin({</span><br><span class="line">    __DEV__: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse (process.env.DEBUG || <span class="string">"false"</span>))</span><br><span class="line">   }),</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//使用 ProvidePlugin 加载的模块在使用时将不再 需要 import 和 require 进行引入</span></span><br><span class="line">   <span class="comment">//全局自动加载模块</span></span><br><span class="line">   <span class="keyword">new</span> webpack.ProvidePlugin({</span><br><span class="line">    $: <span class="string">"jquery"</span>,</span><br><span class="line">    jQuery: <span class="string">"jquery"</span></span><br><span class="line">   }),</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//打开服务器后 会自动打开浏览器</span></span><br><span class="line">   <span class="keyword">new</span> OpenBrowserPlugin({<span class="attr">url</span>:  <span class="string">"http://localhost:8080"</span>}),</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//排序输出,为组件分配 ID</span></span><br><span class="line">   <span class="keyword">new</span>  webpack.optimize.OccurrenceOrderPlugin (),</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 启用 HMR 热加载插件</span></span><br><span class="line">   <span class="keyword">new</span> webpack.HotModuleReplacementPlugin (),</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 打印日志信息时 webpack 默认使用模块的数 字 ID 指代模块，不便于 debug，</span></span><br><span class="line">   <span class="comment">// 这个插件可以将其替换为模块的真实路径</span></span><br><span class="line">   <span class="keyword">new</span> webpack.NamedModulesPlugin()</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/*提取 Chunks 中的公共内容</span></span><br><span class="line"><span class="comment">   new webpack.optimize.CommonsChunkPlugin ({</span></span><br><span class="line"><span class="comment">    name: ["vendor", "manifest"], //  vendor libs + extracted manifest</span></span><br><span class="line"><span class="comment">    minChunks: Infinity,</span></span><br><span class="line"><span class="comment">   }),*/</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">/*拷贝资源插件 适用于线上场景</span></span><br><span class="line"><span class="comment">   new CopyWebpackPlugin([{</span></span><br><span class="line"><span class="comment">       from: __dirname + '/src/public'</span></span><br><span class="line"><span class="comment">   }]),*/</span></span><br><span class="line">  ]</span><br><span class="line"> };</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">module</span>.exports = MyConfig;</span><br></pre></td></tr></tbody></table></figure> </div><p></p><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>转载本站文章请注明作者和出处 <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。  </p><style>.post-toc-level-4{ display:none }.post-content ol li:first-line { color: #999; font-weight: bold; }</style>]]></content>
    
    <summary type="html">
    
      Webpack学习手册。
    
    </summary>
    
    
      <category term="前端" scheme="https://tomotoes.com/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://tomotoes.com/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Webpack" scheme="https://tomotoes.com/blog/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>链式向前星</title>
    <link href="https://tomotoes.com/blog/chain-forward-star/"/>
    <id>https://tomotoes.com/blog/chain-forward-star/</id>
    <published>2017-11-22T14:24:41.000Z</published>
    <updated>2021-10-05T10:24:13.202Z</updated>
    
    <content type="html"><![CDATA[<p>这是一种神奇的数据结构。<a id="more"></a></p><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>听说是某个高中 Oi 菊苣发明，%%%</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>有的时候有的图可能比较稀疏而且点数较多，邻接矩阵存不下，所以就要用到邻接表。邻接表用 vector 数组比较方便，但是 vector 比较慢。所以就有了链式向前星。</p><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>通过 Head 可以找到一个点的所有边,<strong>可以把 Head 理解为：链表的有实际含义的头节点</strong></p><p>Head[N]永远保存最后一次输入的 N 点数组的下标值，</p><p>Head[N]=idx; 意思是，保存 N 点的数组的下标值</p><p>而 Next 保存变化中的 Head，但不保存最后一次的 Head</p><p>Edge[i].Next=Head[N]; Head[N]=idx++;从而 Head 与 Next 数组实现链式向前星的整个过程，</p><p>Head 相当于链表的有实际含义的头节点Next 保存链表中的节点，但值得注意的是 Next 与 Head 都是通过保存下标值的方式实现的相当于：<strong>索引式链表</strong>。</p><p>End 为终点，Value 为权值，先不提而 Next 就相当于链表中的节点的位置，而没有头节点 Head ,是无法提取的。保存下标值的方式很有趣，虽然开始理解起来有点怪。</p><p>int i=Head[S]; 此时 i 为最后一次保存 S 点数组的下标值，也就是最后一次输入的 S 点数据Edge[i].End 便为最后一次输入 S 点的终点，Value 也是同理，而 S 作为出发点，不再多提</p><p>之后很关键，i=Edge[i].Next，要知道，每次的 Edge[i].Next 都是由 Head 变化而来意思就是，i=Edge[i].Next,此后的 i 为倒数第二次输入 S 点数组的下标值！i=Edge[Head[S]].Next;之后 i=Edge[Edge[Head[S]].Next;].Next;从而反复循环，直到，下一条边为 0 时，便是最后一次输入的 S 点的数组的下标值因为 最开始时，Edge[i].Next=Head[S]=0;</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> End;<span class="comment">//保存一个边的终点</span></span><br><span class="line">    <span class="keyword">int</span> Next;<span class="comment">//保存一个点（起点）的 除了最后一条（输入的顺序）之外的所有边的下标值</span></span><br><span class="line">    <span class="keyword">int</span> Value;<span class="comment">//保存一条边的权值</span></span><br><span class="line">    Node(){}</span><br><span class="line">    Node(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):</span><br><span class="line">    End(a),Next(b),Value(c){}</span><br><span class="line">}Edge[maxn];</span><br><span class="line"><span class="keyword">bool</span> Vis[maxn];</span><br><span class="line"><span class="keyword">int</span> Head[maxn];<span class="comment">//Head 数组 为边的索引</span></span><br><span class="line"><span class="keyword">int</span> Idx;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Map;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> Start,<span class="keyword">int</span> End,<span class="keyword">int</span> Value)</span></span>{</span><br><span class="line">    Edge[Idx]=Node(End,Head[Start],Value);</span><br><span class="line">    Head[Start]=Idx++;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>{</span><br><span class="line">    Idx=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(Edge,<span class="number">0</span>,<span class="keyword">sizeof</span>(Edge));</span><br><span class="line">    <span class="built_in">memset</span>(Vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(Vis));</span><br><span class="line">    <span class="keyword">int</span> N,M,x,y,z;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="keyword">while</span>(M--){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        AddEdge(x,y,z);</span><br><span class="line">        AddEdge(y,x,z);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> Start;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Start);</span><br><span class="line">    Vis[Start]=<span class="literal">true</span>;</span><br><span class="line">    Map.push(Start);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Traverse</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">while</span>(!Map.empty()){</span><br><span class="line">        <span class="keyword">int</span> Start=Map.front();</span><br><span class="line">        Map.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[Start];i;i=Edge[i].Next){</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d-&gt;%d=%d\n"</span>,Start,Edge[i].End,Edge[i].Value);</span><br><span class="line">            <span class="keyword">if</span>(!Vis[Edge[i].End]){</span><br><span class="line">                Map.push(Edge[i].End);</span><br><span class="line">                Vis[Edge[i].End]=<span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    Init();</span><br><span class="line">    Traverse();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入样例</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">2 3 4</span></span><br><span class="line"><span class="comment">3 4 5</span></span><br><span class="line"><span class="comment">4 5 6</span></span><br><span class="line"><span class="comment">5 6 7</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>优点：不会浪费数据空间;缺点：无法直接判断两个点是否是邻接点链式向前星是一个很不错的数据结构，利用数组索引特性，加上其他权值，存储了整个图。</p></blockquote>]]></content>
    
    <summary type="html">
    
      链式向前星,数据结构,ACM
    
    </summary>
    
    
      <category term="算法" scheme="https://tomotoes.com/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://tomotoes.com/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Vim 修炼秘籍之命令篇</title>
    <link href="https://tomotoes.com/blog/order-of-vim-cultivation-cheats/"/>
    <id>https://tomotoes.com/blog/order-of-vim-cultivation-cheats/</id>
    <published>2017-11-22T02:20:04.000Z</published>
    <updated>2021-10-05T10:24:13.154Z</updated>
    
    <content type="html"><![CDATA[<p>总结下 Vim 常用命令以及使用技巧。<a id="more"></a></p><h3 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a>移动命令</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">h</span>       <span class="string">左</span></span><br><span class="line"><span class="attr">j</span>       <span class="string">下 </span></span><br><span class="line"><span class="attr">k</span>       <span class="string">上 </span></span><br><span class="line"><span class="attr">l</span>       <span class="string">右</span></span><br><span class="line"><span class="attr">space</span>   <span class="string">右</span></span><br><span class="line"></span><br><span class="line"><span class="attr">e</span>       <span class="string">后单词尾</span></span><br><span class="line"><span class="attr">w</span>       <span class="string">后单词头</span></span><br><span class="line"><span class="attr">b</span>       <span class="string">前单词头</span></span><br><span class="line"></span><br><span class="line"><span class="meta">^</span>       <span class="string">行首</span></span><br><span class="line"><span class="meta">$</span>        <span class="string">行尾 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">{</span>       <span class="string">上段</span></span><br><span class="line"><span class="meta">}</span>       <span class="string">下段</span></span><br><span class="line"></span><br><span class="line"><span class="attr">H</span>       <span class="string">屏幕上面</span></span><br><span class="line"><span class="attr">M</span>       <span class="string">屏幕中间</span></span><br><span class="line"><span class="attr">L</span>       <span class="string">屏幕下面</span></span><br><span class="line"></span><br><span class="line"><span class="attr">gg</span>      <span class="string">文件头</span></span><br><span class="line"><span class="attr">G</span>       <span class="string">文件尾</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zz</span>      <span class="string">定位屏幕中间</span></span><br><span class="line"><span class="attr">zt</span>      <span class="string">定位屏幕顶部</span></span><br><span class="line"><span class="attr">zb</span>      <span class="string">定位屏幕底部</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mk</span>      <span class="string">标记</span></span><br><span class="line"><span class="meta">`k</span>      <span class="string">转到标记</span></span><br></pre></td></tr></tbody></table></figure><h3 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span>       <span class="string">后字符</span></span><br><span class="line"><span class="attr">A</span>       <span class="string">行尾</span></span><br><span class="line"></span><br><span class="line"><span class="attr">i</span>       <span class="string">前字符</span></span><br><span class="line"><span class="attr">I</span>       <span class="string">行首</span></span><br><span class="line"></span><br><span class="line"><span class="attr">s</span>       <span class="string">当前字符</span></span><br><span class="line"><span class="attr">S</span>       <span class="string">当前行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">o</span>       <span class="string">下一行</span></span><br><span class="line"><span class="attr">O</span>       <span class="string">上一行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cc</span>      <span class="string">当前行</span></span><br><span class="line"><span class="attr">C</span>       <span class="string">后字符至行尾</span></span><br><span class="line"><span class="attr">c+op</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">/a</span>       <span class="string">文章 n N</span></span><br><span class="line"><span class="meta">?a</span>       <span class="string">反向</span></span><br><span class="line"></span><br><span class="line"><span class="attr">fa</span>       <span class="string">当前行 ; ,</span></span><br><span class="line"><span class="attr">Fa</span>       <span class="string">反向</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ta</span>       <span class="string">当前行的前一个字符 ; ,</span></span><br><span class="line"><span class="attr">Ta</span>       <span class="string">反向</span></span><br><span class="line"></span><br><span class="line"><span class="attr">\*</span>       <span class="string">文章 n N</span></span><br><span class="line"><span class="attr">\#</span>        <span class="string">反向</span></span><br></pre></td></tr></tbody></table></figure><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span>       <span class="string">括号匹配</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;&lt;</span>      <span class="string">缩进</span></span><br><span class="line"></span><br><span class="line"><span class="attr">u</span>       <span class="string">撤回</span></span><br><span class="line"></span><br><span class="line"><span class="attr">p</span>       <span class="string">粘贴</span></span><br><span class="line"><span class="attr">P</span>       <span class="string">粘贴至上一行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">yy</span>      <span class="string">复制</span></span><br><span class="line"><span class="attr">Y</span>       <span class="string">复制</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rt</span>      <span class="string">替换</span></span><br><span class="line"><span class="attr">R</span>       <span class="string">替换模式</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dd</span>      <span class="string">剪切</span></span><br><span class="line"><span class="attr">D</span>       <span class="string">剪切至行尾</span></span><br><span class="line"></span><br><span class="line"><span class="attr">J</span>       <span class="string">连接下一行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">x</span>       <span class="string">剪切当前字符</span></span><br><span class="line"><span class="attr">X</span>       <span class="string">剪切前一个字符</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zc</span>      <span class="string">折叠</span></span><br><span class="line"><span class="attr">zo</span>      <span class="string">打开折叠</span></span><br><span class="line"></span><br><span class="line"><span class="attr">v</span>       <span class="string">选中字符</span></span><br><span class="line"><span class="attr">V</span>       <span class="string">选中当前行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">~</span>       <span class="string">切换当前字符大小写</span></span><br><span class="line"><span class="attr">Vu</span>      <span class="string">当前行小写</span></span><br><span class="line"><span class="attr">VU</span>      <span class="string">当前行大写</span></span><br></pre></td></tr></tbody></table></figure><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"ayy    将当前数据复制到 a 的寄存器</span></span><br><span class="line"><span class="comment">"ap     将 a 的寄存器中的数据粘贴出来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">qa</span>      寄存器<span class="keyword">a</span>的开始记录</span><br><span class="line">op      操作~</span><br><span class="line">q       结束记录</span><br><span class="line">@a      使用寄存器</span><br><span class="line"></span><br><span class="line"><span class="comment">"_      黑洞寄存器,说白了就是删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"adiw  </span></span><br><span class="line"><span class="comment">"aP</span></span><br></pre></td></tr></tbody></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:w</span>       保存文件</span><br><span class="line"><span class="selector-pseudo">:wq</span>      退出编辑器，且保存文件</span><br><span class="line"><span class="selector-pseudo">:x</span>       退出编辑器，且保存文件</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">q</span>!       放弃修改</span><br><span class="line"><span class="selector-tag">e</span>!       放弃 修改后 载入文件</span><br></pre></td></tr></tbody></table></figure><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">介词</span><br><span class="line"><span class="selector-tag">i</span>        Inside  <span class="string">"x"</span> =&gt; <span class="string">""</span></span><br><span class="line"><span class="selector-tag">a</span>        Around  <span class="string">"x"</span> =&gt;  </span><br><span class="line">f        Forward  x  =&gt; ..<span class="selector-class">.o</span>...</span><br><span class="line">t        To       x  =&gt; ..<span class="selector-class">.ox</span>...</span><br><span class="line"></span><br><span class="line">名词</span><br><span class="line">w        Word</span><br><span class="line">s        Sentence</span><br><span class="line"><span class="selector-tag">p</span>        Paragraph </span><br><span class="line"><span class="selector-tag">b</span>        ()</span><br><span class="line">B        {}</span><br><span class="line"><span class="number">0</span>        lineHead</span><br><span class="line">[]</span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="string">""</span></span><br><span class="line">&lt;&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">动词</span>   <span class="string">介词          名词</span></span><br><span class="line"><span class="meta">d/y</span>   <span class="string">i/a/f/t   c~/b/B/w/"/'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">动词</span>    <span class="string">数词      名词</span></span><br><span class="line"><span class="attr">2</span>       <span class="string">d        w</span></span><br><span class="line"></span><br><span class="line"><span class="meta">数词</span>    <span class="string">动词</span></span><br><span class="line"><span class="attr">5</span>       <span class="string">G</span></span><br><span class="line"><span class="attr">4</span>       <span class="string">j</span></span><br><span class="line"></span><br><span class="line"><span class="attr">xp</span>      <span class="string">交换两个字符</span></span><br><span class="line"></span><br><span class="line"><span class="attr">yiw</span>     <span class="string">拷贝一个单词      </span></span><br><span class="line"></span><br><span class="line"><span class="attr">dk</span>      <span class="string">删除当前行以及上一行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dft</span>     <span class="string">删除至 t 包括 t</span></span><br></pre></td></tr></tbody></table></figure><h3 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h3><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">.       </span>重复上一次修改命令</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      Vim,工具,命令
    
    </summary>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://tomotoes.com/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Vim" scheme="https://tomotoes.com/blog/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>HDU1874-畅通工程续</title>
    <link href="https://tomotoes.com/blog/hdu1874-problem/"/>
    <id>https://tomotoes.com/blog/hdu1874-problem/</id>
    <published>2017-11-22T01:30:59.000Z</published>
    <updated>2021-10-05T10:24:13.154Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874" target="_blank" rel="external nofollow noopener noreferrer">题目传送门</a><a id="more"></a></p><p>大一做的最短路模板题，很适合练手我分别利用了 3 种数据结构+Dijkstra/Floyd 来解决，解题步骤具体如下：</p><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>15ms</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> Map[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> Vis[maxn];</span><br><span class="line"><span class="keyword">int</span> Dis[maxn];</span><br><span class="line"><span class="keyword">int</span> N,M,S,D;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">memset</span>(Map,INF,<span class="keyword">sizeof</span>(Map));</span><br><span class="line">    <span class="built_in">memset</span>(Vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(Vis));</span><br><span class="line">    <span class="built_in">memset</span>(Dis,<span class="number">0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">while</span>(M--){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        Map[x][y]=Map[y][x]=min(Map[x][y],z);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;D);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i){</span><br><span class="line">        Dis[i]=Map[S][i];</span><br><span class="line">    }</span><br><span class="line">    Dis[S]=<span class="number">0</span>;</span><br><span class="line">    Vis[S]=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;N;++l){</span><br><span class="line">        <span class="keyword">int</span> Min=INF,k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i){</span><br><span class="line">            <span class="keyword">if</span>(!Vis[i]&amp;&amp;Dis[i]&lt;Min){</span><br><span class="line">                Min=Dis[i];</span><br><span class="line">                k=i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        Vis[k]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(Min!=INF){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j){</span><br><span class="line">                <span class="keyword">if</span>(!Vis[j]&amp;&amp;Dis[j]&gt;Dis[k]+Map[k][j]){</span><br><span class="line">                    Dis[j]=Dis[k]+Map[k][j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    Dis[D]==INF?<span class="built_in">printf</span>(<span class="string">"-1n"</span>):<span class="built_in">printf</span>(<span class="string">"%dn"</span>,Dis[D]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M)){</span><br><span class="line">        Init();</span><br><span class="line">        Dijkstra();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>15ms</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> from,to,cost;</span><br><span class="line">    Node(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):from(a),to(b),cost(c){}</span><br><span class="line">};</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt;Edges;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;G[maxn];</span><br><span class="line"><span class="keyword">int</span> Dis[maxn];</span><br><span class="line"><span class="keyword">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pair;</span><br><span class="line">priority_queue&lt;Pair,<span class="built_in">vector</span>&lt;Pair&gt;,greater&lt;Pair&gt; &gt;Q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>{</span><br><span class="line">    Edges.push_back(Node(x,y,z));</span><br><span class="line">    G[x].push_back(Edges.size()<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>{</span><br><span class="line">    Edges.clear();</span><br><span class="line">    <span class="built_in">memset</span>(Dis,INF,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;G[i++].clear());</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">while</span>(M--){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        AddEdge(x,y,z);</span><br><span class="line">        AddEdge(y,x,z);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;T);</span><br><span class="line">    Dis[S]=<span class="number">0</span>;</span><br><span class="line">    Q.push(Pair(<span class="number">0</span>,S));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> Now,Val,L;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty()){</span><br><span class="line">        Now=Q.top().second;</span><br><span class="line">        Val=Q.top().first;</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span>(Dis[Now]&lt;Val){<span class="keyword">continue</span>;}</span><br><span class="line">        L=G[Now].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L;++i){</span><br><span class="line">            <span class="keyword">if</span>(Dis[Edges[G[Now][i]].to]&gt;Dis[Now]+Edges[G[Now][i]].cost){</span><br><span class="line">                Dis[Edges[G[Now][i]].to]=Dis[Now]+Edges[G[Now][i]].cost;</span><br><span class="line">                Q.push(Pair(Dis[Edges[G[Now][i]].to],Edges[G[Now][i]].to));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    Dis[T]==INF?<span class="built_in">printf</span>(<span class="string">"-1n"</span>):<span class="built_in">printf</span>(<span class="string">"%dn"</span>,Dis[T]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M)){</span><br><span class="line">        Init();</span><br><span class="line">        Dijkstra();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="链式向前星"><a href="#链式向前星" class="headerlink" title="链式向前星"></a>链式向前星</h3><p>0ms</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2017</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> End;</span><br><span class="line">    <span class="keyword">int</span> Value;</span><br><span class="line">    <span class="keyword">int</span> Front;</span><br><span class="line">    Node(){}</span><br><span class="line">    Node(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):End(a),Front(b),Value(c){}</span><br><span class="line">}Edge[maxn];</span><br><span class="line"><span class="keyword">int</span> Head[maxn];</span><br><span class="line"><span class="keyword">int</span> Dis[maxn];</span><br><span class="line"><span class="keyword">int</span> N,M,S,D,Idx;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;Pair;</span><br><span class="line">priority_queue&lt;Pair,<span class="built_in">vector</span>&lt;Pair&gt;,greater&lt;Pair&gt; &gt;Q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> S,<span class="keyword">int</span> D,<span class="keyword">int</span> V)</span></span>{</span><br><span class="line">    Edge[Idx]=Node(D,Head[S],V);</span><br><span class="line">    Head[S]=Idx++;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>{</span><br><span class="line">    Idx=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(Head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(Head));</span><br><span class="line">    <span class="built_in">memset</span>(Dis,INF,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">while</span>(M--){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        AddEdge(x,y,z);</span><br><span class="line">        AddEdge(y,x,z);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;D);</span><br><span class="line">    Pair pNew;</span><br><span class="line">    Dis[S]=<span class="number">0</span>;</span><br><span class="line">    pNew.first=<span class="number">0</span>;</span><br><span class="line">    pNew.second=S;</span><br><span class="line">    Q.push(pNew);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> Now,Val;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty()){</span><br><span class="line">        Now=Q.top().second;</span><br><span class="line">        Val=Q.top().first;</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span>(Dis[Now]&lt;Val)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[Now];~i;i=Edge[i].Front){</span><br><span class="line">            <span class="keyword">if</span>(Dis[Edge[i].End]&gt;Dis[Now]+Edge[i].Value){</span><br><span class="line">                Dis[Edge[i].End]=Dis[Now]+Edge[i].Value;</span><br><span class="line">                Q.push(Pair(Dis[Edge[i].End],Edge[i].End));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    Dis[D]==INF?<span class="built_in">printf</span>(<span class="string">"-1n"</span>):<span class="built_in">printf</span>(<span class="string">"%dn"</span>,Dis[D]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M)){</span><br><span class="line">        Init();</span><br><span class="line">        Dijkstra();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><p>62ms</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> Map[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> N,M,S,D;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="built_in">memset</span>(Map,INF,<span class="keyword">sizeof</span>(Map));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i){</span><br><span class="line">        Map[i][i]=<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(M--){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        Map[x][y]=Map[y][x]=min(Map[x][y],z);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;D);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;++k){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j){</span><br><span class="line">                Map[i][j]=min(Map[i][j],Map[i][k]+Map[k][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    Map[S][D]==INF?<span class="built_in">printf</span>(<span class="string">"-1\n"</span>):<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Map[S][D]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M)){</span><br><span class="line">        Init();</span><br><span class="line">        Floyd();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>自从退 acm，很多东西都在遗忘…</p>]]></content>
    
    <summary type="html">
    
      HDU,最短路,Dijkstra,ACM
    
    </summary>
    
    
      <category term="算法" scheme="https://tomotoes.com/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://tomotoes.com/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
